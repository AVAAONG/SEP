// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// take all this prisma code and cover to prisma formating cpde
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ====================================== Admin related shchema  ======================================
enum Role {
  ADMIN
  COMITEE
  PROYECTS
  CHAT
  SCHOLAR
}

// ====================================== Actvities related shchema  ======================================
enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
}

enum Platform {
  zoom
  google_meet
  otra
  padlet
  oficinas_de_avaa
  teams
  discord
  jitsi
}

enum activityStatus {
  AGENDADO
  EN_PROCESO
  REALIZADO
  SUSPENDIDO
  CANCELADO
}

enum Pensum {
  Ejercicio_ciudadano
  Liderazgo
  Gerencia_de_si_mismo
  TIC
  Emprendimiento
  Trabajo_en_equipo
}

enum Level {
  Basico
  Intermedio
  Avanzado
}

enum AsociatedProject {
  UMAA
  OAL
  ALV
  UVPLV
  oficinas_de_avaa
  Externos
}

model WorkshopDates {
  id         String   @id @default(uuid())
  date       DateTime
  start_time DateTime
  end_time   DateTime
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String

  @@index([workshopId])
}

model ChatDates {
  id         String   @id @default(uuid())
  date       DateTime
  start_time DateTime
  end_time   DateTime
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String

  @@index([chatId])
}

// model VolunteerDates {
//   id           String   @id @default(uuid())
//   date         DateTime
//   start_time   DateTime
//   end_time     DateTime
//   volunteer    Volunteer @relation(fields: [volunteerId], references: [id])
//   volunteerId  String

//   @@index([volunteerId])
// }

model WorkshopTempData {
  id              String   @id @default(uuid())
  workshop        Workshop @relation(fields: [workshopId], references: [id])
  workshopId      String   @unique
  formLink        String
  meetingLink     String
  meetingId       String
  meetingPassword String
  calendarID      String
}

model ChatsTempData {
  id              String   @id @default(uuid())
  chat            Chat @relation(fields: [chatId], references: [id])
  chatId          String   @unique
  formLink        String
  meetingLink     String
  meetingId       String
  meetingPassword String
  calendarID      String
}

model Workshop {
  id             String             @id @default(uuid())
  title          String
  pensum         Pensum
  dates          WorkshopDates[]
  speaker        WorkshopSpeakers[]
  spots          Int
  takenSpots     Int
  modality       Modality
  platform       Platform
  description    String
  avaaYear       String
  activityStatus activityStatus
  tempData       WorkshopTempData?

  @@index([title, modality, activityStatus, pensum])
}

model Chat {
  id             String         @id @default(uuid())
  title          String
  dates          ChatDates[]
  speaker        ChatSpeakers[]
  spots          Int
  takenSpots     Int
  platform       Platform
  modality       Modality
  activityStatus activityStatus
  level          Level
  tempData       ChatsTempData?
  @@index([title, modality, activityStatus, level])
}

// ====================================== Users related shchema  ======================================

enum Region {
  Zulia
  Caracas
  Carabobo
}

enum ScholarStatus {
  Probatorio1
  Probatorio2
  Normal
}

enum ScholarCanAssist {
  Yes
  No
}

// This model is for storing all related Scholar information
model Scholar {
  // this handle relation 1 - 1 in prisma
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // this is for store scholar privilege and location
  region                Region
  scholarStatus         ScholarStatus
  canAssistToChats      ScholarCanAssist
  canAssistToWorkshops  ScholarCanAssist
  canAssistToVolunteers ScholarCanAssist

  //this is for store scholar information
  firstName                    String
  lastName                     String
  dni                          String
  gender                       String
  birthDate                    DateTime
  //we can obtai the age in the frontend
  localPhoneNumber             String
  cellPhoneNumber              String
  //if whatsapp number is present then we can sset have whatsapp to true
  whatsAppNumber               String?
  stateOfOrigin                String
  currentZone                  String
  housingType                  String
  email                        String    @unique
  collage                      String
  carrer                       String
  currentAcademicPeriod        String
  academicYear                 Int
  classModality                String
  cvaLocacion                  String
  englishLevel                 String
  notStartedCvareason          String?
  avaaAdmissionYear            Int?
  // el ano de avaa lo colocamos nosotros en el frontend
  // si hace voluntariado permanente o no lo podemos colocar en el frontend
  volunteeringOrganizationName String?
  academicLoadCompleted        Boolean?
  currentStatus                String
  ceremonyDate                 DateTime?
  currentlyWorking             Boolean?
  organizationName             String?
  positionHeld                 String?
}

// ====================================== Users related shchema  ======================================

model WorkshopSpeakers {
  id          String     @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  workshops   Workshop[]

  @@unique([email])
  @@index([email])
}

model ChatSpeakers {
  id    String @id @default(uuid())
  name  String
  email String
  chats Chat[]

  @@unique([email])
  @@index([email])
}

// ============================================================== Auth related shchema  ==============================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]
  role     Role      @default(SCHOLAR)
  scholar  Scholar?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
