// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// take all this prisma code and cover to prisma formating cpde
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ====================================== Admin related shchema  ======================================
enum Role {
  ADMIN
  COMITEE
  PROYECTS
  CHAT
  SCHOLAR
}

// ====================================== Actvities related shchema  ======================================
enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
}

enum Platform {
  zoom
  google_meet
  otra
  padlet
  oficinas_de_avaa
  teams
  discord
  jitsi
}

enum Status {
  AGENDADO
  EN_PROCESO
  REALIZADO
  SUSPENDIDO
  CANCELADO
}

enum Pensum {
  Ejercicio_ciudadano
  Liderazgo
  Gerencia_de_si_mismo
  TIC
  Emprendimiento
  Trabajo_en_equipo
}

enum Level {
  Basico
  Intermedio
  Avanzado
}

enum AsociatedProject {
  UMAA
  OAL
  ALV
  UVPLV
  oficinas_de_avaa
  Externos
}

model WorkshopDates {
  id         String   @id @default(uuid())
  date       DateTime
  start_time DateTime
  end_time   DateTime
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String

  @@index([workshopId])
}

model ChatDates {
  id         String   @id @default(uuid())
  date       DateTime
  start_time DateTime
  end_time   DateTime
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String

  @@index([chatId])
}

model Workshop {
  id          String             @id @default(uuid())
  title       String
  pensum      Pensum
  dates       WorkshopDates[]
  speaker     WorkshopSpeakers[]
  spots       Int
  takenSpots  Int
  modality    Modality
  platform    Platform
  description String
  avaaYear    String
  meetingLink String
  meetingId   String
  meetingPass String
  status      Status

  @@index([title, modality, status, pensum])
}

model Chat {
  id         String         @id @default(uuid())
  title      String
  dates      ChatDates[]
  speaker    ChatSpeakers[]
  spots      Int
  takenSpots Int
  platform   Platform
  modality   Modality
  status     Status
  level      Level

  @@index([title, modality, status, level])
}

// ====================================== Users related shchema  ======================================

model WorkshopSpeakers {
  id          String     @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  workshops   Workshop[]

  @@unique([email])
  @@index([email])
}

model ChatSpeakers {
  id    String @id @default(uuid())
  name  String
  email String
  chats Chat[]

  @@unique([email])
  @@index([email])
}

// ============================================================== Auth related shchema  ==============================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(SCHOLAR)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
