// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// take all this prisma code and cover to prisma formating cpde
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
// ====================================== Admin related shchema  ======================================
enum AdminRole {
  ADMIN
  COMITE
  PROYECTS
  CHAT
}

model Admin {
  id            String    @id @default(uuid())
  name          String
  email         String
  password      String
  access_token  String
  refresh_token String
  role          AdminRole

  @@unique([email])
  @@index([email])
}

// ====================================== Actvities related shchema  ======================================
enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
}

enum Platform {
  zoom
  google_meet
  otra
  padlet
  oficinas_de_avaa
  teams
  discord
  jitsi
}

enum Status {
  PENDIENTE
  REALIZADO
  SUSPENDIDO
  CANCELADO
}

enum Pensum {
  Ejercicio_ciudadano
  Liderazgo
  Gerencia_de_si_mismo
  TIC
  Emprendimiento
  Trabajo_en_equipo
}

enum Level {
  Basico
  Intermedio
  Avanzado
}

enum AsociatedProject {
  UMAA
  OAL
  ALV
  UVPLV
  oficinas_de_avaa
  Externos
}

model Dates {
  id          String    @id @default(uuid())
  date        DateTime
  start_time  DateTime
  end_time    DateTime
  Workshop    Workshop  @relation(fields: [workshopId], references: [id])
  workshopId  String
  Chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      String
  Volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId String
}

model Workshop {
  id         String             @id @default(uuid())
  title      String
  dates      Dates[]
  speaker    WorkshopSpeakers[]
  spots      Int
  takenSpots Int
  platform   Platform
  modality   Modality
  status     Status
  pensum     Pensum

  @@index([title, modality, status, pensum])
}

model Chat {
  id         String         @id @default(uuid())
  title      String
  dates      Dates[]
  speaker    ChatSpeakers[]
  spots      Int
  takenSpots Int
  platform   Platform
  modality   Modality
  status     Status
  level      Level

  @@index([title, modality, status, level])
}

model Volunteer {
  id               String           @id @default(uuid())
  title            String
  dates            Dates[]
  inCharge         String
  spots            Int
  takenSpots       Int
  asociatedProject AsociatedProject
  status           Status
}

// ====================================== Users related shchema  ======================================
//ser becaria avaa
//lider de comite
//lider de proyectos

model WorkshopSpeakers {
  id        String     @id @default(uuid())
  name      String
  email     String
  workshops Workshop[]

  @@unique([email])
  @@index([email])
}

model ChatSpeakers {
  id    String @id @default(uuid())
  name  String
  email String
  chats Chat[]

  @@unique([email])
  @@index([email])
}

// ============================================================== Auth related shchema  ==============================================================

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}