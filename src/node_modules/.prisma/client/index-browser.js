
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.15.0
 * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
 */
Prisma.prismaVersion = {
  client: "4.15.0",
  engine: "8fbc245156db7124f997f4cecdd8d1219e360944"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ChatDatesScalarFieldEnum = {
  id: 'id',
  date: 'date',
  start_time: 'start_time',
  end_time: 'end_time',
  chatId: 'chatId'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  spots: 'spots',
  takenSpots: 'takenSpots',
  platform: 'platform',
  modality: 'modality',
  activityStatus: 'activityStatus',
  level: 'level'
};

exports.Prisma.ChatSpeakersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email'
};

exports.Prisma.ChatsTempDataScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  formLink: 'formLink',
  meetingLink: 'meetingLink',
  meetingId: 'meetingId',
  meetingPassword: 'meetingPassword',
  calendarID: 'calendarID'
};

exports.Prisma.ScholarScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  region: 'region',
  scholarStatus: 'scholarStatus',
  canAssistToChats: 'canAssistToChats',
  canAssistToWorkshops: 'canAssistToWorkshops',
  canAssistToVolunteers: 'canAssistToVolunteers',
  firstName: 'firstName',
  lastName: 'lastName',
  dni: 'dni',
  gender: 'gender',
  birthDate: 'birthDate',
  localPhoneNumber: 'localPhoneNumber',
  cellPhoneNumber: 'cellPhoneNumber',
  whatsAppNumber: 'whatsAppNumber',
  stateOfOrigin: 'stateOfOrigin',
  currentZone: 'currentZone',
  housingType: 'housingType',
  email: 'email',
  collage: 'collage',
  carrer: 'carrer',
  currentAcademicPeriod: 'currentAcademicPeriod',
  academicYear: 'academicYear',
  classModality: 'classModality',
  cvaLocacion: 'cvaLocacion',
  englishLevel: 'englishLevel',
  notStartedCvareason: 'notStartedCvareason',
  avaaAdmissionYear: 'avaaAdmissionYear',
  volunteeringOrganizationName: 'volunteeringOrganizationName',
  academicLoadCompleted: 'academicLoadCompleted',
  currentStatus: 'currentStatus',
  ceremonyDate: 'ceremonyDate',
  currentlyWorking: 'currentlyWorking',
  organizationName: 'organizationName',
  positionHeld: 'positionHeld'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  image: 'image',
  role: 'role'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.WorkshopDatesScalarFieldEnum = {
  id: 'id',
  date: 'date',
  start_time: 'start_time',
  end_time: 'end_time',
  workshopId: 'workshopId'
};

exports.Prisma.WorkshopScalarFieldEnum = {
  id: 'id',
  title: 'title',
  pensum: 'pensum',
  spots: 'spots',
  takenSpots: 'takenSpots',
  modality: 'modality',
  platform: 'platform',
  description: 'description',
  avaaYear: 'avaaYear',
  activityStatus: 'activityStatus'
};

exports.Prisma.WorkshopSpeakersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.WorkshopTempDataScalarFieldEnum = {
  id: 'id',
  workshopId: 'workshopId',
  formLink: 'formLink',
  meetingLink: 'meetingLink',
  meetingId: 'meetingId',
  meetingPassword: 'meetingPassword',
  calendarID: 'calendarID'
};
exports.Level = {
  Basico: 'Basico',
  Intermedio: 'Intermedio',
  Avanzado: 'Avanzado'
};

exports.Modality = {
  PRESENCIAL: 'PRESENCIAL',
  VIRTUAL: 'VIRTUAL',
  HIBRIDO: 'HIBRIDO'
};

exports.Pensum = {
  Ejercicio_ciudadano: 'Ejercicio_ciudadano',
  Liderazgo: 'Liderazgo',
  Gerencia_de_si_mismo: 'Gerencia_de_si_mismo',
  TIC: 'TIC',
  Emprendimiento: 'Emprendimiento',
  Trabajo_en_equipo: 'Trabajo_en_equipo'
};

exports.Platform = {
  zoom: 'zoom',
  google_meet: 'google_meet',
  otra: 'otra',
  padlet: 'padlet',
  oficinas_de_avaa: 'oficinas_de_avaa',
  teams: 'teams',
  discord: 'discord',
  jitsi: 'jitsi'
};

exports.Region = {
  Zulia: 'Zulia',
  Caracas: 'Caracas',
  Carabobo: 'Carabobo'
};

exports.Role = {
  ADMIN: 'ADMIN',
  COMITEE: 'COMITEE',
  PROYECTS: 'PROYECTS',
  CHAT: 'CHAT',
  SCHOLAR: 'SCHOLAR'
};

exports.ScholarCanAssist = {
  Yes: 'Yes',
  No: 'No'
};

exports.ScholarStatus = {
  Probatorio1: 'Probatorio1',
  Probatorio2: 'Probatorio2',
  Normal: 'Normal'
};

exports.activityStatus = {
  AGENDADO: 'AGENDADO',
  EN_PROCESO: 'EN_PROCESO',
  REALIZADO: 'REALIZADO',
  SUSPENDIDO: 'SUSPENDIDO',
  CANCELADO: 'CANCELADO'
};

exports.Prisma.ModelName = {
  WorkshopDates: 'WorkshopDates',
  ChatDates: 'ChatDates',
  WorkshopTempData: 'WorkshopTempData',
  ChatsTempData: 'ChatsTempData',
  Workshop: 'Workshop',
  Chat: 'Chat',
  Scholar: 'Scholar',
  WorkshopSpeakers: 'WorkshopSpeakers',
  ChatSpeakers: 'ChatSpeakers',
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
