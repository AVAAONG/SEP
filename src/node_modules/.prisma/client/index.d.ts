
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model WorkshopDates
 * 
 */
export type WorkshopDates = {
  id: string
  date: Date
  start_time: Date
  end_time: Date
  workshopId: string
}

/**
 * Model ChatDates
 * 
 */
export type ChatDates = {
  id: string
  date: Date
  start_time: Date
  end_time: Date
  chatId: string
}

/**
 * Model WorkshopTempData
 * 
 */
export type WorkshopTempData = {
  id: string
  workshopId: string
  formLink: string
  meetingLink: string
  meetingId: string
  meetingPassword: string
  calendarID: string
}

/**
 * Model ChatsTempData
 * 
 */
export type ChatsTempData = {
  id: string
  chatId: string
  formLink: string
  meetingLink: string
  meetingId: string
  meetingPassword: string
  calendarID: string
}

/**
 * Model Workshop
 * 
 */
export type Workshop = {
  id: string
  title: string
  pensum: Pensum
  spots: number
  takenSpots: number
  modality: Modality
  platform: Platform
  description: string
  avaaYear: string
  activityStatus: activityStatus
}

/**
 * Model Chat
 * 
 */
export type Chat = {
  id: string
  title: string
  spots: number
  takenSpots: number
  platform: Platform
  modality: Modality
  activityStatus: activityStatus
  level: Level
}

/**
 * Model Scholar
 * 
 */
export type Scholar = {
  id: string
  userId: string
  region: Region
  scholarStatus: ScholarStatus
  canAssistToChats: ScholarCanAssist
  canAssistToWorkshops: ScholarCanAssist
  canAssistToVolunteers: ScholarCanAssist
  firstName: string
  lastName: string
  dni: string
  gender: string
  birthDate: Date
  localPhoneNumber: string
  cellPhoneNumber: string
  whatsAppNumber: string | null
  stateOfOrigin: string
  currentZone: string
  housingType: string
  email: string
  collage: string
  carrer: string
  currentAcademicPeriod: string
  academicYear: number
  classModality: string
  cvaLocacion: string
  englishLevel: string
  notStartedCvareason: string | null
  avaaAdmissionYear: number | null
  volunteeringOrganizationName: string | null
  academicLoadCompleted: boolean | null
  currentStatus: string
  ceremonyDate: Date | null
  currentlyWorking: boolean | null
  organizationName: string | null
  positionHeld: string | null
}

/**
 * Model WorkshopSpeakers
 * 
 */
export type WorkshopSpeakers = {
  id: string
  name: string
  email: string
  phoneNumber: string
}

/**
 * Model ChatSpeakers
 * 
 */
export type ChatSpeakers = {
  id: string
  name: string
  email: string
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string | null
  image: string | null
  role: Role
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = {
  identifier: string
  token: string
  expires: Date
}


/**
 * Enums
 */

export const Level: {
  Basico: 'Basico',
  Intermedio: 'Intermedio',
  Avanzado: 'Avanzado'
};

export type Level = (typeof Level)[keyof typeof Level]


export const Modality: {
  PRESENCIAL: 'PRESENCIAL',
  VIRTUAL: 'VIRTUAL',
  HIBRIDO: 'HIBRIDO'
};

export type Modality = (typeof Modality)[keyof typeof Modality]


export const Pensum: {
  Ejercicio_ciudadano: 'Ejercicio_ciudadano',
  Liderazgo: 'Liderazgo',
  Gerencia_de_si_mismo: 'Gerencia_de_si_mismo',
  TIC: 'TIC',
  Emprendimiento: 'Emprendimiento',
  Trabajo_en_equipo: 'Trabajo_en_equipo'
};

export type Pensum = (typeof Pensum)[keyof typeof Pensum]


export const Platform: {
  zoom: 'zoom',
  google_meet: 'google_meet',
  otra: 'otra',
  padlet: 'padlet',
  oficinas_de_avaa: 'oficinas_de_avaa',
  teams: 'teams',
  discord: 'discord',
  jitsi: 'jitsi'
};

export type Platform = (typeof Platform)[keyof typeof Platform]


export const Region: {
  Zulia: 'Zulia',
  Caracas: 'Caracas',
  Carabobo: 'Carabobo'
};

export type Region = (typeof Region)[keyof typeof Region]


export const Role: {
  ADMIN: 'ADMIN',
  COMITEE: 'COMITEE',
  PROYECTS: 'PROYECTS',
  CHAT: 'CHAT',
  SCHOLAR: 'SCHOLAR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ScholarCanAssist: {
  Yes: 'Yes',
  No: 'No'
};

export type ScholarCanAssist = (typeof ScholarCanAssist)[keyof typeof ScholarCanAssist]


export const ScholarStatus: {
  Probatorio1: 'Probatorio1',
  Probatorio2: 'Probatorio2',
  Normal: 'Normal'
};

export type ScholarStatus = (typeof ScholarStatus)[keyof typeof ScholarStatus]


export const activityStatus: {
  AGENDADO: 'AGENDADO',
  EN_PROCESO: 'EN_PROCESO',
  REALIZADO: 'REALIZADO',
  SUSPENDIDO: 'SUSPENDIDO',
  CANCELADO: 'CANCELADO'
};

export type activityStatus = (typeof activityStatus)[keyof typeof activityStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more WorkshopDates
 * const workshopDates = await prisma.workshopDates.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more WorkshopDates
   * const workshopDates = await prisma.workshopDates.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.workshopDates`: Exposes CRUD operations for the **WorkshopDates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkshopDates
    * const workshopDates = await prisma.workshopDates.findMany()
    * ```
    */
  get workshopDates(): Prisma.WorkshopDatesDelegate<GlobalReject>;

  /**
   * `prisma.chatDates`: Exposes CRUD operations for the **ChatDates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatDates
    * const chatDates = await prisma.chatDates.findMany()
    * ```
    */
  get chatDates(): Prisma.ChatDatesDelegate<GlobalReject>;

  /**
   * `prisma.workshopTempData`: Exposes CRUD operations for the **WorkshopTempData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkshopTempData
    * const workshopTempData = await prisma.workshopTempData.findMany()
    * ```
    */
  get workshopTempData(): Prisma.WorkshopTempDataDelegate<GlobalReject>;

  /**
   * `prisma.chatsTempData`: Exposes CRUD operations for the **ChatsTempData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatsTempData
    * const chatsTempData = await prisma.chatsTempData.findMany()
    * ```
    */
  get chatsTempData(): Prisma.ChatsTempDataDelegate<GlobalReject>;

  /**
   * `prisma.workshop`: Exposes CRUD operations for the **Workshop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workshops
    * const workshops = await prisma.workshop.findMany()
    * ```
    */
  get workshop(): Prisma.WorkshopDelegate<GlobalReject>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject>;

  /**
   * `prisma.scholar`: Exposes CRUD operations for the **Scholar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scholars
    * const scholars = await prisma.scholar.findMany()
    * ```
    */
  get scholar(): Prisma.ScholarDelegate<GlobalReject>;

  /**
   * `prisma.workshopSpeakers`: Exposes CRUD operations for the **WorkshopSpeakers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkshopSpeakers
    * const workshopSpeakers = await prisma.workshopSpeakers.findMany()
    * ```
    */
  get workshopSpeakers(): Prisma.WorkshopSpeakersDelegate<GlobalReject>;

  /**
   * `prisma.chatSpeakers`: Exposes CRUD operations for the **ChatSpeakers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSpeakers
    * const chatSpeakers = await prisma.chatSpeakers.findMany()
    * ```
    */
  get chatSpeakers(): Prisma.ChatSpeakersDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    WorkshopDates: 'WorkshopDates',
    ChatDates: 'ChatDates',
    WorkshopTempData: 'WorkshopTempData',
    ChatsTempData: 'ChatsTempData',
    Workshop: 'Workshop',
    Chat: 'Chat',
    Scholar: 'Scholar',
    WorkshopSpeakers: 'WorkshopSpeakers',
    ChatSpeakers: 'ChatSpeakers',
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WorkshopCountOutputType
   */


  export type WorkshopCountOutputType = {
    dates: number
    speaker: number
  }

  export type WorkshopCountOutputTypeSelect = {
    dates?: boolean
    speaker?: boolean
  }

  export type WorkshopCountOutputTypeGetPayload<S extends boolean | null | undefined | WorkshopCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WorkshopCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopCountOutputTypeArgs)
    ? WorkshopCountOutputType 
    : S extends { select: any } & (WorkshopCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WorkshopCountOutputType ? WorkshopCountOutputType[P] : never
  } 
      : WorkshopCountOutputType




  // Custom InputTypes

  /**
   * WorkshopCountOutputType without action
   */
  export type WorkshopCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WorkshopCountOutputType
     */
    select?: WorkshopCountOutputTypeSelect | null
  }



  /**
   * Count Type ChatCountOutputType
   */


  export type ChatCountOutputType = {
    dates: number
    speaker: number
  }

  export type ChatCountOutputTypeSelect = {
    dates?: boolean
    speaker?: boolean
  }

  export type ChatCountOutputTypeGetPayload<S extends boolean | null | undefined | ChatCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChatCountOutputTypeArgs)
    ? ChatCountOutputType 
    : S extends { select: any } & (ChatCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChatCountOutputType ? ChatCountOutputType[P] : never
  } 
      : ChatCountOutputType




  // Custom InputTypes

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect | null
  }



  /**
   * Count Type WorkshopSpeakersCountOutputType
   */


  export type WorkshopSpeakersCountOutputType = {
    workshops: number
  }

  export type WorkshopSpeakersCountOutputTypeSelect = {
    workshops?: boolean
  }

  export type WorkshopSpeakersCountOutputTypeGetPayload<S extends boolean | null | undefined | WorkshopSpeakersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WorkshopSpeakersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopSpeakersCountOutputTypeArgs)
    ? WorkshopSpeakersCountOutputType 
    : S extends { select: any } & (WorkshopSpeakersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WorkshopSpeakersCountOutputType ? WorkshopSpeakersCountOutputType[P] : never
  } 
      : WorkshopSpeakersCountOutputType




  // Custom InputTypes

  /**
   * WorkshopSpeakersCountOutputType without action
   */
  export type WorkshopSpeakersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakersCountOutputType
     */
    select?: WorkshopSpeakersCountOutputTypeSelect | null
  }



  /**
   * Count Type ChatSpeakersCountOutputType
   */


  export type ChatSpeakersCountOutputType = {
    chats: number
  }

  export type ChatSpeakersCountOutputTypeSelect = {
    chats?: boolean
  }

  export type ChatSpeakersCountOutputTypeGetPayload<S extends boolean | null | undefined | ChatSpeakersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatSpeakersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChatSpeakersCountOutputTypeArgs)
    ? ChatSpeakersCountOutputType 
    : S extends { select: any } & (ChatSpeakersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChatSpeakersCountOutputType ? ChatSpeakersCountOutputType[P] : never
  } 
      : ChatSpeakersCountOutputType




  // Custom InputTypes

  /**
   * ChatSpeakersCountOutputType without action
   */
  export type ChatSpeakersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakersCountOutputType
     */
    select?: ChatSpeakersCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    accounts: number
    sessions: number
  }

  export type UserCountOutputTypeSelect = {
    accounts?: boolean
    sessions?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model WorkshopDates
   */


  export type AggregateWorkshopDates = {
    _count: WorkshopDatesCountAggregateOutputType | null
    _min: WorkshopDatesMinAggregateOutputType | null
    _max: WorkshopDatesMaxAggregateOutputType | null
  }

  export type WorkshopDatesMinAggregateOutputType = {
    id: string | null
    date: Date | null
    start_time: Date | null
    end_time: Date | null
    workshopId: string | null
  }

  export type WorkshopDatesMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    start_time: Date | null
    end_time: Date | null
    workshopId: string | null
  }

  export type WorkshopDatesCountAggregateOutputType = {
    id: number
    date: number
    start_time: number
    end_time: number
    workshopId: number
    _all: number
  }


  export type WorkshopDatesMinAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    workshopId?: true
  }

  export type WorkshopDatesMaxAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    workshopId?: true
  }

  export type WorkshopDatesCountAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    workshopId?: true
    _all?: true
  }

  export type WorkshopDatesAggregateArgs = {
    /**
     * Filter which WorkshopDates to aggregate.
     */
    where?: WorkshopDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopDates to fetch.
     */
    orderBy?: Enumerable<WorkshopDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkshopDates
    **/
    _count?: true | WorkshopDatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopDatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopDatesMaxAggregateInputType
  }

  export type GetWorkshopDatesAggregateType<T extends WorkshopDatesAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshopDates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshopDates[P]>
      : GetScalarType<T[P], AggregateWorkshopDates[P]>
  }




  export type WorkshopDatesGroupByArgs = {
    where?: WorkshopDatesWhereInput
    orderBy?: Enumerable<WorkshopDatesOrderByWithAggregationInput>
    by: WorkshopDatesScalarFieldEnum[]
    having?: WorkshopDatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopDatesCountAggregateInputType | true
    _min?: WorkshopDatesMinAggregateInputType
    _max?: WorkshopDatesMaxAggregateInputType
  }


  export type WorkshopDatesGroupByOutputType = {
    id: string
    date: Date
    start_time: Date
    end_time: Date
    workshopId: string
    _count: WorkshopDatesCountAggregateOutputType | null
    _min: WorkshopDatesMinAggregateOutputType | null
    _max: WorkshopDatesMaxAggregateOutputType | null
  }

  type GetWorkshopDatesGroupByPayload<T extends WorkshopDatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WorkshopDatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopDatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopDatesGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopDatesGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopDatesSelect = {
    id?: boolean
    date?: boolean
    start_time?: boolean
    end_time?: boolean
    workshopId?: boolean
    workshop?: boolean | WorkshopArgs
  }


  export type WorkshopDatesInclude = {
    workshop?: boolean | WorkshopArgs
  }

  export type WorkshopDatesGetPayload<S extends boolean | null | undefined | WorkshopDatesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WorkshopDates :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopDatesArgs | WorkshopDatesFindManyArgs)
    ? WorkshopDates  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'workshop' ? WorkshopGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WorkshopDatesArgs | WorkshopDatesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'workshop' ? WorkshopGetPayload<S['select'][P]> :  P extends keyof WorkshopDates ? WorkshopDates[P] : never
  } 
      : WorkshopDates


  type WorkshopDatesCountArgs = 
    Omit<WorkshopDatesFindManyArgs, 'select' | 'include'> & {
      select?: WorkshopDatesCountAggregateInputType | true
    }

  export interface WorkshopDatesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WorkshopDates that matches the filter.
     * @param {WorkshopDatesFindUniqueArgs} args - Arguments to find a WorkshopDates
     * @example
     * // Get one WorkshopDates
     * const workshopDates = await prisma.workshopDates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkshopDatesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkshopDatesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkshopDates'> extends True ? Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>> : Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T> | null, null>

    /**
     * Find one WorkshopDates that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkshopDatesFindUniqueOrThrowArgs} args - Arguments to find a WorkshopDates
     * @example
     * // Get one WorkshopDates
     * const workshopDates = await prisma.workshopDates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkshopDatesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WorkshopDatesFindUniqueOrThrowArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Find the first WorkshopDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesFindFirstArgs} args - Arguments to find a WorkshopDates
     * @example
     * // Get one WorkshopDates
     * const workshopDates = await prisma.workshopDates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkshopDatesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkshopDatesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkshopDates'> extends True ? Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>> : Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T> | null, null>

    /**
     * Find the first WorkshopDates that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesFindFirstOrThrowArgs} args - Arguments to find a WorkshopDates
     * @example
     * // Get one WorkshopDates
     * const workshopDates = await prisma.workshopDates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkshopDatesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkshopDatesFindFirstOrThrowArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Find zero or more WorkshopDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkshopDates
     * const workshopDates = await prisma.workshopDates.findMany()
     * 
     * // Get first 10 WorkshopDates
     * const workshopDates = await prisma.workshopDates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopDatesWithIdOnly = await prisma.workshopDates.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkshopDatesFindManyArgs>(
      args?: SelectSubset<T, WorkshopDatesFindManyArgs>
    ): Prisma.PrismaPromise<Array<WorkshopDatesGetPayload<T>>>

    /**
     * Create a WorkshopDates.
     * @param {WorkshopDatesCreateArgs} args - Arguments to create a WorkshopDates.
     * @example
     * // Create one WorkshopDates
     * const WorkshopDates = await prisma.workshopDates.create({
     *   data: {
     *     // ... data to create a WorkshopDates
     *   }
     * })
     * 
    **/
    create<T extends WorkshopDatesCreateArgs>(
      args: SelectSubset<T, WorkshopDatesCreateArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Create many WorkshopDates.
     *     @param {WorkshopDatesCreateManyArgs} args - Arguments to create many WorkshopDates.
     *     @example
     *     // Create many WorkshopDates
     *     const workshopDates = await prisma.workshopDates.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkshopDatesCreateManyArgs>(
      args?: SelectSubset<T, WorkshopDatesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkshopDates.
     * @param {WorkshopDatesDeleteArgs} args - Arguments to delete one WorkshopDates.
     * @example
     * // Delete one WorkshopDates
     * const WorkshopDates = await prisma.workshopDates.delete({
     *   where: {
     *     // ... filter to delete one WorkshopDates
     *   }
     * })
     * 
    **/
    delete<T extends WorkshopDatesDeleteArgs>(
      args: SelectSubset<T, WorkshopDatesDeleteArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Update one WorkshopDates.
     * @param {WorkshopDatesUpdateArgs} args - Arguments to update one WorkshopDates.
     * @example
     * // Update one WorkshopDates
     * const workshopDates = await prisma.workshopDates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkshopDatesUpdateArgs>(
      args: SelectSubset<T, WorkshopDatesUpdateArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Delete zero or more WorkshopDates.
     * @param {WorkshopDatesDeleteManyArgs} args - Arguments to filter WorkshopDates to delete.
     * @example
     * // Delete a few WorkshopDates
     * const { count } = await prisma.workshopDates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkshopDatesDeleteManyArgs>(
      args?: SelectSubset<T, WorkshopDatesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkshopDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkshopDates
     * const workshopDates = await prisma.workshopDates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkshopDatesUpdateManyArgs>(
      args: SelectSubset<T, WorkshopDatesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkshopDates.
     * @param {WorkshopDatesUpsertArgs} args - Arguments to update or create a WorkshopDates.
     * @example
     * // Update or create a WorkshopDates
     * const workshopDates = await prisma.workshopDates.upsert({
     *   create: {
     *     // ... data to create a WorkshopDates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkshopDates we want to update
     *   }
     * })
    **/
    upsert<T extends WorkshopDatesUpsertArgs>(
      args: SelectSubset<T, WorkshopDatesUpsertArgs>
    ): Prisma__WorkshopDatesClient<WorkshopDatesGetPayload<T>>

    /**
     * Count the number of WorkshopDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesCountArgs} args - Arguments to filter WorkshopDates to count.
     * @example
     * // Count the number of WorkshopDates
     * const count = await prisma.workshopDates.count({
     *   where: {
     *     // ... the filter for the WorkshopDates we want to count
     *   }
     * })
    **/
    count<T extends WorkshopDatesCountArgs>(
      args?: Subset<T, WorkshopDatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopDatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkshopDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopDatesAggregateArgs>(args: Subset<T, WorkshopDatesAggregateArgs>): Prisma.PrismaPromise<GetWorkshopDatesAggregateType<T>>

    /**
     * Group by WorkshopDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopDatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopDatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopDatesGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopDatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopDatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopDatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkshopDates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkshopDatesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    workshop<T extends WorkshopArgs= {}>(args?: Subset<T, WorkshopArgs>): Prisma__WorkshopClient<WorkshopGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WorkshopDates base type for findUnique actions
   */
  export type WorkshopDatesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter, which WorkshopDates to fetch.
     */
    where: WorkshopDatesWhereUniqueInput
  }

  /**
   * WorkshopDates findUnique
   */
  export interface WorkshopDatesFindUniqueArgs extends WorkshopDatesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopDates findUniqueOrThrow
   */
  export type WorkshopDatesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter, which WorkshopDates to fetch.
     */
    where: WorkshopDatesWhereUniqueInput
  }


  /**
   * WorkshopDates base type for findFirst actions
   */
  export type WorkshopDatesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter, which WorkshopDates to fetch.
     */
    where?: WorkshopDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopDates to fetch.
     */
    orderBy?: Enumerable<WorkshopDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopDates.
     */
    cursor?: WorkshopDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopDates.
     */
    distinct?: Enumerable<WorkshopDatesScalarFieldEnum>
  }

  /**
   * WorkshopDates findFirst
   */
  export interface WorkshopDatesFindFirstArgs extends WorkshopDatesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopDates findFirstOrThrow
   */
  export type WorkshopDatesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter, which WorkshopDates to fetch.
     */
    where?: WorkshopDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopDates to fetch.
     */
    orderBy?: Enumerable<WorkshopDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopDates.
     */
    cursor?: WorkshopDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopDates.
     */
    distinct?: Enumerable<WorkshopDatesScalarFieldEnum>
  }


  /**
   * WorkshopDates findMany
   */
  export type WorkshopDatesFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter, which WorkshopDates to fetch.
     */
    where?: WorkshopDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopDates to fetch.
     */
    orderBy?: Enumerable<WorkshopDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkshopDates.
     */
    cursor?: WorkshopDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopDates.
     */
    skip?: number
    distinct?: Enumerable<WorkshopDatesScalarFieldEnum>
  }


  /**
   * WorkshopDates create
   */
  export type WorkshopDatesCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * The data needed to create a WorkshopDates.
     */
    data: XOR<WorkshopDatesCreateInput, WorkshopDatesUncheckedCreateInput>
  }


  /**
   * WorkshopDates createMany
   */
  export type WorkshopDatesCreateManyArgs = {
    /**
     * The data used to create many WorkshopDates.
     */
    data: Enumerable<WorkshopDatesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkshopDates update
   */
  export type WorkshopDatesUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * The data needed to update a WorkshopDates.
     */
    data: XOR<WorkshopDatesUpdateInput, WorkshopDatesUncheckedUpdateInput>
    /**
     * Choose, which WorkshopDates to update.
     */
    where: WorkshopDatesWhereUniqueInput
  }


  /**
   * WorkshopDates updateMany
   */
  export type WorkshopDatesUpdateManyArgs = {
    /**
     * The data used to update WorkshopDates.
     */
    data: XOR<WorkshopDatesUpdateManyMutationInput, WorkshopDatesUncheckedUpdateManyInput>
    /**
     * Filter which WorkshopDates to update
     */
    where?: WorkshopDatesWhereInput
  }


  /**
   * WorkshopDates upsert
   */
  export type WorkshopDatesUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * The filter to search for the WorkshopDates to update in case it exists.
     */
    where: WorkshopDatesWhereUniqueInput
    /**
     * In case the WorkshopDates found by the `where` argument doesn't exist, create a new WorkshopDates with this data.
     */
    create: XOR<WorkshopDatesCreateInput, WorkshopDatesUncheckedCreateInput>
    /**
     * In case the WorkshopDates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopDatesUpdateInput, WorkshopDatesUncheckedUpdateInput>
  }


  /**
   * WorkshopDates delete
   */
  export type WorkshopDatesDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    /**
     * Filter which WorkshopDates to delete.
     */
    where: WorkshopDatesWhereUniqueInput
  }


  /**
   * WorkshopDates deleteMany
   */
  export type WorkshopDatesDeleteManyArgs = {
    /**
     * Filter which WorkshopDates to delete
     */
    where?: WorkshopDatesWhereInput
  }


  /**
   * WorkshopDates without action
   */
  export type WorkshopDatesArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
  }



  /**
   * Model ChatDates
   */


  export type AggregateChatDates = {
    _count: ChatDatesCountAggregateOutputType | null
    _min: ChatDatesMinAggregateOutputType | null
    _max: ChatDatesMaxAggregateOutputType | null
  }

  export type ChatDatesMinAggregateOutputType = {
    id: string | null
    date: Date | null
    start_time: Date | null
    end_time: Date | null
    chatId: string | null
  }

  export type ChatDatesMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    start_time: Date | null
    end_time: Date | null
    chatId: string | null
  }

  export type ChatDatesCountAggregateOutputType = {
    id: number
    date: number
    start_time: number
    end_time: number
    chatId: number
    _all: number
  }


  export type ChatDatesMinAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    chatId?: true
  }

  export type ChatDatesMaxAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    chatId?: true
  }

  export type ChatDatesCountAggregateInputType = {
    id?: true
    date?: true
    start_time?: true
    end_time?: true
    chatId?: true
    _all?: true
  }

  export type ChatDatesAggregateArgs = {
    /**
     * Filter which ChatDates to aggregate.
     */
    where?: ChatDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatDates to fetch.
     */
    orderBy?: Enumerable<ChatDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatDates
    **/
    _count?: true | ChatDatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatDatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatDatesMaxAggregateInputType
  }

  export type GetChatDatesAggregateType<T extends ChatDatesAggregateArgs> = {
        [P in keyof T & keyof AggregateChatDates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatDates[P]>
      : GetScalarType<T[P], AggregateChatDates[P]>
  }




  export type ChatDatesGroupByArgs = {
    where?: ChatDatesWhereInput
    orderBy?: Enumerable<ChatDatesOrderByWithAggregationInput>
    by: ChatDatesScalarFieldEnum[]
    having?: ChatDatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatDatesCountAggregateInputType | true
    _min?: ChatDatesMinAggregateInputType
    _max?: ChatDatesMaxAggregateInputType
  }


  export type ChatDatesGroupByOutputType = {
    id: string
    date: Date
    start_time: Date
    end_time: Date
    chatId: string
    _count: ChatDatesCountAggregateOutputType | null
    _min: ChatDatesMinAggregateOutputType | null
    _max: ChatDatesMaxAggregateOutputType | null
  }

  type GetChatDatesGroupByPayload<T extends ChatDatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatDatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatDatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatDatesGroupByOutputType[P]>
            : GetScalarType<T[P], ChatDatesGroupByOutputType[P]>
        }
      >
    >


  export type ChatDatesSelect = {
    id?: boolean
    date?: boolean
    start_time?: boolean
    end_time?: boolean
    chatId?: boolean
    chat?: boolean | ChatArgs
  }


  export type ChatDatesInclude = {
    chat?: boolean | ChatArgs
  }

  export type ChatDatesGetPayload<S extends boolean | null | undefined | ChatDatesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatDates :
    S extends undefined ? never :
    S extends { include: any } & (ChatDatesArgs | ChatDatesFindManyArgs)
    ? ChatDates  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chat' ? ChatGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatDatesArgs | ChatDatesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chat' ? ChatGetPayload<S['select'][P]> :  P extends keyof ChatDates ? ChatDates[P] : never
  } 
      : ChatDates


  type ChatDatesCountArgs = 
    Omit<ChatDatesFindManyArgs, 'select' | 'include'> & {
      select?: ChatDatesCountAggregateInputType | true
    }

  export interface ChatDatesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChatDates that matches the filter.
     * @param {ChatDatesFindUniqueArgs} args - Arguments to find a ChatDates
     * @example
     * // Get one ChatDates
     * const chatDates = await prisma.chatDates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatDatesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatDatesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatDates'> extends True ? Prisma__ChatDatesClient<ChatDatesGetPayload<T>> : Prisma__ChatDatesClient<ChatDatesGetPayload<T> | null, null>

    /**
     * Find one ChatDates that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatDatesFindUniqueOrThrowArgs} args - Arguments to find a ChatDates
     * @example
     * // Get one ChatDates
     * const chatDates = await prisma.chatDates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatDatesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatDatesFindUniqueOrThrowArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Find the first ChatDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesFindFirstArgs} args - Arguments to find a ChatDates
     * @example
     * // Get one ChatDates
     * const chatDates = await prisma.chatDates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatDatesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatDatesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatDates'> extends True ? Prisma__ChatDatesClient<ChatDatesGetPayload<T>> : Prisma__ChatDatesClient<ChatDatesGetPayload<T> | null, null>

    /**
     * Find the first ChatDates that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesFindFirstOrThrowArgs} args - Arguments to find a ChatDates
     * @example
     * // Get one ChatDates
     * const chatDates = await prisma.chatDates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatDatesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatDatesFindFirstOrThrowArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Find zero or more ChatDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatDates
     * const chatDates = await prisma.chatDates.findMany()
     * 
     * // Get first 10 ChatDates
     * const chatDates = await prisma.chatDates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatDatesWithIdOnly = await prisma.chatDates.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatDatesFindManyArgs>(
      args?: SelectSubset<T, ChatDatesFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatDatesGetPayload<T>>>

    /**
     * Create a ChatDates.
     * @param {ChatDatesCreateArgs} args - Arguments to create a ChatDates.
     * @example
     * // Create one ChatDates
     * const ChatDates = await prisma.chatDates.create({
     *   data: {
     *     // ... data to create a ChatDates
     *   }
     * })
     * 
    **/
    create<T extends ChatDatesCreateArgs>(
      args: SelectSubset<T, ChatDatesCreateArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Create many ChatDates.
     *     @param {ChatDatesCreateManyArgs} args - Arguments to create many ChatDates.
     *     @example
     *     // Create many ChatDates
     *     const chatDates = await prisma.chatDates.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatDatesCreateManyArgs>(
      args?: SelectSubset<T, ChatDatesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatDates.
     * @param {ChatDatesDeleteArgs} args - Arguments to delete one ChatDates.
     * @example
     * // Delete one ChatDates
     * const ChatDates = await prisma.chatDates.delete({
     *   where: {
     *     // ... filter to delete one ChatDates
     *   }
     * })
     * 
    **/
    delete<T extends ChatDatesDeleteArgs>(
      args: SelectSubset<T, ChatDatesDeleteArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Update one ChatDates.
     * @param {ChatDatesUpdateArgs} args - Arguments to update one ChatDates.
     * @example
     * // Update one ChatDates
     * const chatDates = await prisma.chatDates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatDatesUpdateArgs>(
      args: SelectSubset<T, ChatDatesUpdateArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Delete zero or more ChatDates.
     * @param {ChatDatesDeleteManyArgs} args - Arguments to filter ChatDates to delete.
     * @example
     * // Delete a few ChatDates
     * const { count } = await prisma.chatDates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDatesDeleteManyArgs>(
      args?: SelectSubset<T, ChatDatesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatDates
     * const chatDates = await prisma.chatDates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatDatesUpdateManyArgs>(
      args: SelectSubset<T, ChatDatesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatDates.
     * @param {ChatDatesUpsertArgs} args - Arguments to update or create a ChatDates.
     * @example
     * // Update or create a ChatDates
     * const chatDates = await prisma.chatDates.upsert({
     *   create: {
     *     // ... data to create a ChatDates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatDates we want to update
     *   }
     * })
    **/
    upsert<T extends ChatDatesUpsertArgs>(
      args: SelectSubset<T, ChatDatesUpsertArgs>
    ): Prisma__ChatDatesClient<ChatDatesGetPayload<T>>

    /**
     * Count the number of ChatDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesCountArgs} args - Arguments to filter ChatDates to count.
     * @example
     * // Count the number of ChatDates
     * const count = await prisma.chatDates.count({
     *   where: {
     *     // ... the filter for the ChatDates we want to count
     *   }
     * })
    **/
    count<T extends ChatDatesCountArgs>(
      args?: Subset<T, ChatDatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatDatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatDatesAggregateArgs>(args: Subset<T, ChatDatesAggregateArgs>): Prisma.PrismaPromise<GetChatDatesAggregateType<T>>

    /**
     * Group by ChatDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatDatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatDatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatDatesGroupByArgs['orderBy'] }
        : { orderBy?: ChatDatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatDatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatDatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatDates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatDatesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chat<T extends ChatArgs= {}>(args?: Subset<T, ChatArgs>): Prisma__ChatClient<ChatGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChatDates base type for findUnique actions
   */
  export type ChatDatesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter, which ChatDates to fetch.
     */
    where: ChatDatesWhereUniqueInput
  }

  /**
   * ChatDates findUnique
   */
  export interface ChatDatesFindUniqueArgs extends ChatDatesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatDates findUniqueOrThrow
   */
  export type ChatDatesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter, which ChatDates to fetch.
     */
    where: ChatDatesWhereUniqueInput
  }


  /**
   * ChatDates base type for findFirst actions
   */
  export type ChatDatesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter, which ChatDates to fetch.
     */
    where?: ChatDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatDates to fetch.
     */
    orderBy?: Enumerable<ChatDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatDates.
     */
    cursor?: ChatDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatDates.
     */
    distinct?: Enumerable<ChatDatesScalarFieldEnum>
  }

  /**
   * ChatDates findFirst
   */
  export interface ChatDatesFindFirstArgs extends ChatDatesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatDates findFirstOrThrow
   */
  export type ChatDatesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter, which ChatDates to fetch.
     */
    where?: ChatDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatDates to fetch.
     */
    orderBy?: Enumerable<ChatDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatDates.
     */
    cursor?: ChatDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatDates.
     */
    distinct?: Enumerable<ChatDatesScalarFieldEnum>
  }


  /**
   * ChatDates findMany
   */
  export type ChatDatesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter, which ChatDates to fetch.
     */
    where?: ChatDatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatDates to fetch.
     */
    orderBy?: Enumerable<ChatDatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatDates.
     */
    cursor?: ChatDatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatDates.
     */
    skip?: number
    distinct?: Enumerable<ChatDatesScalarFieldEnum>
  }


  /**
   * ChatDates create
   */
  export type ChatDatesCreateArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * The data needed to create a ChatDates.
     */
    data: XOR<ChatDatesCreateInput, ChatDatesUncheckedCreateInput>
  }


  /**
   * ChatDates createMany
   */
  export type ChatDatesCreateManyArgs = {
    /**
     * The data used to create many ChatDates.
     */
    data: Enumerable<ChatDatesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatDates update
   */
  export type ChatDatesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * The data needed to update a ChatDates.
     */
    data: XOR<ChatDatesUpdateInput, ChatDatesUncheckedUpdateInput>
    /**
     * Choose, which ChatDates to update.
     */
    where: ChatDatesWhereUniqueInput
  }


  /**
   * ChatDates updateMany
   */
  export type ChatDatesUpdateManyArgs = {
    /**
     * The data used to update ChatDates.
     */
    data: XOR<ChatDatesUpdateManyMutationInput, ChatDatesUncheckedUpdateManyInput>
    /**
     * Filter which ChatDates to update
     */
    where?: ChatDatesWhereInput
  }


  /**
   * ChatDates upsert
   */
  export type ChatDatesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * The filter to search for the ChatDates to update in case it exists.
     */
    where: ChatDatesWhereUniqueInput
    /**
     * In case the ChatDates found by the `where` argument doesn't exist, create a new ChatDates with this data.
     */
    create: XOR<ChatDatesCreateInput, ChatDatesUncheckedCreateInput>
    /**
     * In case the ChatDates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatDatesUpdateInput, ChatDatesUncheckedUpdateInput>
  }


  /**
   * ChatDates delete
   */
  export type ChatDatesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    /**
     * Filter which ChatDates to delete.
     */
    where: ChatDatesWhereUniqueInput
  }


  /**
   * ChatDates deleteMany
   */
  export type ChatDatesDeleteManyArgs = {
    /**
     * Filter which ChatDates to delete
     */
    where?: ChatDatesWhereInput
  }


  /**
   * ChatDates without action
   */
  export type ChatDatesArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
  }



  /**
   * Model WorkshopTempData
   */


  export type AggregateWorkshopTempData = {
    _count: WorkshopTempDataCountAggregateOutputType | null
    _min: WorkshopTempDataMinAggregateOutputType | null
    _max: WorkshopTempDataMaxAggregateOutputType | null
  }

  export type WorkshopTempDataMinAggregateOutputType = {
    id: string | null
    workshopId: string | null
    formLink: string | null
    meetingLink: string | null
    meetingId: string | null
    meetingPassword: string | null
    calendarID: string | null
  }

  export type WorkshopTempDataMaxAggregateOutputType = {
    id: string | null
    workshopId: string | null
    formLink: string | null
    meetingLink: string | null
    meetingId: string | null
    meetingPassword: string | null
    calendarID: string | null
  }

  export type WorkshopTempDataCountAggregateOutputType = {
    id: number
    workshopId: number
    formLink: number
    meetingLink: number
    meetingId: number
    meetingPassword: number
    calendarID: number
    _all: number
  }


  export type WorkshopTempDataMinAggregateInputType = {
    id?: true
    workshopId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
  }

  export type WorkshopTempDataMaxAggregateInputType = {
    id?: true
    workshopId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
  }

  export type WorkshopTempDataCountAggregateInputType = {
    id?: true
    workshopId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
    _all?: true
  }

  export type WorkshopTempDataAggregateArgs = {
    /**
     * Filter which WorkshopTempData to aggregate.
     */
    where?: WorkshopTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopTempData to fetch.
     */
    orderBy?: Enumerable<WorkshopTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkshopTempData
    **/
    _count?: true | WorkshopTempDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopTempDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopTempDataMaxAggregateInputType
  }

  export type GetWorkshopTempDataAggregateType<T extends WorkshopTempDataAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshopTempData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshopTempData[P]>
      : GetScalarType<T[P], AggregateWorkshopTempData[P]>
  }




  export type WorkshopTempDataGroupByArgs = {
    where?: WorkshopTempDataWhereInput
    orderBy?: Enumerable<WorkshopTempDataOrderByWithAggregationInput>
    by: WorkshopTempDataScalarFieldEnum[]
    having?: WorkshopTempDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopTempDataCountAggregateInputType | true
    _min?: WorkshopTempDataMinAggregateInputType
    _max?: WorkshopTempDataMaxAggregateInputType
  }


  export type WorkshopTempDataGroupByOutputType = {
    id: string
    workshopId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
    _count: WorkshopTempDataCountAggregateOutputType | null
    _min: WorkshopTempDataMinAggregateOutputType | null
    _max: WorkshopTempDataMaxAggregateOutputType | null
  }

  type GetWorkshopTempDataGroupByPayload<T extends WorkshopTempDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WorkshopTempDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopTempDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopTempDataGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopTempDataGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopTempDataSelect = {
    id?: boolean
    workshopId?: boolean
    formLink?: boolean
    meetingLink?: boolean
    meetingId?: boolean
    meetingPassword?: boolean
    calendarID?: boolean
    workshop?: boolean | WorkshopArgs
  }


  export type WorkshopTempDataInclude = {
    workshop?: boolean | WorkshopArgs
  }

  export type WorkshopTempDataGetPayload<S extends boolean | null | undefined | WorkshopTempDataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WorkshopTempData :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopTempDataArgs | WorkshopTempDataFindManyArgs)
    ? WorkshopTempData  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'workshop' ? WorkshopGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WorkshopTempDataArgs | WorkshopTempDataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'workshop' ? WorkshopGetPayload<S['select'][P]> :  P extends keyof WorkshopTempData ? WorkshopTempData[P] : never
  } 
      : WorkshopTempData


  type WorkshopTempDataCountArgs = 
    Omit<WorkshopTempDataFindManyArgs, 'select' | 'include'> & {
      select?: WorkshopTempDataCountAggregateInputType | true
    }

  export interface WorkshopTempDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WorkshopTempData that matches the filter.
     * @param {WorkshopTempDataFindUniqueArgs} args - Arguments to find a WorkshopTempData
     * @example
     * // Get one WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkshopTempDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkshopTempDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkshopTempData'> extends True ? Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>> : Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T> | null, null>

    /**
     * Find one WorkshopTempData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkshopTempDataFindUniqueOrThrowArgs} args - Arguments to find a WorkshopTempData
     * @example
     * // Get one WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkshopTempDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WorkshopTempDataFindUniqueOrThrowArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Find the first WorkshopTempData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataFindFirstArgs} args - Arguments to find a WorkshopTempData
     * @example
     * // Get one WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkshopTempDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkshopTempDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkshopTempData'> extends True ? Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>> : Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T> | null, null>

    /**
     * Find the first WorkshopTempData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataFindFirstOrThrowArgs} args - Arguments to find a WorkshopTempData
     * @example
     * // Get one WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkshopTempDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkshopTempDataFindFirstOrThrowArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Find zero or more WorkshopTempData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findMany()
     * 
     * // Get first 10 WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopTempDataWithIdOnly = await prisma.workshopTempData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkshopTempDataFindManyArgs>(
      args?: SelectSubset<T, WorkshopTempDataFindManyArgs>
    ): Prisma.PrismaPromise<Array<WorkshopTempDataGetPayload<T>>>

    /**
     * Create a WorkshopTempData.
     * @param {WorkshopTempDataCreateArgs} args - Arguments to create a WorkshopTempData.
     * @example
     * // Create one WorkshopTempData
     * const WorkshopTempData = await prisma.workshopTempData.create({
     *   data: {
     *     // ... data to create a WorkshopTempData
     *   }
     * })
     * 
    **/
    create<T extends WorkshopTempDataCreateArgs>(
      args: SelectSubset<T, WorkshopTempDataCreateArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Create many WorkshopTempData.
     *     @param {WorkshopTempDataCreateManyArgs} args - Arguments to create many WorkshopTempData.
     *     @example
     *     // Create many WorkshopTempData
     *     const workshopTempData = await prisma.workshopTempData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkshopTempDataCreateManyArgs>(
      args?: SelectSubset<T, WorkshopTempDataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkshopTempData.
     * @param {WorkshopTempDataDeleteArgs} args - Arguments to delete one WorkshopTempData.
     * @example
     * // Delete one WorkshopTempData
     * const WorkshopTempData = await prisma.workshopTempData.delete({
     *   where: {
     *     // ... filter to delete one WorkshopTempData
     *   }
     * })
     * 
    **/
    delete<T extends WorkshopTempDataDeleteArgs>(
      args: SelectSubset<T, WorkshopTempDataDeleteArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Update one WorkshopTempData.
     * @param {WorkshopTempDataUpdateArgs} args - Arguments to update one WorkshopTempData.
     * @example
     * // Update one WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkshopTempDataUpdateArgs>(
      args: SelectSubset<T, WorkshopTempDataUpdateArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Delete zero or more WorkshopTempData.
     * @param {WorkshopTempDataDeleteManyArgs} args - Arguments to filter WorkshopTempData to delete.
     * @example
     * // Delete a few WorkshopTempData
     * const { count } = await prisma.workshopTempData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkshopTempDataDeleteManyArgs>(
      args?: SelectSubset<T, WorkshopTempDataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkshopTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkshopTempDataUpdateManyArgs>(
      args: SelectSubset<T, WorkshopTempDataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkshopTempData.
     * @param {WorkshopTempDataUpsertArgs} args - Arguments to update or create a WorkshopTempData.
     * @example
     * // Update or create a WorkshopTempData
     * const workshopTempData = await prisma.workshopTempData.upsert({
     *   create: {
     *     // ... data to create a WorkshopTempData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkshopTempData we want to update
     *   }
     * })
    **/
    upsert<T extends WorkshopTempDataUpsertArgs>(
      args: SelectSubset<T, WorkshopTempDataUpsertArgs>
    ): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T>>

    /**
     * Count the number of WorkshopTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataCountArgs} args - Arguments to filter WorkshopTempData to count.
     * @example
     * // Count the number of WorkshopTempData
     * const count = await prisma.workshopTempData.count({
     *   where: {
     *     // ... the filter for the WorkshopTempData we want to count
     *   }
     * })
    **/
    count<T extends WorkshopTempDataCountArgs>(
      args?: Subset<T, WorkshopTempDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopTempDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkshopTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopTempDataAggregateArgs>(args: Subset<T, WorkshopTempDataAggregateArgs>): Prisma.PrismaPromise<GetWorkshopTempDataAggregateType<T>>

    /**
     * Group by WorkshopTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopTempDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopTempDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopTempDataGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopTempDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopTempDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopTempDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkshopTempData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkshopTempDataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    workshop<T extends WorkshopArgs= {}>(args?: Subset<T, WorkshopArgs>): Prisma__WorkshopClient<WorkshopGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WorkshopTempData base type for findUnique actions
   */
  export type WorkshopTempDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter, which WorkshopTempData to fetch.
     */
    where: WorkshopTempDataWhereUniqueInput
  }

  /**
   * WorkshopTempData findUnique
   */
  export interface WorkshopTempDataFindUniqueArgs extends WorkshopTempDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopTempData findUniqueOrThrow
   */
  export type WorkshopTempDataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter, which WorkshopTempData to fetch.
     */
    where: WorkshopTempDataWhereUniqueInput
  }


  /**
   * WorkshopTempData base type for findFirst actions
   */
  export type WorkshopTempDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter, which WorkshopTempData to fetch.
     */
    where?: WorkshopTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopTempData to fetch.
     */
    orderBy?: Enumerable<WorkshopTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopTempData.
     */
    cursor?: WorkshopTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopTempData.
     */
    distinct?: Enumerable<WorkshopTempDataScalarFieldEnum>
  }

  /**
   * WorkshopTempData findFirst
   */
  export interface WorkshopTempDataFindFirstArgs extends WorkshopTempDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopTempData findFirstOrThrow
   */
  export type WorkshopTempDataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter, which WorkshopTempData to fetch.
     */
    where?: WorkshopTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopTempData to fetch.
     */
    orderBy?: Enumerable<WorkshopTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopTempData.
     */
    cursor?: WorkshopTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopTempData.
     */
    distinct?: Enumerable<WorkshopTempDataScalarFieldEnum>
  }


  /**
   * WorkshopTempData findMany
   */
  export type WorkshopTempDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter, which WorkshopTempData to fetch.
     */
    where?: WorkshopTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopTempData to fetch.
     */
    orderBy?: Enumerable<WorkshopTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkshopTempData.
     */
    cursor?: WorkshopTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopTempData.
     */
    skip?: number
    distinct?: Enumerable<WorkshopTempDataScalarFieldEnum>
  }


  /**
   * WorkshopTempData create
   */
  export type WorkshopTempDataCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * The data needed to create a WorkshopTempData.
     */
    data: XOR<WorkshopTempDataCreateInput, WorkshopTempDataUncheckedCreateInput>
  }


  /**
   * WorkshopTempData createMany
   */
  export type WorkshopTempDataCreateManyArgs = {
    /**
     * The data used to create many WorkshopTempData.
     */
    data: Enumerable<WorkshopTempDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkshopTempData update
   */
  export type WorkshopTempDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * The data needed to update a WorkshopTempData.
     */
    data: XOR<WorkshopTempDataUpdateInput, WorkshopTempDataUncheckedUpdateInput>
    /**
     * Choose, which WorkshopTempData to update.
     */
    where: WorkshopTempDataWhereUniqueInput
  }


  /**
   * WorkshopTempData updateMany
   */
  export type WorkshopTempDataUpdateManyArgs = {
    /**
     * The data used to update WorkshopTempData.
     */
    data: XOR<WorkshopTempDataUpdateManyMutationInput, WorkshopTempDataUncheckedUpdateManyInput>
    /**
     * Filter which WorkshopTempData to update
     */
    where?: WorkshopTempDataWhereInput
  }


  /**
   * WorkshopTempData upsert
   */
  export type WorkshopTempDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * The filter to search for the WorkshopTempData to update in case it exists.
     */
    where: WorkshopTempDataWhereUniqueInput
    /**
     * In case the WorkshopTempData found by the `where` argument doesn't exist, create a new WorkshopTempData with this data.
     */
    create: XOR<WorkshopTempDataCreateInput, WorkshopTempDataUncheckedCreateInput>
    /**
     * In case the WorkshopTempData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopTempDataUpdateInput, WorkshopTempDataUncheckedUpdateInput>
  }


  /**
   * WorkshopTempData delete
   */
  export type WorkshopTempDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
    /**
     * Filter which WorkshopTempData to delete.
     */
    where: WorkshopTempDataWhereUniqueInput
  }


  /**
   * WorkshopTempData deleteMany
   */
  export type WorkshopTempDataDeleteManyArgs = {
    /**
     * Filter which WorkshopTempData to delete
     */
    where?: WorkshopTempDataWhereInput
  }


  /**
   * WorkshopTempData without action
   */
  export type WorkshopTempDataArgs = {
    /**
     * Select specific fields to fetch from the WorkshopTempData
     */
    select?: WorkshopTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopTempDataInclude | null
  }



  /**
   * Model ChatsTempData
   */


  export type AggregateChatsTempData = {
    _count: ChatsTempDataCountAggregateOutputType | null
    _min: ChatsTempDataMinAggregateOutputType | null
    _max: ChatsTempDataMaxAggregateOutputType | null
  }

  export type ChatsTempDataMinAggregateOutputType = {
    id: string | null
    chatId: string | null
    formLink: string | null
    meetingLink: string | null
    meetingId: string | null
    meetingPassword: string | null
    calendarID: string | null
  }

  export type ChatsTempDataMaxAggregateOutputType = {
    id: string | null
    chatId: string | null
    formLink: string | null
    meetingLink: string | null
    meetingId: string | null
    meetingPassword: string | null
    calendarID: string | null
  }

  export type ChatsTempDataCountAggregateOutputType = {
    id: number
    chatId: number
    formLink: number
    meetingLink: number
    meetingId: number
    meetingPassword: number
    calendarID: number
    _all: number
  }


  export type ChatsTempDataMinAggregateInputType = {
    id?: true
    chatId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
  }

  export type ChatsTempDataMaxAggregateInputType = {
    id?: true
    chatId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
  }

  export type ChatsTempDataCountAggregateInputType = {
    id?: true
    chatId?: true
    formLink?: true
    meetingLink?: true
    meetingId?: true
    meetingPassword?: true
    calendarID?: true
    _all?: true
  }

  export type ChatsTempDataAggregateArgs = {
    /**
     * Filter which ChatsTempData to aggregate.
     */
    where?: ChatsTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsTempData to fetch.
     */
    orderBy?: Enumerable<ChatsTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatsTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatsTempData
    **/
    _count?: true | ChatsTempDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatsTempDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatsTempDataMaxAggregateInputType
  }

  export type GetChatsTempDataAggregateType<T extends ChatsTempDataAggregateArgs> = {
        [P in keyof T & keyof AggregateChatsTempData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatsTempData[P]>
      : GetScalarType<T[P], AggregateChatsTempData[P]>
  }




  export type ChatsTempDataGroupByArgs = {
    where?: ChatsTempDataWhereInput
    orderBy?: Enumerable<ChatsTempDataOrderByWithAggregationInput>
    by: ChatsTempDataScalarFieldEnum[]
    having?: ChatsTempDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatsTempDataCountAggregateInputType | true
    _min?: ChatsTempDataMinAggregateInputType
    _max?: ChatsTempDataMaxAggregateInputType
  }


  export type ChatsTempDataGroupByOutputType = {
    id: string
    chatId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
    _count: ChatsTempDataCountAggregateOutputType | null
    _min: ChatsTempDataMinAggregateOutputType | null
    _max: ChatsTempDataMaxAggregateOutputType | null
  }

  type GetChatsTempDataGroupByPayload<T extends ChatsTempDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatsTempDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatsTempDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatsTempDataGroupByOutputType[P]>
            : GetScalarType<T[P], ChatsTempDataGroupByOutputType[P]>
        }
      >
    >


  export type ChatsTempDataSelect = {
    id?: boolean
    chatId?: boolean
    formLink?: boolean
    meetingLink?: boolean
    meetingId?: boolean
    meetingPassword?: boolean
    calendarID?: boolean
    chat?: boolean | ChatArgs
  }


  export type ChatsTempDataInclude = {
    chat?: boolean | ChatArgs
  }

  export type ChatsTempDataGetPayload<S extends boolean | null | undefined | ChatsTempDataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatsTempData :
    S extends undefined ? never :
    S extends { include: any } & (ChatsTempDataArgs | ChatsTempDataFindManyArgs)
    ? ChatsTempData  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chat' ? ChatGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatsTempDataArgs | ChatsTempDataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chat' ? ChatGetPayload<S['select'][P]> :  P extends keyof ChatsTempData ? ChatsTempData[P] : never
  } 
      : ChatsTempData


  type ChatsTempDataCountArgs = 
    Omit<ChatsTempDataFindManyArgs, 'select' | 'include'> & {
      select?: ChatsTempDataCountAggregateInputType | true
    }

  export interface ChatsTempDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChatsTempData that matches the filter.
     * @param {ChatsTempDataFindUniqueArgs} args - Arguments to find a ChatsTempData
     * @example
     * // Get one ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatsTempDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatsTempDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatsTempData'> extends True ? Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>> : Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T> | null, null>

    /**
     * Find one ChatsTempData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatsTempDataFindUniqueOrThrowArgs} args - Arguments to find a ChatsTempData
     * @example
     * // Get one ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatsTempDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatsTempDataFindUniqueOrThrowArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Find the first ChatsTempData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataFindFirstArgs} args - Arguments to find a ChatsTempData
     * @example
     * // Get one ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatsTempDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatsTempDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatsTempData'> extends True ? Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>> : Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T> | null, null>

    /**
     * Find the first ChatsTempData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataFindFirstOrThrowArgs} args - Arguments to find a ChatsTempData
     * @example
     * // Get one ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatsTempDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatsTempDataFindFirstOrThrowArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Find zero or more ChatsTempData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findMany()
     * 
     * // Get first 10 ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatsTempDataWithIdOnly = await prisma.chatsTempData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatsTempDataFindManyArgs>(
      args?: SelectSubset<T, ChatsTempDataFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatsTempDataGetPayload<T>>>

    /**
     * Create a ChatsTempData.
     * @param {ChatsTempDataCreateArgs} args - Arguments to create a ChatsTempData.
     * @example
     * // Create one ChatsTempData
     * const ChatsTempData = await prisma.chatsTempData.create({
     *   data: {
     *     // ... data to create a ChatsTempData
     *   }
     * })
     * 
    **/
    create<T extends ChatsTempDataCreateArgs>(
      args: SelectSubset<T, ChatsTempDataCreateArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Create many ChatsTempData.
     *     @param {ChatsTempDataCreateManyArgs} args - Arguments to create many ChatsTempData.
     *     @example
     *     // Create many ChatsTempData
     *     const chatsTempData = await prisma.chatsTempData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatsTempDataCreateManyArgs>(
      args?: SelectSubset<T, ChatsTempDataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatsTempData.
     * @param {ChatsTempDataDeleteArgs} args - Arguments to delete one ChatsTempData.
     * @example
     * // Delete one ChatsTempData
     * const ChatsTempData = await prisma.chatsTempData.delete({
     *   where: {
     *     // ... filter to delete one ChatsTempData
     *   }
     * })
     * 
    **/
    delete<T extends ChatsTempDataDeleteArgs>(
      args: SelectSubset<T, ChatsTempDataDeleteArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Update one ChatsTempData.
     * @param {ChatsTempDataUpdateArgs} args - Arguments to update one ChatsTempData.
     * @example
     * // Update one ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatsTempDataUpdateArgs>(
      args: SelectSubset<T, ChatsTempDataUpdateArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Delete zero or more ChatsTempData.
     * @param {ChatsTempDataDeleteManyArgs} args - Arguments to filter ChatsTempData to delete.
     * @example
     * // Delete a few ChatsTempData
     * const { count } = await prisma.chatsTempData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatsTempDataDeleteManyArgs>(
      args?: SelectSubset<T, ChatsTempDataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatsTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatsTempDataUpdateManyArgs>(
      args: SelectSubset<T, ChatsTempDataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatsTempData.
     * @param {ChatsTempDataUpsertArgs} args - Arguments to update or create a ChatsTempData.
     * @example
     * // Update or create a ChatsTempData
     * const chatsTempData = await prisma.chatsTempData.upsert({
     *   create: {
     *     // ... data to create a ChatsTempData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatsTempData we want to update
     *   }
     * })
    **/
    upsert<T extends ChatsTempDataUpsertArgs>(
      args: SelectSubset<T, ChatsTempDataUpsertArgs>
    ): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T>>

    /**
     * Count the number of ChatsTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataCountArgs} args - Arguments to filter ChatsTempData to count.
     * @example
     * // Count the number of ChatsTempData
     * const count = await prisma.chatsTempData.count({
     *   where: {
     *     // ... the filter for the ChatsTempData we want to count
     *   }
     * })
    **/
    count<T extends ChatsTempDataCountArgs>(
      args?: Subset<T, ChatsTempDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatsTempDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatsTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatsTempDataAggregateArgs>(args: Subset<T, ChatsTempDataAggregateArgs>): Prisma.PrismaPromise<GetChatsTempDataAggregateType<T>>

    /**
     * Group by ChatsTempData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatsTempDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatsTempDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatsTempDataGroupByArgs['orderBy'] }
        : { orderBy?: ChatsTempDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatsTempDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatsTempDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatsTempData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatsTempDataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chat<T extends ChatArgs= {}>(args?: Subset<T, ChatArgs>): Prisma__ChatClient<ChatGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChatsTempData base type for findUnique actions
   */
  export type ChatsTempDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter, which ChatsTempData to fetch.
     */
    where: ChatsTempDataWhereUniqueInput
  }

  /**
   * ChatsTempData findUnique
   */
  export interface ChatsTempDataFindUniqueArgs extends ChatsTempDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatsTempData findUniqueOrThrow
   */
  export type ChatsTempDataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter, which ChatsTempData to fetch.
     */
    where: ChatsTempDataWhereUniqueInput
  }


  /**
   * ChatsTempData base type for findFirst actions
   */
  export type ChatsTempDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter, which ChatsTempData to fetch.
     */
    where?: ChatsTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsTempData to fetch.
     */
    orderBy?: Enumerable<ChatsTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatsTempData.
     */
    cursor?: ChatsTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatsTempData.
     */
    distinct?: Enumerable<ChatsTempDataScalarFieldEnum>
  }

  /**
   * ChatsTempData findFirst
   */
  export interface ChatsTempDataFindFirstArgs extends ChatsTempDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatsTempData findFirstOrThrow
   */
  export type ChatsTempDataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter, which ChatsTempData to fetch.
     */
    where?: ChatsTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsTempData to fetch.
     */
    orderBy?: Enumerable<ChatsTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatsTempData.
     */
    cursor?: ChatsTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsTempData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatsTempData.
     */
    distinct?: Enumerable<ChatsTempDataScalarFieldEnum>
  }


  /**
   * ChatsTempData findMany
   */
  export type ChatsTempDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter, which ChatsTempData to fetch.
     */
    where?: ChatsTempDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatsTempData to fetch.
     */
    orderBy?: Enumerable<ChatsTempDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatsTempData.
     */
    cursor?: ChatsTempDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatsTempData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatsTempData.
     */
    skip?: number
    distinct?: Enumerable<ChatsTempDataScalarFieldEnum>
  }


  /**
   * ChatsTempData create
   */
  export type ChatsTempDataCreateArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * The data needed to create a ChatsTempData.
     */
    data: XOR<ChatsTempDataCreateInput, ChatsTempDataUncheckedCreateInput>
  }


  /**
   * ChatsTempData createMany
   */
  export type ChatsTempDataCreateManyArgs = {
    /**
     * The data used to create many ChatsTempData.
     */
    data: Enumerable<ChatsTempDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatsTempData update
   */
  export type ChatsTempDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * The data needed to update a ChatsTempData.
     */
    data: XOR<ChatsTempDataUpdateInput, ChatsTempDataUncheckedUpdateInput>
    /**
     * Choose, which ChatsTempData to update.
     */
    where: ChatsTempDataWhereUniqueInput
  }


  /**
   * ChatsTempData updateMany
   */
  export type ChatsTempDataUpdateManyArgs = {
    /**
     * The data used to update ChatsTempData.
     */
    data: XOR<ChatsTempDataUpdateManyMutationInput, ChatsTempDataUncheckedUpdateManyInput>
    /**
     * Filter which ChatsTempData to update
     */
    where?: ChatsTempDataWhereInput
  }


  /**
   * ChatsTempData upsert
   */
  export type ChatsTempDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * The filter to search for the ChatsTempData to update in case it exists.
     */
    where: ChatsTempDataWhereUniqueInput
    /**
     * In case the ChatsTempData found by the `where` argument doesn't exist, create a new ChatsTempData with this data.
     */
    create: XOR<ChatsTempDataCreateInput, ChatsTempDataUncheckedCreateInput>
    /**
     * In case the ChatsTempData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatsTempDataUpdateInput, ChatsTempDataUncheckedUpdateInput>
  }


  /**
   * ChatsTempData delete
   */
  export type ChatsTempDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
    /**
     * Filter which ChatsTempData to delete.
     */
    where: ChatsTempDataWhereUniqueInput
  }


  /**
   * ChatsTempData deleteMany
   */
  export type ChatsTempDataDeleteManyArgs = {
    /**
     * Filter which ChatsTempData to delete
     */
    where?: ChatsTempDataWhereInput
  }


  /**
   * ChatsTempData without action
   */
  export type ChatsTempDataArgs = {
    /**
     * Select specific fields to fetch from the ChatsTempData
     */
    select?: ChatsTempDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatsTempDataInclude | null
  }



  /**
   * Model Workshop
   */


  export type AggregateWorkshop = {
    _count: WorkshopCountAggregateOutputType | null
    _avg: WorkshopAvgAggregateOutputType | null
    _sum: WorkshopSumAggregateOutputType | null
    _min: WorkshopMinAggregateOutputType | null
    _max: WorkshopMaxAggregateOutputType | null
  }

  export type WorkshopAvgAggregateOutputType = {
    spots: number | null
    takenSpots: number | null
  }

  export type WorkshopSumAggregateOutputType = {
    spots: number | null
    takenSpots: number | null
  }

  export type WorkshopMinAggregateOutputType = {
    id: string | null
    title: string | null
    pensum: Pensum | null
    spots: number | null
    takenSpots: number | null
    modality: Modality | null
    platform: Platform | null
    description: string | null
    avaaYear: string | null
    activityStatus: activityStatus | null
  }

  export type WorkshopMaxAggregateOutputType = {
    id: string | null
    title: string | null
    pensum: Pensum | null
    spots: number | null
    takenSpots: number | null
    modality: Modality | null
    platform: Platform | null
    description: string | null
    avaaYear: string | null
    activityStatus: activityStatus | null
  }

  export type WorkshopCountAggregateOutputType = {
    id: number
    title: number
    pensum: number
    spots: number
    takenSpots: number
    modality: number
    platform: number
    description: number
    avaaYear: number
    activityStatus: number
    _all: number
  }


  export type WorkshopAvgAggregateInputType = {
    spots?: true
    takenSpots?: true
  }

  export type WorkshopSumAggregateInputType = {
    spots?: true
    takenSpots?: true
  }

  export type WorkshopMinAggregateInputType = {
    id?: true
    title?: true
    pensum?: true
    spots?: true
    takenSpots?: true
    modality?: true
    platform?: true
    description?: true
    avaaYear?: true
    activityStatus?: true
  }

  export type WorkshopMaxAggregateInputType = {
    id?: true
    title?: true
    pensum?: true
    spots?: true
    takenSpots?: true
    modality?: true
    platform?: true
    description?: true
    avaaYear?: true
    activityStatus?: true
  }

  export type WorkshopCountAggregateInputType = {
    id?: true
    title?: true
    pensum?: true
    spots?: true
    takenSpots?: true
    modality?: true
    platform?: true
    description?: true
    avaaYear?: true
    activityStatus?: true
    _all?: true
  }

  export type WorkshopAggregateArgs = {
    /**
     * Filter which Workshop to aggregate.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: Enumerable<WorkshopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workshops
    **/
    _count?: true | WorkshopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkshopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkshopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopMaxAggregateInputType
  }

  export type GetWorkshopAggregateType<T extends WorkshopAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshop[P]>
      : GetScalarType<T[P], AggregateWorkshop[P]>
  }




  export type WorkshopGroupByArgs = {
    where?: WorkshopWhereInput
    orderBy?: Enumerable<WorkshopOrderByWithAggregationInput>
    by: WorkshopScalarFieldEnum[]
    having?: WorkshopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopCountAggregateInputType | true
    _avg?: WorkshopAvgAggregateInputType
    _sum?: WorkshopSumAggregateInputType
    _min?: WorkshopMinAggregateInputType
    _max?: WorkshopMaxAggregateInputType
  }


  export type WorkshopGroupByOutputType = {
    id: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    _count: WorkshopCountAggregateOutputType | null
    _avg: WorkshopAvgAggregateOutputType | null
    _sum: WorkshopSumAggregateOutputType | null
    _min: WorkshopMinAggregateOutputType | null
    _max: WorkshopMaxAggregateOutputType | null
  }

  type GetWorkshopGroupByPayload<T extends WorkshopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WorkshopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopSelect = {
    id?: boolean
    title?: boolean
    pensum?: boolean
    spots?: boolean
    takenSpots?: boolean
    modality?: boolean
    platform?: boolean
    description?: boolean
    avaaYear?: boolean
    activityStatus?: boolean
    dates?: boolean | Workshop$datesArgs
    speaker?: boolean | Workshop$speakerArgs
    tempData?: boolean | WorkshopTempDataArgs
    _count?: boolean | WorkshopCountOutputTypeArgs
  }


  export type WorkshopInclude = {
    dates?: boolean | Workshop$datesArgs
    speaker?: boolean | Workshop$speakerArgs
    tempData?: boolean | WorkshopTempDataArgs
    _count?: boolean | WorkshopCountOutputTypeArgs
  }

  export type WorkshopGetPayload<S extends boolean | null | undefined | WorkshopArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Workshop :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopArgs | WorkshopFindManyArgs)
    ? Workshop  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dates' ? Array < WorkshopDatesGetPayload<S['include'][P]>>  :
        P extends 'speaker' ? Array < WorkshopSpeakersGetPayload<S['include'][P]>>  :
        P extends 'tempData' ? WorkshopTempDataGetPayload<S['include'][P]> | null :
        P extends '_count' ? WorkshopCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WorkshopArgs | WorkshopFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dates' ? Array < WorkshopDatesGetPayload<S['select'][P]>>  :
        P extends 'speaker' ? Array < WorkshopSpeakersGetPayload<S['select'][P]>>  :
        P extends 'tempData' ? WorkshopTempDataGetPayload<S['select'][P]> | null :
        P extends '_count' ? WorkshopCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Workshop ? Workshop[P] : never
  } 
      : Workshop


  type WorkshopCountArgs = 
    Omit<WorkshopFindManyArgs, 'select' | 'include'> & {
      select?: WorkshopCountAggregateInputType | true
    }

  export interface WorkshopDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Workshop that matches the filter.
     * @param {WorkshopFindUniqueArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkshopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkshopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Workshop'> extends True ? Prisma__WorkshopClient<WorkshopGetPayload<T>> : Prisma__WorkshopClient<WorkshopGetPayload<T> | null, null>

    /**
     * Find one Workshop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkshopFindUniqueOrThrowArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkshopFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WorkshopFindUniqueOrThrowArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Find the first Workshop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindFirstArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkshopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkshopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Workshop'> extends True ? Prisma__WorkshopClient<WorkshopGetPayload<T>> : Prisma__WorkshopClient<WorkshopGetPayload<T> | null, null>

    /**
     * Find the first Workshop that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindFirstOrThrowArgs} args - Arguments to find a Workshop
     * @example
     * // Get one Workshop
     * const workshop = await prisma.workshop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkshopFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkshopFindFirstOrThrowArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Find zero or more Workshops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workshops
     * const workshops = await prisma.workshop.findMany()
     * 
     * // Get first 10 Workshops
     * const workshops = await prisma.workshop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopWithIdOnly = await prisma.workshop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkshopFindManyArgs>(
      args?: SelectSubset<T, WorkshopFindManyArgs>
    ): Prisma.PrismaPromise<Array<WorkshopGetPayload<T>>>

    /**
     * Create a Workshop.
     * @param {WorkshopCreateArgs} args - Arguments to create a Workshop.
     * @example
     * // Create one Workshop
     * const Workshop = await prisma.workshop.create({
     *   data: {
     *     // ... data to create a Workshop
     *   }
     * })
     * 
    **/
    create<T extends WorkshopCreateArgs>(
      args: SelectSubset<T, WorkshopCreateArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Create many Workshops.
     *     @param {WorkshopCreateManyArgs} args - Arguments to create many Workshops.
     *     @example
     *     // Create many Workshops
     *     const workshop = await prisma.workshop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkshopCreateManyArgs>(
      args?: SelectSubset<T, WorkshopCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Workshop.
     * @param {WorkshopDeleteArgs} args - Arguments to delete one Workshop.
     * @example
     * // Delete one Workshop
     * const Workshop = await prisma.workshop.delete({
     *   where: {
     *     // ... filter to delete one Workshop
     *   }
     * })
     * 
    **/
    delete<T extends WorkshopDeleteArgs>(
      args: SelectSubset<T, WorkshopDeleteArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Update one Workshop.
     * @param {WorkshopUpdateArgs} args - Arguments to update one Workshop.
     * @example
     * // Update one Workshop
     * const workshop = await prisma.workshop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkshopUpdateArgs>(
      args: SelectSubset<T, WorkshopUpdateArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Delete zero or more Workshops.
     * @param {WorkshopDeleteManyArgs} args - Arguments to filter Workshops to delete.
     * @example
     * // Delete a few Workshops
     * const { count } = await prisma.workshop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkshopDeleteManyArgs>(
      args?: SelectSubset<T, WorkshopDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workshops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workshops
     * const workshop = await prisma.workshop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkshopUpdateManyArgs>(
      args: SelectSubset<T, WorkshopUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workshop.
     * @param {WorkshopUpsertArgs} args - Arguments to update or create a Workshop.
     * @example
     * // Update or create a Workshop
     * const workshop = await prisma.workshop.upsert({
     *   create: {
     *     // ... data to create a Workshop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workshop we want to update
     *   }
     * })
    **/
    upsert<T extends WorkshopUpsertArgs>(
      args: SelectSubset<T, WorkshopUpsertArgs>
    ): Prisma__WorkshopClient<WorkshopGetPayload<T>>

    /**
     * Count the number of Workshops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopCountArgs} args - Arguments to filter Workshops to count.
     * @example
     * // Count the number of Workshops
     * const count = await prisma.workshop.count({
     *   where: {
     *     // ... the filter for the Workshops we want to count
     *   }
     * })
    **/
    count<T extends WorkshopCountArgs>(
      args?: Subset<T, WorkshopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workshop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopAggregateArgs>(args: Subset<T, WorkshopAggregateArgs>): Prisma.PrismaPromise<GetWorkshopAggregateType<T>>

    /**
     * Group by Workshop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Workshop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkshopClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dates<T extends Workshop$datesArgs= {}>(args?: Subset<T, Workshop$datesArgs>): Prisma.PrismaPromise<Array<WorkshopDatesGetPayload<T>>| Null>;

    speaker<T extends Workshop$speakerArgs= {}>(args?: Subset<T, Workshop$speakerArgs>): Prisma.PrismaPromise<Array<WorkshopSpeakersGetPayload<T>>| Null>;

    tempData<T extends WorkshopTempDataArgs= {}>(args?: Subset<T, WorkshopTempDataArgs>): Prisma__WorkshopTempDataClient<WorkshopTempDataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Workshop base type for findUnique actions
   */
  export type WorkshopFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter, which Workshop to fetch.
     */
    where: WorkshopWhereUniqueInput
  }

  /**
   * Workshop findUnique
   */
  export interface WorkshopFindUniqueArgs extends WorkshopFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Workshop findUniqueOrThrow
   */
  export type WorkshopFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter, which Workshop to fetch.
     */
    where: WorkshopWhereUniqueInput
  }


  /**
   * Workshop base type for findFirst actions
   */
  export type WorkshopFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter, which Workshop to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: Enumerable<WorkshopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workshops.
     */
    distinct?: Enumerable<WorkshopScalarFieldEnum>
  }

  /**
   * Workshop findFirst
   */
  export interface WorkshopFindFirstArgs extends WorkshopFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Workshop findFirstOrThrow
   */
  export type WorkshopFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter, which Workshop to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: Enumerable<WorkshopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workshops.
     */
    distinct?: Enumerable<WorkshopScalarFieldEnum>
  }


  /**
   * Workshop findMany
   */
  export type WorkshopFindManyArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter, which Workshops to fetch.
     */
    where?: WorkshopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workshops to fetch.
     */
    orderBy?: Enumerable<WorkshopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workshops.
     */
    cursor?: WorkshopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workshops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workshops.
     */
    skip?: number
    distinct?: Enumerable<WorkshopScalarFieldEnum>
  }


  /**
   * Workshop create
   */
  export type WorkshopCreateArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * The data needed to create a Workshop.
     */
    data: XOR<WorkshopCreateInput, WorkshopUncheckedCreateInput>
  }


  /**
   * Workshop createMany
   */
  export type WorkshopCreateManyArgs = {
    /**
     * The data used to create many Workshops.
     */
    data: Enumerable<WorkshopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Workshop update
   */
  export type WorkshopUpdateArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * The data needed to update a Workshop.
     */
    data: XOR<WorkshopUpdateInput, WorkshopUncheckedUpdateInput>
    /**
     * Choose, which Workshop to update.
     */
    where: WorkshopWhereUniqueInput
  }


  /**
   * Workshop updateMany
   */
  export type WorkshopUpdateManyArgs = {
    /**
     * The data used to update Workshops.
     */
    data: XOR<WorkshopUpdateManyMutationInput, WorkshopUncheckedUpdateManyInput>
    /**
     * Filter which Workshops to update
     */
    where?: WorkshopWhereInput
  }


  /**
   * Workshop upsert
   */
  export type WorkshopUpsertArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * The filter to search for the Workshop to update in case it exists.
     */
    where: WorkshopWhereUniqueInput
    /**
     * In case the Workshop found by the `where` argument doesn't exist, create a new Workshop with this data.
     */
    create: XOR<WorkshopCreateInput, WorkshopUncheckedCreateInput>
    /**
     * In case the Workshop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopUpdateInput, WorkshopUncheckedUpdateInput>
  }


  /**
   * Workshop delete
   */
  export type WorkshopDeleteArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    /**
     * Filter which Workshop to delete.
     */
    where: WorkshopWhereUniqueInput
  }


  /**
   * Workshop deleteMany
   */
  export type WorkshopDeleteManyArgs = {
    /**
     * Filter which Workshops to delete
     */
    where?: WorkshopWhereInput
  }


  /**
   * Workshop.dates
   */
  export type Workshop$datesArgs = {
    /**
     * Select specific fields to fetch from the WorkshopDates
     */
    select?: WorkshopDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopDatesInclude | null
    where?: WorkshopDatesWhereInput
    orderBy?: Enumerable<WorkshopDatesOrderByWithRelationInput>
    cursor?: WorkshopDatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WorkshopDatesScalarFieldEnum>
  }


  /**
   * Workshop.speaker
   */
  export type Workshop$speakerArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    where?: WorkshopSpeakersWhereInput
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithRelationInput>
    cursor?: WorkshopSpeakersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WorkshopSpeakersScalarFieldEnum>
  }


  /**
   * Workshop without action
   */
  export type WorkshopArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
  }



  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    spots: number | null
    takenSpots: number | null
  }

  export type ChatSumAggregateOutputType = {
    spots: number | null
    takenSpots: number | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    title: string | null
    spots: number | null
    takenSpots: number | null
    platform: Platform | null
    modality: Modality | null
    activityStatus: activityStatus | null
    level: Level | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    title: string | null
    spots: number | null
    takenSpots: number | null
    platform: Platform | null
    modality: Modality | null
    activityStatus: activityStatus | null
    level: Level | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    title: number
    spots: number
    takenSpots: number
    platform: number
    modality: number
    activityStatus: number
    level: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    spots?: true
    takenSpots?: true
  }

  export type ChatSumAggregateInputType = {
    spots?: true
    takenSpots?: true
  }

  export type ChatMinAggregateInputType = {
    id?: true
    title?: true
    spots?: true
    takenSpots?: true
    platform?: true
    modality?: true
    activityStatus?: true
    level?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    title?: true
    spots?: true
    takenSpots?: true
    platform?: true
    modality?: true
    activityStatus?: true
    level?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    title?: true
    spots?: true
    takenSpots?: true
    platform?: true
    modality?: true
    activityStatus?: true
    level?: true
    _all?: true
  }

  export type ChatAggregateArgs = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    id: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect = {
    id?: boolean
    title?: boolean
    spots?: boolean
    takenSpots?: boolean
    platform?: boolean
    modality?: boolean
    activityStatus?: boolean
    level?: boolean
    dates?: boolean | Chat$datesArgs
    speaker?: boolean | Chat$speakerArgs
    tempData?: boolean | ChatsTempDataArgs
    _count?: boolean | ChatCountOutputTypeArgs
  }


  export type ChatInclude = {
    dates?: boolean | Chat$datesArgs
    speaker?: boolean | Chat$speakerArgs
    tempData?: boolean | ChatsTempDataArgs
    _count?: boolean | ChatCountOutputTypeArgs
  }

  export type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Chat :
    S extends undefined ? never :
    S extends { include: any } & (ChatArgs | ChatFindManyArgs)
    ? Chat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dates' ? Array < ChatDatesGetPayload<S['include'][P]>>  :
        P extends 'speaker' ? Array < ChatSpeakersGetPayload<S['include'][P]>>  :
        P extends 'tempData' ? ChatsTempDataGetPayload<S['include'][P]> | null :
        P extends '_count' ? ChatCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatArgs | ChatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dates' ? Array < ChatDatesGetPayload<S['select'][P]>>  :
        P extends 'speaker' ? Array < ChatSpeakersGetPayload<S['select'][P]>>  :
        P extends 'tempData' ? ChatsTempDataGetPayload<S['select'][P]> | null :
        P extends '_count' ? ChatCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Chat ? Chat[P] : never
  } 
      : Chat


  type ChatCountArgs = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs>(
      args?: SelectSubset<T, ChatFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatGetPayload<T>>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs>(
      args: SelectSubset<T, ChatCreateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs>(
      args?: SelectSubset<T, ChatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs>(
      args: SelectSubset<T, ChatDeleteArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs>(
      args: SelectSubset<T, ChatUpdateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs>(
      args?: SelectSubset<T, ChatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs>(
      args: SelectSubset<T, ChatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs>(
      args: SelectSubset<T, ChatUpsertArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dates<T extends Chat$datesArgs= {}>(args?: Subset<T, Chat$datesArgs>): Prisma.PrismaPromise<Array<ChatDatesGetPayload<T>>| Null>;

    speaker<T extends Chat$speakerArgs= {}>(args?: Subset<T, Chat$speakerArgs>): Prisma.PrismaPromise<Array<ChatSpeakersGetPayload<T>>| Null>;

    tempData<T extends ChatsTempDataArgs= {}>(args?: Subset<T, ChatsTempDataArgs>): Prisma__ChatsTempDataClient<ChatsTempDataGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs extends ChatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs extends ChatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat.dates
   */
  export type Chat$datesArgs = {
    /**
     * Select specific fields to fetch from the ChatDates
     */
    select?: ChatDatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatDatesInclude | null
    where?: ChatDatesWhereInput
    orderBy?: Enumerable<ChatDatesOrderByWithRelationInput>
    cursor?: ChatDatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatDatesScalarFieldEnum>
  }


  /**
   * Chat.speaker
   */
  export type Chat$speakerArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    where?: ChatSpeakersWhereInput
    orderBy?: Enumerable<ChatSpeakersOrderByWithRelationInput>
    cursor?: ChatSpeakersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatSpeakersScalarFieldEnum>
  }


  /**
   * Chat without action
   */
  export type ChatArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
  }



  /**
   * Model Scholar
   */


  export type AggregateScholar = {
    _count: ScholarCountAggregateOutputType | null
    _avg: ScholarAvgAggregateOutputType | null
    _sum: ScholarSumAggregateOutputType | null
    _min: ScholarMinAggregateOutputType | null
    _max: ScholarMaxAggregateOutputType | null
  }

  export type ScholarAvgAggregateOutputType = {
    academicYear: number | null
    avaaAdmissionYear: number | null
  }

  export type ScholarSumAggregateOutputType = {
    academicYear: number | null
    avaaAdmissionYear: number | null
  }

  export type ScholarMinAggregateOutputType = {
    id: string | null
    userId: string | null
    region: Region | null
    scholarStatus: ScholarStatus | null
    canAssistToChats: ScholarCanAssist | null
    canAssistToWorkshops: ScholarCanAssist | null
    canAssistToVolunteers: ScholarCanAssist | null
    firstName: string | null
    lastName: string | null
    dni: string | null
    gender: string | null
    birthDate: Date | null
    localPhoneNumber: string | null
    cellPhoneNumber: string | null
    whatsAppNumber: string | null
    stateOfOrigin: string | null
    currentZone: string | null
    housingType: string | null
    email: string | null
    collage: string | null
    carrer: string | null
    currentAcademicPeriod: string | null
    academicYear: number | null
    classModality: string | null
    cvaLocacion: string | null
    englishLevel: string | null
    notStartedCvareason: string | null
    avaaAdmissionYear: number | null
    volunteeringOrganizationName: string | null
    academicLoadCompleted: boolean | null
    currentStatus: string | null
    ceremonyDate: Date | null
    currentlyWorking: boolean | null
    organizationName: string | null
    positionHeld: string | null
  }

  export type ScholarMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    region: Region | null
    scholarStatus: ScholarStatus | null
    canAssistToChats: ScholarCanAssist | null
    canAssistToWorkshops: ScholarCanAssist | null
    canAssistToVolunteers: ScholarCanAssist | null
    firstName: string | null
    lastName: string | null
    dni: string | null
    gender: string | null
    birthDate: Date | null
    localPhoneNumber: string | null
    cellPhoneNumber: string | null
    whatsAppNumber: string | null
    stateOfOrigin: string | null
    currentZone: string | null
    housingType: string | null
    email: string | null
    collage: string | null
    carrer: string | null
    currentAcademicPeriod: string | null
    academicYear: number | null
    classModality: string | null
    cvaLocacion: string | null
    englishLevel: string | null
    notStartedCvareason: string | null
    avaaAdmissionYear: number | null
    volunteeringOrganizationName: string | null
    academicLoadCompleted: boolean | null
    currentStatus: string | null
    ceremonyDate: Date | null
    currentlyWorking: boolean | null
    organizationName: string | null
    positionHeld: string | null
  }

  export type ScholarCountAggregateOutputType = {
    id: number
    userId: number
    region: number
    scholarStatus: number
    canAssistToChats: number
    canAssistToWorkshops: number
    canAssistToVolunteers: number
    firstName: number
    lastName: number
    dni: number
    gender: number
    birthDate: number
    localPhoneNumber: number
    cellPhoneNumber: number
    whatsAppNumber: number
    stateOfOrigin: number
    currentZone: number
    housingType: number
    email: number
    collage: number
    carrer: number
    currentAcademicPeriod: number
    academicYear: number
    classModality: number
    cvaLocacion: number
    englishLevel: number
    notStartedCvareason: number
    avaaAdmissionYear: number
    volunteeringOrganizationName: number
    academicLoadCompleted: number
    currentStatus: number
    ceremonyDate: number
    currentlyWorking: number
    organizationName: number
    positionHeld: number
    _all: number
  }


  export type ScholarAvgAggregateInputType = {
    academicYear?: true
    avaaAdmissionYear?: true
  }

  export type ScholarSumAggregateInputType = {
    academicYear?: true
    avaaAdmissionYear?: true
  }

  export type ScholarMinAggregateInputType = {
    id?: true
    userId?: true
    region?: true
    scholarStatus?: true
    canAssistToChats?: true
    canAssistToWorkshops?: true
    canAssistToVolunteers?: true
    firstName?: true
    lastName?: true
    dni?: true
    gender?: true
    birthDate?: true
    localPhoneNumber?: true
    cellPhoneNumber?: true
    whatsAppNumber?: true
    stateOfOrigin?: true
    currentZone?: true
    housingType?: true
    email?: true
    collage?: true
    carrer?: true
    currentAcademicPeriod?: true
    academicYear?: true
    classModality?: true
    cvaLocacion?: true
    englishLevel?: true
    notStartedCvareason?: true
    avaaAdmissionYear?: true
    volunteeringOrganizationName?: true
    academicLoadCompleted?: true
    currentStatus?: true
    ceremonyDate?: true
    currentlyWorking?: true
    organizationName?: true
    positionHeld?: true
  }

  export type ScholarMaxAggregateInputType = {
    id?: true
    userId?: true
    region?: true
    scholarStatus?: true
    canAssistToChats?: true
    canAssistToWorkshops?: true
    canAssistToVolunteers?: true
    firstName?: true
    lastName?: true
    dni?: true
    gender?: true
    birthDate?: true
    localPhoneNumber?: true
    cellPhoneNumber?: true
    whatsAppNumber?: true
    stateOfOrigin?: true
    currentZone?: true
    housingType?: true
    email?: true
    collage?: true
    carrer?: true
    currentAcademicPeriod?: true
    academicYear?: true
    classModality?: true
    cvaLocacion?: true
    englishLevel?: true
    notStartedCvareason?: true
    avaaAdmissionYear?: true
    volunteeringOrganizationName?: true
    academicLoadCompleted?: true
    currentStatus?: true
    ceremonyDate?: true
    currentlyWorking?: true
    organizationName?: true
    positionHeld?: true
  }

  export type ScholarCountAggregateInputType = {
    id?: true
    userId?: true
    region?: true
    scholarStatus?: true
    canAssistToChats?: true
    canAssistToWorkshops?: true
    canAssistToVolunteers?: true
    firstName?: true
    lastName?: true
    dni?: true
    gender?: true
    birthDate?: true
    localPhoneNumber?: true
    cellPhoneNumber?: true
    whatsAppNumber?: true
    stateOfOrigin?: true
    currentZone?: true
    housingType?: true
    email?: true
    collage?: true
    carrer?: true
    currentAcademicPeriod?: true
    academicYear?: true
    classModality?: true
    cvaLocacion?: true
    englishLevel?: true
    notStartedCvareason?: true
    avaaAdmissionYear?: true
    volunteeringOrganizationName?: true
    academicLoadCompleted?: true
    currentStatus?: true
    ceremonyDate?: true
    currentlyWorking?: true
    organizationName?: true
    positionHeld?: true
    _all?: true
  }

  export type ScholarAggregateArgs = {
    /**
     * Filter which Scholar to aggregate.
     */
    where?: ScholarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scholars to fetch.
     */
    orderBy?: Enumerable<ScholarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScholarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scholars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scholars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scholars
    **/
    _count?: true | ScholarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScholarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScholarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScholarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScholarMaxAggregateInputType
  }

  export type GetScholarAggregateType<T extends ScholarAggregateArgs> = {
        [P in keyof T & keyof AggregateScholar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScholar[P]>
      : GetScalarType<T[P], AggregateScholar[P]>
  }




  export type ScholarGroupByArgs = {
    where?: ScholarWhereInput
    orderBy?: Enumerable<ScholarOrderByWithAggregationInput>
    by: ScholarScalarFieldEnum[]
    having?: ScholarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScholarCountAggregateInputType | true
    _avg?: ScholarAvgAggregateInputType
    _sum?: ScholarSumAggregateInputType
    _min?: ScholarMinAggregateInputType
    _max?: ScholarMaxAggregateInputType
  }


  export type ScholarGroupByOutputType = {
    id: string
    userId: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason: string | null
    avaaAdmissionYear: number | null
    volunteeringOrganizationName: string | null
    academicLoadCompleted: boolean | null
    currentStatus: string
    ceremonyDate: Date | null
    currentlyWorking: boolean | null
    organizationName: string | null
    positionHeld: string | null
    _count: ScholarCountAggregateOutputType | null
    _avg: ScholarAvgAggregateOutputType | null
    _sum: ScholarSumAggregateOutputType | null
    _min: ScholarMinAggregateOutputType | null
    _max: ScholarMaxAggregateOutputType | null
  }

  type GetScholarGroupByPayload<T extends ScholarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ScholarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScholarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScholarGroupByOutputType[P]>
            : GetScalarType<T[P], ScholarGroupByOutputType[P]>
        }
      >
    >


  export type ScholarSelect = {
    id?: boolean
    userId?: boolean
    region?: boolean
    scholarStatus?: boolean
    canAssistToChats?: boolean
    canAssistToWorkshops?: boolean
    canAssistToVolunteers?: boolean
    firstName?: boolean
    lastName?: boolean
    dni?: boolean
    gender?: boolean
    birthDate?: boolean
    localPhoneNumber?: boolean
    cellPhoneNumber?: boolean
    whatsAppNumber?: boolean
    stateOfOrigin?: boolean
    currentZone?: boolean
    housingType?: boolean
    email?: boolean
    collage?: boolean
    carrer?: boolean
    currentAcademicPeriod?: boolean
    academicYear?: boolean
    classModality?: boolean
    cvaLocacion?: boolean
    englishLevel?: boolean
    notStartedCvareason?: boolean
    avaaAdmissionYear?: boolean
    volunteeringOrganizationName?: boolean
    academicLoadCompleted?: boolean
    currentStatus?: boolean
    ceremonyDate?: boolean
    currentlyWorking?: boolean
    organizationName?: boolean
    positionHeld?: boolean
    user?: boolean | UserArgs
  }


  export type ScholarInclude = {
    user?: boolean | UserArgs
  }

  export type ScholarGetPayload<S extends boolean | null | undefined | ScholarArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Scholar :
    S extends undefined ? never :
    S extends { include: any } & (ScholarArgs | ScholarFindManyArgs)
    ? Scholar  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ScholarArgs | ScholarFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Scholar ? Scholar[P] : never
  } 
      : Scholar


  type ScholarCountArgs = 
    Omit<ScholarFindManyArgs, 'select' | 'include'> & {
      select?: ScholarCountAggregateInputType | true
    }

  export interface ScholarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Scholar that matches the filter.
     * @param {ScholarFindUniqueArgs} args - Arguments to find a Scholar
     * @example
     * // Get one Scholar
     * const scholar = await prisma.scholar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScholarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ScholarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Scholar'> extends True ? Prisma__ScholarClient<ScholarGetPayload<T>> : Prisma__ScholarClient<ScholarGetPayload<T> | null, null>

    /**
     * Find one Scholar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ScholarFindUniqueOrThrowArgs} args - Arguments to find a Scholar
     * @example
     * // Get one Scholar
     * const scholar = await prisma.scholar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ScholarFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ScholarFindUniqueOrThrowArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Find the first Scholar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarFindFirstArgs} args - Arguments to find a Scholar
     * @example
     * // Get one Scholar
     * const scholar = await prisma.scholar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScholarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ScholarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Scholar'> extends True ? Prisma__ScholarClient<ScholarGetPayload<T>> : Prisma__ScholarClient<ScholarGetPayload<T> | null, null>

    /**
     * Find the first Scholar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarFindFirstOrThrowArgs} args - Arguments to find a Scholar
     * @example
     * // Get one Scholar
     * const scholar = await prisma.scholar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ScholarFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ScholarFindFirstOrThrowArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Find zero or more Scholars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scholars
     * const scholars = await prisma.scholar.findMany()
     * 
     * // Get first 10 Scholars
     * const scholars = await prisma.scholar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scholarWithIdOnly = await prisma.scholar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScholarFindManyArgs>(
      args?: SelectSubset<T, ScholarFindManyArgs>
    ): Prisma.PrismaPromise<Array<ScholarGetPayload<T>>>

    /**
     * Create a Scholar.
     * @param {ScholarCreateArgs} args - Arguments to create a Scholar.
     * @example
     * // Create one Scholar
     * const Scholar = await prisma.scholar.create({
     *   data: {
     *     // ... data to create a Scholar
     *   }
     * })
     * 
    **/
    create<T extends ScholarCreateArgs>(
      args: SelectSubset<T, ScholarCreateArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Create many Scholars.
     *     @param {ScholarCreateManyArgs} args - Arguments to create many Scholars.
     *     @example
     *     // Create many Scholars
     *     const scholar = await prisma.scholar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScholarCreateManyArgs>(
      args?: SelectSubset<T, ScholarCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Scholar.
     * @param {ScholarDeleteArgs} args - Arguments to delete one Scholar.
     * @example
     * // Delete one Scholar
     * const Scholar = await prisma.scholar.delete({
     *   where: {
     *     // ... filter to delete one Scholar
     *   }
     * })
     * 
    **/
    delete<T extends ScholarDeleteArgs>(
      args: SelectSubset<T, ScholarDeleteArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Update one Scholar.
     * @param {ScholarUpdateArgs} args - Arguments to update one Scholar.
     * @example
     * // Update one Scholar
     * const scholar = await prisma.scholar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScholarUpdateArgs>(
      args: SelectSubset<T, ScholarUpdateArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Delete zero or more Scholars.
     * @param {ScholarDeleteManyArgs} args - Arguments to filter Scholars to delete.
     * @example
     * // Delete a few Scholars
     * const { count } = await prisma.scholar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScholarDeleteManyArgs>(
      args?: SelectSubset<T, ScholarDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scholars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scholars
     * const scholar = await prisma.scholar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScholarUpdateManyArgs>(
      args: SelectSubset<T, ScholarUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Scholar.
     * @param {ScholarUpsertArgs} args - Arguments to update or create a Scholar.
     * @example
     * // Update or create a Scholar
     * const scholar = await prisma.scholar.upsert({
     *   create: {
     *     // ... data to create a Scholar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scholar we want to update
     *   }
     * })
    **/
    upsert<T extends ScholarUpsertArgs>(
      args: SelectSubset<T, ScholarUpsertArgs>
    ): Prisma__ScholarClient<ScholarGetPayload<T>>

    /**
     * Count the number of Scholars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarCountArgs} args - Arguments to filter Scholars to count.
     * @example
     * // Count the number of Scholars
     * const count = await prisma.scholar.count({
     *   where: {
     *     // ... the filter for the Scholars we want to count
     *   }
     * })
    **/
    count<T extends ScholarCountArgs>(
      args?: Subset<T, ScholarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScholarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scholar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScholarAggregateArgs>(args: Subset<T, ScholarAggregateArgs>): Prisma.PrismaPromise<GetScholarAggregateType<T>>

    /**
     * Group by Scholar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScholarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScholarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScholarGroupByArgs['orderBy'] }
        : { orderBy?: ScholarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScholarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScholarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Scholar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ScholarClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Scholar base type for findUnique actions
   */
  export type ScholarFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter, which Scholar to fetch.
     */
    where: ScholarWhereUniqueInput
  }

  /**
   * Scholar findUnique
   */
  export interface ScholarFindUniqueArgs extends ScholarFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Scholar findUniqueOrThrow
   */
  export type ScholarFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter, which Scholar to fetch.
     */
    where: ScholarWhereUniqueInput
  }


  /**
   * Scholar base type for findFirst actions
   */
  export type ScholarFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter, which Scholar to fetch.
     */
    where?: ScholarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scholars to fetch.
     */
    orderBy?: Enumerable<ScholarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scholars.
     */
    cursor?: ScholarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scholars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scholars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scholars.
     */
    distinct?: Enumerable<ScholarScalarFieldEnum>
  }

  /**
   * Scholar findFirst
   */
  export interface ScholarFindFirstArgs extends ScholarFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Scholar findFirstOrThrow
   */
  export type ScholarFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter, which Scholar to fetch.
     */
    where?: ScholarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scholars to fetch.
     */
    orderBy?: Enumerable<ScholarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scholars.
     */
    cursor?: ScholarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scholars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scholars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scholars.
     */
    distinct?: Enumerable<ScholarScalarFieldEnum>
  }


  /**
   * Scholar findMany
   */
  export type ScholarFindManyArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter, which Scholars to fetch.
     */
    where?: ScholarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scholars to fetch.
     */
    orderBy?: Enumerable<ScholarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scholars.
     */
    cursor?: ScholarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scholars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scholars.
     */
    skip?: number
    distinct?: Enumerable<ScholarScalarFieldEnum>
  }


  /**
   * Scholar create
   */
  export type ScholarCreateArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * The data needed to create a Scholar.
     */
    data: XOR<ScholarCreateInput, ScholarUncheckedCreateInput>
  }


  /**
   * Scholar createMany
   */
  export type ScholarCreateManyArgs = {
    /**
     * The data used to create many Scholars.
     */
    data: Enumerable<ScholarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Scholar update
   */
  export type ScholarUpdateArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * The data needed to update a Scholar.
     */
    data: XOR<ScholarUpdateInput, ScholarUncheckedUpdateInput>
    /**
     * Choose, which Scholar to update.
     */
    where: ScholarWhereUniqueInput
  }


  /**
   * Scholar updateMany
   */
  export type ScholarUpdateManyArgs = {
    /**
     * The data used to update Scholars.
     */
    data: XOR<ScholarUpdateManyMutationInput, ScholarUncheckedUpdateManyInput>
    /**
     * Filter which Scholars to update
     */
    where?: ScholarWhereInput
  }


  /**
   * Scholar upsert
   */
  export type ScholarUpsertArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * The filter to search for the Scholar to update in case it exists.
     */
    where: ScholarWhereUniqueInput
    /**
     * In case the Scholar found by the `where` argument doesn't exist, create a new Scholar with this data.
     */
    create: XOR<ScholarCreateInput, ScholarUncheckedCreateInput>
    /**
     * In case the Scholar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScholarUpdateInput, ScholarUncheckedUpdateInput>
  }


  /**
   * Scholar delete
   */
  export type ScholarDeleteArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
    /**
     * Filter which Scholar to delete.
     */
    where: ScholarWhereUniqueInput
  }


  /**
   * Scholar deleteMany
   */
  export type ScholarDeleteManyArgs = {
    /**
     * Filter which Scholars to delete
     */
    where?: ScholarWhereInput
  }


  /**
   * Scholar without action
   */
  export type ScholarArgs = {
    /**
     * Select specific fields to fetch from the Scholar
     */
    select?: ScholarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ScholarInclude | null
  }



  /**
   * Model WorkshopSpeakers
   */


  export type AggregateWorkshopSpeakers = {
    _count: WorkshopSpeakersCountAggregateOutputType | null
    _min: WorkshopSpeakersMinAggregateOutputType | null
    _max: WorkshopSpeakersMaxAggregateOutputType | null
  }

  export type WorkshopSpeakersMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phoneNumber: string | null
  }

  export type WorkshopSpeakersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phoneNumber: string | null
  }

  export type WorkshopSpeakersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phoneNumber: number
    _all: number
  }


  export type WorkshopSpeakersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
  }

  export type WorkshopSpeakersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
  }

  export type WorkshopSpeakersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    _all?: true
  }

  export type WorkshopSpeakersAggregateArgs = {
    /**
     * Filter which WorkshopSpeakers to aggregate.
     */
    where?: WorkshopSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSpeakers to fetch.
     */
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkshopSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkshopSpeakers
    **/
    _count?: true | WorkshopSpeakersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkshopSpeakersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkshopSpeakersMaxAggregateInputType
  }

  export type GetWorkshopSpeakersAggregateType<T extends WorkshopSpeakersAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkshopSpeakers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkshopSpeakers[P]>
      : GetScalarType<T[P], AggregateWorkshopSpeakers[P]>
  }




  export type WorkshopSpeakersGroupByArgs = {
    where?: WorkshopSpeakersWhereInput
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithAggregationInput>
    by: WorkshopSpeakersScalarFieldEnum[]
    having?: WorkshopSpeakersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkshopSpeakersCountAggregateInputType | true
    _min?: WorkshopSpeakersMinAggregateInputType
    _max?: WorkshopSpeakersMaxAggregateInputType
  }


  export type WorkshopSpeakersGroupByOutputType = {
    id: string
    name: string
    email: string
    phoneNumber: string
    _count: WorkshopSpeakersCountAggregateOutputType | null
    _min: WorkshopSpeakersMinAggregateOutputType | null
    _max: WorkshopSpeakersMaxAggregateOutputType | null
  }

  type GetWorkshopSpeakersGroupByPayload<T extends WorkshopSpeakersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WorkshopSpeakersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkshopSpeakersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkshopSpeakersGroupByOutputType[P]>
            : GetScalarType<T[P], WorkshopSpeakersGroupByOutputType[P]>
        }
      >
    >


  export type WorkshopSpeakersSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    workshops?: boolean | WorkshopSpeakers$workshopsArgs
    _count?: boolean | WorkshopSpeakersCountOutputTypeArgs
  }


  export type WorkshopSpeakersInclude = {
    workshops?: boolean | WorkshopSpeakers$workshopsArgs
    _count?: boolean | WorkshopSpeakersCountOutputTypeArgs
  }

  export type WorkshopSpeakersGetPayload<S extends boolean | null | undefined | WorkshopSpeakersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WorkshopSpeakers :
    S extends undefined ? never :
    S extends { include: any } & (WorkshopSpeakersArgs | WorkshopSpeakersFindManyArgs)
    ? WorkshopSpeakers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'workshops' ? Array < WorkshopGetPayload<S['include'][P]>>  :
        P extends '_count' ? WorkshopSpeakersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WorkshopSpeakersArgs | WorkshopSpeakersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'workshops' ? Array < WorkshopGetPayload<S['select'][P]>>  :
        P extends '_count' ? WorkshopSpeakersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WorkshopSpeakers ? WorkshopSpeakers[P] : never
  } 
      : WorkshopSpeakers


  type WorkshopSpeakersCountArgs = 
    Omit<WorkshopSpeakersFindManyArgs, 'select' | 'include'> & {
      select?: WorkshopSpeakersCountAggregateInputType | true
    }

  export interface WorkshopSpeakersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WorkshopSpeakers that matches the filter.
     * @param {WorkshopSpeakersFindUniqueArgs} args - Arguments to find a WorkshopSpeakers
     * @example
     * // Get one WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkshopSpeakersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkshopSpeakersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkshopSpeakers'> extends True ? Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>> : Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T> | null, null>

    /**
     * Find one WorkshopSpeakers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkshopSpeakersFindUniqueOrThrowArgs} args - Arguments to find a WorkshopSpeakers
     * @example
     * // Get one WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkshopSpeakersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WorkshopSpeakersFindUniqueOrThrowArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Find the first WorkshopSpeakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersFindFirstArgs} args - Arguments to find a WorkshopSpeakers
     * @example
     * // Get one WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkshopSpeakersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkshopSpeakersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkshopSpeakers'> extends True ? Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>> : Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T> | null, null>

    /**
     * Find the first WorkshopSpeakers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersFindFirstOrThrowArgs} args - Arguments to find a WorkshopSpeakers
     * @example
     * // Get one WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkshopSpeakersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WorkshopSpeakersFindFirstOrThrowArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Find zero or more WorkshopSpeakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findMany()
     * 
     * // Get first 10 WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workshopSpeakersWithIdOnly = await prisma.workshopSpeakers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkshopSpeakersFindManyArgs>(
      args?: SelectSubset<T, WorkshopSpeakersFindManyArgs>
    ): Prisma.PrismaPromise<Array<WorkshopSpeakersGetPayload<T>>>

    /**
     * Create a WorkshopSpeakers.
     * @param {WorkshopSpeakersCreateArgs} args - Arguments to create a WorkshopSpeakers.
     * @example
     * // Create one WorkshopSpeakers
     * const WorkshopSpeakers = await prisma.workshopSpeakers.create({
     *   data: {
     *     // ... data to create a WorkshopSpeakers
     *   }
     * })
     * 
    **/
    create<T extends WorkshopSpeakersCreateArgs>(
      args: SelectSubset<T, WorkshopSpeakersCreateArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Create many WorkshopSpeakers.
     *     @param {WorkshopSpeakersCreateManyArgs} args - Arguments to create many WorkshopSpeakers.
     *     @example
     *     // Create many WorkshopSpeakers
     *     const workshopSpeakers = await prisma.workshopSpeakers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkshopSpeakersCreateManyArgs>(
      args?: SelectSubset<T, WorkshopSpeakersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkshopSpeakers.
     * @param {WorkshopSpeakersDeleteArgs} args - Arguments to delete one WorkshopSpeakers.
     * @example
     * // Delete one WorkshopSpeakers
     * const WorkshopSpeakers = await prisma.workshopSpeakers.delete({
     *   where: {
     *     // ... filter to delete one WorkshopSpeakers
     *   }
     * })
     * 
    **/
    delete<T extends WorkshopSpeakersDeleteArgs>(
      args: SelectSubset<T, WorkshopSpeakersDeleteArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Update one WorkshopSpeakers.
     * @param {WorkshopSpeakersUpdateArgs} args - Arguments to update one WorkshopSpeakers.
     * @example
     * // Update one WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkshopSpeakersUpdateArgs>(
      args: SelectSubset<T, WorkshopSpeakersUpdateArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Delete zero or more WorkshopSpeakers.
     * @param {WorkshopSpeakersDeleteManyArgs} args - Arguments to filter WorkshopSpeakers to delete.
     * @example
     * // Delete a few WorkshopSpeakers
     * const { count } = await prisma.workshopSpeakers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkshopSpeakersDeleteManyArgs>(
      args?: SelectSubset<T, WorkshopSpeakersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkshopSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkshopSpeakersUpdateManyArgs>(
      args: SelectSubset<T, WorkshopSpeakersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkshopSpeakers.
     * @param {WorkshopSpeakersUpsertArgs} args - Arguments to update or create a WorkshopSpeakers.
     * @example
     * // Update or create a WorkshopSpeakers
     * const workshopSpeakers = await prisma.workshopSpeakers.upsert({
     *   create: {
     *     // ... data to create a WorkshopSpeakers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkshopSpeakers we want to update
     *   }
     * })
    **/
    upsert<T extends WorkshopSpeakersUpsertArgs>(
      args: SelectSubset<T, WorkshopSpeakersUpsertArgs>
    ): Prisma__WorkshopSpeakersClient<WorkshopSpeakersGetPayload<T>>

    /**
     * Count the number of WorkshopSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersCountArgs} args - Arguments to filter WorkshopSpeakers to count.
     * @example
     * // Count the number of WorkshopSpeakers
     * const count = await prisma.workshopSpeakers.count({
     *   where: {
     *     // ... the filter for the WorkshopSpeakers we want to count
     *   }
     * })
    **/
    count<T extends WorkshopSpeakersCountArgs>(
      args?: Subset<T, WorkshopSpeakersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkshopSpeakersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkshopSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkshopSpeakersAggregateArgs>(args: Subset<T, WorkshopSpeakersAggregateArgs>): Prisma.PrismaPromise<GetWorkshopSpeakersAggregateType<T>>

    /**
     * Group by WorkshopSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkshopSpeakersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkshopSpeakersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkshopSpeakersGroupByArgs['orderBy'] }
        : { orderBy?: WorkshopSpeakersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkshopSpeakersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkshopSpeakersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkshopSpeakers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkshopSpeakersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    workshops<T extends WorkshopSpeakers$workshopsArgs= {}>(args?: Subset<T, WorkshopSpeakers$workshopsArgs>): Prisma.PrismaPromise<Array<WorkshopGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WorkshopSpeakers base type for findUnique actions
   */
  export type WorkshopSpeakersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter, which WorkshopSpeakers to fetch.
     */
    where: WorkshopSpeakersWhereUniqueInput
  }

  /**
   * WorkshopSpeakers findUnique
   */
  export interface WorkshopSpeakersFindUniqueArgs extends WorkshopSpeakersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopSpeakers findUniqueOrThrow
   */
  export type WorkshopSpeakersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter, which WorkshopSpeakers to fetch.
     */
    where: WorkshopSpeakersWhereUniqueInput
  }


  /**
   * WorkshopSpeakers base type for findFirst actions
   */
  export type WorkshopSpeakersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter, which WorkshopSpeakers to fetch.
     */
    where?: WorkshopSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSpeakers to fetch.
     */
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopSpeakers.
     */
    cursor?: WorkshopSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopSpeakers.
     */
    distinct?: Enumerable<WorkshopSpeakersScalarFieldEnum>
  }

  /**
   * WorkshopSpeakers findFirst
   */
  export interface WorkshopSpeakersFindFirstArgs extends WorkshopSpeakersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WorkshopSpeakers findFirstOrThrow
   */
  export type WorkshopSpeakersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter, which WorkshopSpeakers to fetch.
     */
    where?: WorkshopSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSpeakers to fetch.
     */
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkshopSpeakers.
     */
    cursor?: WorkshopSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkshopSpeakers.
     */
    distinct?: Enumerable<WorkshopSpeakersScalarFieldEnum>
  }


  /**
   * WorkshopSpeakers findMany
   */
  export type WorkshopSpeakersFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter, which WorkshopSpeakers to fetch.
     */
    where?: WorkshopSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkshopSpeakers to fetch.
     */
    orderBy?: Enumerable<WorkshopSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkshopSpeakers.
     */
    cursor?: WorkshopSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkshopSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkshopSpeakers.
     */
    skip?: number
    distinct?: Enumerable<WorkshopSpeakersScalarFieldEnum>
  }


  /**
   * WorkshopSpeakers create
   */
  export type WorkshopSpeakersCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * The data needed to create a WorkshopSpeakers.
     */
    data: XOR<WorkshopSpeakersCreateInput, WorkshopSpeakersUncheckedCreateInput>
  }


  /**
   * WorkshopSpeakers createMany
   */
  export type WorkshopSpeakersCreateManyArgs = {
    /**
     * The data used to create many WorkshopSpeakers.
     */
    data: Enumerable<WorkshopSpeakersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkshopSpeakers update
   */
  export type WorkshopSpeakersUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * The data needed to update a WorkshopSpeakers.
     */
    data: XOR<WorkshopSpeakersUpdateInput, WorkshopSpeakersUncheckedUpdateInput>
    /**
     * Choose, which WorkshopSpeakers to update.
     */
    where: WorkshopSpeakersWhereUniqueInput
  }


  /**
   * WorkshopSpeakers updateMany
   */
  export type WorkshopSpeakersUpdateManyArgs = {
    /**
     * The data used to update WorkshopSpeakers.
     */
    data: XOR<WorkshopSpeakersUpdateManyMutationInput, WorkshopSpeakersUncheckedUpdateManyInput>
    /**
     * Filter which WorkshopSpeakers to update
     */
    where?: WorkshopSpeakersWhereInput
  }


  /**
   * WorkshopSpeakers upsert
   */
  export type WorkshopSpeakersUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * The filter to search for the WorkshopSpeakers to update in case it exists.
     */
    where: WorkshopSpeakersWhereUniqueInput
    /**
     * In case the WorkshopSpeakers found by the `where` argument doesn't exist, create a new WorkshopSpeakers with this data.
     */
    create: XOR<WorkshopSpeakersCreateInput, WorkshopSpeakersUncheckedCreateInput>
    /**
     * In case the WorkshopSpeakers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkshopSpeakersUpdateInput, WorkshopSpeakersUncheckedUpdateInput>
  }


  /**
   * WorkshopSpeakers delete
   */
  export type WorkshopSpeakersDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
    /**
     * Filter which WorkshopSpeakers to delete.
     */
    where: WorkshopSpeakersWhereUniqueInput
  }


  /**
   * WorkshopSpeakers deleteMany
   */
  export type WorkshopSpeakersDeleteManyArgs = {
    /**
     * Filter which WorkshopSpeakers to delete
     */
    where?: WorkshopSpeakersWhereInput
  }


  /**
   * WorkshopSpeakers.workshops
   */
  export type WorkshopSpeakers$workshopsArgs = {
    /**
     * Select specific fields to fetch from the Workshop
     */
    select?: WorkshopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopInclude | null
    where?: WorkshopWhereInput
    orderBy?: Enumerable<WorkshopOrderByWithRelationInput>
    cursor?: WorkshopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WorkshopScalarFieldEnum>
  }


  /**
   * WorkshopSpeakers without action
   */
  export type WorkshopSpeakersArgs = {
    /**
     * Select specific fields to fetch from the WorkshopSpeakers
     */
    select?: WorkshopSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkshopSpeakersInclude | null
  }



  /**
   * Model ChatSpeakers
   */


  export type AggregateChatSpeakers = {
    _count: ChatSpeakersCountAggregateOutputType | null
    _min: ChatSpeakersMinAggregateOutputType | null
    _max: ChatSpeakersMaxAggregateOutputType | null
  }

  export type ChatSpeakersMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type ChatSpeakersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type ChatSpeakersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    _all: number
  }


  export type ChatSpeakersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type ChatSpeakersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type ChatSpeakersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    _all?: true
  }

  export type ChatSpeakersAggregateArgs = {
    /**
     * Filter which ChatSpeakers to aggregate.
     */
    where?: ChatSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSpeakers to fetch.
     */
    orderBy?: Enumerable<ChatSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSpeakers
    **/
    _count?: true | ChatSpeakersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSpeakersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSpeakersMaxAggregateInputType
  }

  export type GetChatSpeakersAggregateType<T extends ChatSpeakersAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSpeakers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSpeakers[P]>
      : GetScalarType<T[P], AggregateChatSpeakers[P]>
  }




  export type ChatSpeakersGroupByArgs = {
    where?: ChatSpeakersWhereInput
    orderBy?: Enumerable<ChatSpeakersOrderByWithAggregationInput>
    by: ChatSpeakersScalarFieldEnum[]
    having?: ChatSpeakersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSpeakersCountAggregateInputType | true
    _min?: ChatSpeakersMinAggregateInputType
    _max?: ChatSpeakersMaxAggregateInputType
  }


  export type ChatSpeakersGroupByOutputType = {
    id: string
    name: string
    email: string
    _count: ChatSpeakersCountAggregateOutputType | null
    _min: ChatSpeakersMinAggregateOutputType | null
    _max: ChatSpeakersMaxAggregateOutputType | null
  }

  type GetChatSpeakersGroupByPayload<T extends ChatSpeakersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatSpeakersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSpeakersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSpeakersGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSpeakersGroupByOutputType[P]>
        }
      >
    >


  export type ChatSpeakersSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    chats?: boolean | ChatSpeakers$chatsArgs
    _count?: boolean | ChatSpeakersCountOutputTypeArgs
  }


  export type ChatSpeakersInclude = {
    chats?: boolean | ChatSpeakers$chatsArgs
    _count?: boolean | ChatSpeakersCountOutputTypeArgs
  }

  export type ChatSpeakersGetPayload<S extends boolean | null | undefined | ChatSpeakersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatSpeakers :
    S extends undefined ? never :
    S extends { include: any } & (ChatSpeakersArgs | ChatSpeakersFindManyArgs)
    ? ChatSpeakers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chats' ? Array < ChatGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChatSpeakersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatSpeakersArgs | ChatSpeakersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chats' ? Array < ChatGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChatSpeakersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ChatSpeakers ? ChatSpeakers[P] : never
  } 
      : ChatSpeakers


  type ChatSpeakersCountArgs = 
    Omit<ChatSpeakersFindManyArgs, 'select' | 'include'> & {
      select?: ChatSpeakersCountAggregateInputType | true
    }

  export interface ChatSpeakersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChatSpeakers that matches the filter.
     * @param {ChatSpeakersFindUniqueArgs} args - Arguments to find a ChatSpeakers
     * @example
     * // Get one ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatSpeakersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatSpeakersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatSpeakers'> extends True ? Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>> : Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T> | null, null>

    /**
     * Find one ChatSpeakers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatSpeakersFindUniqueOrThrowArgs} args - Arguments to find a ChatSpeakers
     * @example
     * // Get one ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatSpeakersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatSpeakersFindUniqueOrThrowArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Find the first ChatSpeakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersFindFirstArgs} args - Arguments to find a ChatSpeakers
     * @example
     * // Get one ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatSpeakersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatSpeakersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatSpeakers'> extends True ? Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>> : Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T> | null, null>

    /**
     * Find the first ChatSpeakers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersFindFirstOrThrowArgs} args - Arguments to find a ChatSpeakers
     * @example
     * // Get one ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatSpeakersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatSpeakersFindFirstOrThrowArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Find zero or more ChatSpeakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findMany()
     * 
     * // Get first 10 ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSpeakersWithIdOnly = await prisma.chatSpeakers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatSpeakersFindManyArgs>(
      args?: SelectSubset<T, ChatSpeakersFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatSpeakersGetPayload<T>>>

    /**
     * Create a ChatSpeakers.
     * @param {ChatSpeakersCreateArgs} args - Arguments to create a ChatSpeakers.
     * @example
     * // Create one ChatSpeakers
     * const ChatSpeakers = await prisma.chatSpeakers.create({
     *   data: {
     *     // ... data to create a ChatSpeakers
     *   }
     * })
     * 
    **/
    create<T extends ChatSpeakersCreateArgs>(
      args: SelectSubset<T, ChatSpeakersCreateArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Create many ChatSpeakers.
     *     @param {ChatSpeakersCreateManyArgs} args - Arguments to create many ChatSpeakers.
     *     @example
     *     // Create many ChatSpeakers
     *     const chatSpeakers = await prisma.chatSpeakers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatSpeakersCreateManyArgs>(
      args?: SelectSubset<T, ChatSpeakersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatSpeakers.
     * @param {ChatSpeakersDeleteArgs} args - Arguments to delete one ChatSpeakers.
     * @example
     * // Delete one ChatSpeakers
     * const ChatSpeakers = await prisma.chatSpeakers.delete({
     *   where: {
     *     // ... filter to delete one ChatSpeakers
     *   }
     * })
     * 
    **/
    delete<T extends ChatSpeakersDeleteArgs>(
      args: SelectSubset<T, ChatSpeakersDeleteArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Update one ChatSpeakers.
     * @param {ChatSpeakersUpdateArgs} args - Arguments to update one ChatSpeakers.
     * @example
     * // Update one ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatSpeakersUpdateArgs>(
      args: SelectSubset<T, ChatSpeakersUpdateArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Delete zero or more ChatSpeakers.
     * @param {ChatSpeakersDeleteManyArgs} args - Arguments to filter ChatSpeakers to delete.
     * @example
     * // Delete a few ChatSpeakers
     * const { count } = await prisma.chatSpeakers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatSpeakersDeleteManyArgs>(
      args?: SelectSubset<T, ChatSpeakersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatSpeakersUpdateManyArgs>(
      args: SelectSubset<T, ChatSpeakersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatSpeakers.
     * @param {ChatSpeakersUpsertArgs} args - Arguments to update or create a ChatSpeakers.
     * @example
     * // Update or create a ChatSpeakers
     * const chatSpeakers = await prisma.chatSpeakers.upsert({
     *   create: {
     *     // ... data to create a ChatSpeakers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSpeakers we want to update
     *   }
     * })
    **/
    upsert<T extends ChatSpeakersUpsertArgs>(
      args: SelectSubset<T, ChatSpeakersUpsertArgs>
    ): Prisma__ChatSpeakersClient<ChatSpeakersGetPayload<T>>

    /**
     * Count the number of ChatSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersCountArgs} args - Arguments to filter ChatSpeakers to count.
     * @example
     * // Count the number of ChatSpeakers
     * const count = await prisma.chatSpeakers.count({
     *   where: {
     *     // ... the filter for the ChatSpeakers we want to count
     *   }
     * })
    **/
    count<T extends ChatSpeakersCountArgs>(
      args?: Subset<T, ChatSpeakersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSpeakersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSpeakersAggregateArgs>(args: Subset<T, ChatSpeakersAggregateArgs>): Prisma.PrismaPromise<GetChatSpeakersAggregateType<T>>

    /**
     * Group by ChatSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSpeakersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSpeakersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSpeakersGroupByArgs['orderBy'] }
        : { orderBy?: ChatSpeakersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSpeakersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSpeakersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSpeakers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatSpeakersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chats<T extends ChatSpeakers$chatsArgs= {}>(args?: Subset<T, ChatSpeakers$chatsArgs>): Prisma.PrismaPromise<Array<ChatGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChatSpeakers base type for findUnique actions
   */
  export type ChatSpeakersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter, which ChatSpeakers to fetch.
     */
    where: ChatSpeakersWhereUniqueInput
  }

  /**
   * ChatSpeakers findUnique
   */
  export interface ChatSpeakersFindUniqueArgs extends ChatSpeakersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatSpeakers findUniqueOrThrow
   */
  export type ChatSpeakersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter, which ChatSpeakers to fetch.
     */
    where: ChatSpeakersWhereUniqueInput
  }


  /**
   * ChatSpeakers base type for findFirst actions
   */
  export type ChatSpeakersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter, which ChatSpeakers to fetch.
     */
    where?: ChatSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSpeakers to fetch.
     */
    orderBy?: Enumerable<ChatSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSpeakers.
     */
    cursor?: ChatSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSpeakers.
     */
    distinct?: Enumerable<ChatSpeakersScalarFieldEnum>
  }

  /**
   * ChatSpeakers findFirst
   */
  export interface ChatSpeakersFindFirstArgs extends ChatSpeakersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatSpeakers findFirstOrThrow
   */
  export type ChatSpeakersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter, which ChatSpeakers to fetch.
     */
    where?: ChatSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSpeakers to fetch.
     */
    orderBy?: Enumerable<ChatSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSpeakers.
     */
    cursor?: ChatSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSpeakers.
     */
    distinct?: Enumerable<ChatSpeakersScalarFieldEnum>
  }


  /**
   * ChatSpeakers findMany
   */
  export type ChatSpeakersFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter, which ChatSpeakers to fetch.
     */
    where?: ChatSpeakersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSpeakers to fetch.
     */
    orderBy?: Enumerable<ChatSpeakersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSpeakers.
     */
    cursor?: ChatSpeakersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSpeakers.
     */
    skip?: number
    distinct?: Enumerable<ChatSpeakersScalarFieldEnum>
  }


  /**
   * ChatSpeakers create
   */
  export type ChatSpeakersCreateArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * The data needed to create a ChatSpeakers.
     */
    data: XOR<ChatSpeakersCreateInput, ChatSpeakersUncheckedCreateInput>
  }


  /**
   * ChatSpeakers createMany
   */
  export type ChatSpeakersCreateManyArgs = {
    /**
     * The data used to create many ChatSpeakers.
     */
    data: Enumerable<ChatSpeakersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatSpeakers update
   */
  export type ChatSpeakersUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * The data needed to update a ChatSpeakers.
     */
    data: XOR<ChatSpeakersUpdateInput, ChatSpeakersUncheckedUpdateInput>
    /**
     * Choose, which ChatSpeakers to update.
     */
    where: ChatSpeakersWhereUniqueInput
  }


  /**
   * ChatSpeakers updateMany
   */
  export type ChatSpeakersUpdateManyArgs = {
    /**
     * The data used to update ChatSpeakers.
     */
    data: XOR<ChatSpeakersUpdateManyMutationInput, ChatSpeakersUncheckedUpdateManyInput>
    /**
     * Filter which ChatSpeakers to update
     */
    where?: ChatSpeakersWhereInput
  }


  /**
   * ChatSpeakers upsert
   */
  export type ChatSpeakersUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * The filter to search for the ChatSpeakers to update in case it exists.
     */
    where: ChatSpeakersWhereUniqueInput
    /**
     * In case the ChatSpeakers found by the `where` argument doesn't exist, create a new ChatSpeakers with this data.
     */
    create: XOR<ChatSpeakersCreateInput, ChatSpeakersUncheckedCreateInput>
    /**
     * In case the ChatSpeakers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSpeakersUpdateInput, ChatSpeakersUncheckedUpdateInput>
  }


  /**
   * ChatSpeakers delete
   */
  export type ChatSpeakersDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
    /**
     * Filter which ChatSpeakers to delete.
     */
    where: ChatSpeakersWhereUniqueInput
  }


  /**
   * ChatSpeakers deleteMany
   */
  export type ChatSpeakersDeleteManyArgs = {
    /**
     * Filter which ChatSpeakers to delete
     */
    where?: ChatSpeakersWhereInput
  }


  /**
   * ChatSpeakers.chats
   */
  export type ChatSpeakers$chatsArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * ChatSpeakers without action
   */
  export type ChatSpeakersArgs = {
    /**
     * Select specific fields to fetch from the ChatSpeakers
     */
    select?: ChatSpeakersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatSpeakersInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs
  }


  export type AccountInclude = {
    user?: boolean | UserArgs
  }

  export type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Account :
    S extends undefined ? never :
    S extends { include: any } & (AccountArgs | AccountFindManyArgs)
    ? Account  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccountArgs | AccountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
      : Account


  type AccountCountArgs = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): Prisma.PrismaPromise<Array<AccountGetPayload<T>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs
  }


  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    image: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    image: string | null
    role: Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    image?: boolean
    role?: boolean
    accounts?: boolean | User$accountsArgs
    sessions?: boolean | User$sessionsArgs
    scholar?: boolean | ScholarArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    accounts?: boolean | User$accountsArgs
    sessions?: boolean | User$sessionsArgs
    scholar?: boolean | ScholarArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'accounts' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'scholar' ? ScholarGetPayload<S['include'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'accounts' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'scholar' ? ScholarGetPayload<S['select'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    accounts<T extends User$accountsArgs= {}>(args?: Subset<T, User$accountsArgs>): Prisma.PrismaPromise<Array<AccountGetPayload<T>>| Null>;

    sessions<T extends User$sessionsArgs= {}>(args?: Subset<T, User$sessionsArgs>): Prisma.PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    scholar<T extends ScholarArgs= {}>(args?: Subset<T, ScholarArgs>): Prisma__ScholarClient<ScholarGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: VerificationTokenScalarFieldEnum[]
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VerificationToken :
    S extends undefined ? never :
    S extends { include: any } & (VerificationTokenArgs | VerificationTokenFindManyArgs)
    ? VerificationToken 
    : S extends { select: any } & (VerificationTokenArgs | VerificationTokenFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VerificationToken ? VerificationToken[P] : never
  } 
      : VerificationToken


  type VerificationTokenCountArgs = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>> : Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null, null>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>> : Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null, null>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs>
    ): Prisma.PrismaPromise<Array<VerificationTokenGetPayload<T>>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VerificationToken base type for findUnique actions
   */
  export type VerificationTokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUnique
   */
  export interface VerificationTokenFindUniqueArgs extends VerificationTokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken base type for findFirst actions
   */
  export type VerificationTokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }

  /**
   * VerificationToken findFirst
   */
  export interface VerificationTokenFindFirstArgs extends VerificationTokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
  }



  /**
   * Enums
   */

  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ChatDatesScalarFieldEnum: {
    id: 'id',
    date: 'date',
    start_time: 'start_time',
    end_time: 'end_time',
    chatId: 'chatId'
  };

  export type ChatDatesScalarFieldEnum = (typeof ChatDatesScalarFieldEnum)[keyof typeof ChatDatesScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    title: 'title',
    spots: 'spots',
    takenSpots: 'takenSpots',
    platform: 'platform',
    modality: 'modality',
    activityStatus: 'activityStatus',
    level: 'level'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const ChatSpeakersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email'
  };

  export type ChatSpeakersScalarFieldEnum = (typeof ChatSpeakersScalarFieldEnum)[keyof typeof ChatSpeakersScalarFieldEnum]


  export const ChatsTempDataScalarFieldEnum: {
    id: 'id',
    chatId: 'chatId',
    formLink: 'formLink',
    meetingLink: 'meetingLink',
    meetingId: 'meetingId',
    meetingPassword: 'meetingPassword',
    calendarID: 'calendarID'
  };

  export type ChatsTempDataScalarFieldEnum = (typeof ChatsTempDataScalarFieldEnum)[keyof typeof ChatsTempDataScalarFieldEnum]


  export const ScholarScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    region: 'region',
    scholarStatus: 'scholarStatus',
    canAssistToChats: 'canAssistToChats',
    canAssistToWorkshops: 'canAssistToWorkshops',
    canAssistToVolunteers: 'canAssistToVolunteers',
    firstName: 'firstName',
    lastName: 'lastName',
    dni: 'dni',
    gender: 'gender',
    birthDate: 'birthDate',
    localPhoneNumber: 'localPhoneNumber',
    cellPhoneNumber: 'cellPhoneNumber',
    whatsAppNumber: 'whatsAppNumber',
    stateOfOrigin: 'stateOfOrigin',
    currentZone: 'currentZone',
    housingType: 'housingType',
    email: 'email',
    collage: 'collage',
    carrer: 'carrer',
    currentAcademicPeriod: 'currentAcademicPeriod',
    academicYear: 'academicYear',
    classModality: 'classModality',
    cvaLocacion: 'cvaLocacion',
    englishLevel: 'englishLevel',
    notStartedCvareason: 'notStartedCvareason',
    avaaAdmissionYear: 'avaaAdmissionYear',
    volunteeringOrganizationName: 'volunteeringOrganizationName',
    academicLoadCompleted: 'academicLoadCompleted',
    currentStatus: 'currentStatus',
    ceremonyDate: 'ceremonyDate',
    currentlyWorking: 'currentlyWorking',
    organizationName: 'organizationName',
    positionHeld: 'positionHeld'
  };

  export type ScholarScalarFieldEnum = (typeof ScholarScalarFieldEnum)[keyof typeof ScholarScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const WorkshopDatesScalarFieldEnum: {
    id: 'id',
    date: 'date',
    start_time: 'start_time',
    end_time: 'end_time',
    workshopId: 'workshopId'
  };

  export type WorkshopDatesScalarFieldEnum = (typeof WorkshopDatesScalarFieldEnum)[keyof typeof WorkshopDatesScalarFieldEnum]


  export const WorkshopScalarFieldEnum: {
    id: 'id',
    title: 'title',
    pensum: 'pensum',
    spots: 'spots',
    takenSpots: 'takenSpots',
    modality: 'modality',
    platform: 'platform',
    description: 'description',
    avaaYear: 'avaaYear',
    activityStatus: 'activityStatus'
  };

  export type WorkshopScalarFieldEnum = (typeof WorkshopScalarFieldEnum)[keyof typeof WorkshopScalarFieldEnum]


  export const WorkshopSpeakersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phoneNumber: 'phoneNumber'
  };

  export type WorkshopSpeakersScalarFieldEnum = (typeof WorkshopSpeakersScalarFieldEnum)[keyof typeof WorkshopSpeakersScalarFieldEnum]


  export const WorkshopTempDataScalarFieldEnum: {
    id: 'id',
    workshopId: 'workshopId',
    formLink: 'formLink',
    meetingLink: 'meetingLink',
    meetingId: 'meetingId',
    meetingPassword: 'meetingPassword',
    calendarID: 'calendarID'
  };

  export type WorkshopTempDataScalarFieldEnum = (typeof WorkshopTempDataScalarFieldEnum)[keyof typeof WorkshopTempDataScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type WorkshopDatesWhereInput = {
    AND?: Enumerable<WorkshopDatesWhereInput>
    OR?: Enumerable<WorkshopDatesWhereInput>
    NOT?: Enumerable<WorkshopDatesWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    workshopId?: StringFilter | string
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
  }

  export type WorkshopDatesOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    workshopId?: SortOrder
    workshop?: WorkshopOrderByWithRelationInput
  }

  export type WorkshopDatesWhereUniqueInput = {
    id?: string
  }

  export type WorkshopDatesOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    workshopId?: SortOrder
    _count?: WorkshopDatesCountOrderByAggregateInput
    _max?: WorkshopDatesMaxOrderByAggregateInput
    _min?: WorkshopDatesMinOrderByAggregateInput
  }

  export type WorkshopDatesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkshopDatesScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkshopDatesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkshopDatesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    start_time?: DateTimeWithAggregatesFilter | Date | string
    end_time?: DateTimeWithAggregatesFilter | Date | string
    workshopId?: StringWithAggregatesFilter | string
  }

  export type ChatDatesWhereInput = {
    AND?: Enumerable<ChatDatesWhereInput>
    OR?: Enumerable<ChatDatesWhereInput>
    NOT?: Enumerable<ChatDatesWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    chatId?: StringFilter | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type ChatDatesOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    chatId?: SortOrder
    chat?: ChatOrderByWithRelationInput
  }

  export type ChatDatesWhereUniqueInput = {
    id?: string
  }

  export type ChatDatesOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    chatId?: SortOrder
    _count?: ChatDatesCountOrderByAggregateInput
    _max?: ChatDatesMaxOrderByAggregateInput
    _min?: ChatDatesMinOrderByAggregateInput
  }

  export type ChatDatesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatDatesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatDatesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatDatesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    start_time?: DateTimeWithAggregatesFilter | Date | string
    end_time?: DateTimeWithAggregatesFilter | Date | string
    chatId?: StringWithAggregatesFilter | string
  }

  export type WorkshopTempDataWhereInput = {
    AND?: Enumerable<WorkshopTempDataWhereInput>
    OR?: Enumerable<WorkshopTempDataWhereInput>
    NOT?: Enumerable<WorkshopTempDataWhereInput>
    id?: StringFilter | string
    workshopId?: StringFilter | string
    formLink?: StringFilter | string
    meetingLink?: StringFilter | string
    meetingId?: StringFilter | string
    meetingPassword?: StringFilter | string
    calendarID?: StringFilter | string
    workshop?: XOR<WorkshopRelationFilter, WorkshopWhereInput>
  }

  export type WorkshopTempDataOrderByWithRelationInput = {
    id?: SortOrder
    workshopId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
    workshop?: WorkshopOrderByWithRelationInput
  }

  export type WorkshopTempDataWhereUniqueInput = {
    id?: string
    workshopId?: string
  }

  export type WorkshopTempDataOrderByWithAggregationInput = {
    id?: SortOrder
    workshopId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
    _count?: WorkshopTempDataCountOrderByAggregateInput
    _max?: WorkshopTempDataMaxOrderByAggregateInput
    _min?: WorkshopTempDataMinOrderByAggregateInput
  }

  export type WorkshopTempDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkshopTempDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkshopTempDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkshopTempDataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    workshopId?: StringWithAggregatesFilter | string
    formLink?: StringWithAggregatesFilter | string
    meetingLink?: StringWithAggregatesFilter | string
    meetingId?: StringWithAggregatesFilter | string
    meetingPassword?: StringWithAggregatesFilter | string
    calendarID?: StringWithAggregatesFilter | string
  }

  export type ChatsTempDataWhereInput = {
    AND?: Enumerable<ChatsTempDataWhereInput>
    OR?: Enumerable<ChatsTempDataWhereInput>
    NOT?: Enumerable<ChatsTempDataWhereInput>
    id?: StringFilter | string
    chatId?: StringFilter | string
    formLink?: StringFilter | string
    meetingLink?: StringFilter | string
    meetingId?: StringFilter | string
    meetingPassword?: StringFilter | string
    calendarID?: StringFilter | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type ChatsTempDataOrderByWithRelationInput = {
    id?: SortOrder
    chatId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
    chat?: ChatOrderByWithRelationInput
  }

  export type ChatsTempDataWhereUniqueInput = {
    id?: string
    chatId?: string
  }

  export type ChatsTempDataOrderByWithAggregationInput = {
    id?: SortOrder
    chatId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
    _count?: ChatsTempDataCountOrderByAggregateInput
    _max?: ChatsTempDataMaxOrderByAggregateInput
    _min?: ChatsTempDataMinOrderByAggregateInput
  }

  export type ChatsTempDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatsTempDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatsTempDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatsTempDataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    chatId?: StringWithAggregatesFilter | string
    formLink?: StringWithAggregatesFilter | string
    meetingLink?: StringWithAggregatesFilter | string
    meetingId?: StringWithAggregatesFilter | string
    meetingPassword?: StringWithAggregatesFilter | string
    calendarID?: StringWithAggregatesFilter | string
  }

  export type WorkshopWhereInput = {
    AND?: Enumerable<WorkshopWhereInput>
    OR?: Enumerable<WorkshopWhereInput>
    NOT?: Enumerable<WorkshopWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    pensum?: EnumPensumFilter | Pensum
    spots?: IntFilter | number
    takenSpots?: IntFilter | number
    modality?: EnumModalityFilter | Modality
    platform?: EnumPlatformFilter | Platform
    description?: StringFilter | string
    avaaYear?: StringFilter | string
    activityStatus?: EnumactivityStatusFilter | activityStatus
    dates?: WorkshopDatesListRelationFilter
    speaker?: WorkshopSpeakersListRelationFilter
    tempData?: XOR<WorkshopTempDataRelationFilter, WorkshopTempDataWhereInput> | null
  }

  export type WorkshopOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    pensum?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    modality?: SortOrder
    platform?: SortOrder
    description?: SortOrder
    avaaYear?: SortOrder
    activityStatus?: SortOrder
    dates?: WorkshopDatesOrderByRelationAggregateInput
    speaker?: WorkshopSpeakersOrderByRelationAggregateInput
    tempData?: WorkshopTempDataOrderByWithRelationInput
  }

  export type WorkshopWhereUniqueInput = {
    id?: string
  }

  export type WorkshopOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    pensum?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    modality?: SortOrder
    platform?: SortOrder
    description?: SortOrder
    avaaYear?: SortOrder
    activityStatus?: SortOrder
    _count?: WorkshopCountOrderByAggregateInput
    _avg?: WorkshopAvgOrderByAggregateInput
    _max?: WorkshopMaxOrderByAggregateInput
    _min?: WorkshopMinOrderByAggregateInput
    _sum?: WorkshopSumOrderByAggregateInput
  }

  export type WorkshopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkshopScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkshopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkshopScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    pensum?: EnumPensumWithAggregatesFilter | Pensum
    spots?: IntWithAggregatesFilter | number
    takenSpots?: IntWithAggregatesFilter | number
    modality?: EnumModalityWithAggregatesFilter | Modality
    platform?: EnumPlatformWithAggregatesFilter | Platform
    description?: StringWithAggregatesFilter | string
    avaaYear?: StringWithAggregatesFilter | string
    activityStatus?: EnumactivityStatusWithAggregatesFilter | activityStatus
  }

  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    spots?: IntFilter | number
    takenSpots?: IntFilter | number
    platform?: EnumPlatformFilter | Platform
    modality?: EnumModalityFilter | Modality
    activityStatus?: EnumactivityStatusFilter | activityStatus
    level?: EnumLevelFilter | Level
    dates?: ChatDatesListRelationFilter
    speaker?: ChatSpeakersListRelationFilter
    tempData?: XOR<ChatsTempDataRelationFilter, ChatsTempDataWhereInput> | null
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    platform?: SortOrder
    modality?: SortOrder
    activityStatus?: SortOrder
    level?: SortOrder
    dates?: ChatDatesOrderByRelationAggregateInput
    speaker?: ChatSpeakersOrderByRelationAggregateInput
    tempData?: ChatsTempDataOrderByWithRelationInput
  }

  export type ChatWhereUniqueInput = {
    id?: string
  }

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    platform?: SortOrder
    modality?: SortOrder
    activityStatus?: SortOrder
    level?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    spots?: IntWithAggregatesFilter | number
    takenSpots?: IntWithAggregatesFilter | number
    platform?: EnumPlatformWithAggregatesFilter | Platform
    modality?: EnumModalityWithAggregatesFilter | Modality
    activityStatus?: EnumactivityStatusWithAggregatesFilter | activityStatus
    level?: EnumLevelWithAggregatesFilter | Level
  }

  export type ScholarWhereInput = {
    AND?: Enumerable<ScholarWhereInput>
    OR?: Enumerable<ScholarWhereInput>
    NOT?: Enumerable<ScholarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    region?: EnumRegionFilter | Region
    scholarStatus?: EnumScholarStatusFilter | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFilter | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFilter | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFilter | ScholarCanAssist
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    dni?: StringFilter | string
    gender?: StringFilter | string
    birthDate?: DateTimeFilter | Date | string
    localPhoneNumber?: StringFilter | string
    cellPhoneNumber?: StringFilter | string
    whatsAppNumber?: StringNullableFilter | string | null
    stateOfOrigin?: StringFilter | string
    currentZone?: StringFilter | string
    housingType?: StringFilter | string
    email?: StringFilter | string
    collage?: StringFilter | string
    carrer?: StringFilter | string
    currentAcademicPeriod?: StringFilter | string
    academicYear?: IntFilter | number
    classModality?: StringFilter | string
    cvaLocacion?: StringFilter | string
    englishLevel?: StringFilter | string
    notStartedCvareason?: StringNullableFilter | string | null
    avaaAdmissionYear?: IntNullableFilter | number | null
    volunteeringOrganizationName?: StringNullableFilter | string | null
    academicLoadCompleted?: BoolNullableFilter | boolean | null
    currentStatus?: StringFilter | string
    ceremonyDate?: DateTimeNullableFilter | Date | string | null
    currentlyWorking?: BoolNullableFilter | boolean | null
    organizationName?: StringNullableFilter | string | null
    positionHeld?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ScholarOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    region?: SortOrder
    scholarStatus?: SortOrder
    canAssistToChats?: SortOrder
    canAssistToWorkshops?: SortOrder
    canAssistToVolunteers?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dni?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    localPhoneNumber?: SortOrder
    cellPhoneNumber?: SortOrder
    whatsAppNumber?: SortOrder
    stateOfOrigin?: SortOrder
    currentZone?: SortOrder
    housingType?: SortOrder
    email?: SortOrder
    collage?: SortOrder
    carrer?: SortOrder
    currentAcademicPeriod?: SortOrder
    academicYear?: SortOrder
    classModality?: SortOrder
    cvaLocacion?: SortOrder
    englishLevel?: SortOrder
    notStartedCvareason?: SortOrder
    avaaAdmissionYear?: SortOrder
    volunteeringOrganizationName?: SortOrder
    academicLoadCompleted?: SortOrder
    currentStatus?: SortOrder
    ceremonyDate?: SortOrder
    currentlyWorking?: SortOrder
    organizationName?: SortOrder
    positionHeld?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ScholarWhereUniqueInput = {
    id?: string
    userId?: string
    email?: string
  }

  export type ScholarOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    region?: SortOrder
    scholarStatus?: SortOrder
    canAssistToChats?: SortOrder
    canAssistToWorkshops?: SortOrder
    canAssistToVolunteers?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dni?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    localPhoneNumber?: SortOrder
    cellPhoneNumber?: SortOrder
    whatsAppNumber?: SortOrder
    stateOfOrigin?: SortOrder
    currentZone?: SortOrder
    housingType?: SortOrder
    email?: SortOrder
    collage?: SortOrder
    carrer?: SortOrder
    currentAcademicPeriod?: SortOrder
    academicYear?: SortOrder
    classModality?: SortOrder
    cvaLocacion?: SortOrder
    englishLevel?: SortOrder
    notStartedCvareason?: SortOrder
    avaaAdmissionYear?: SortOrder
    volunteeringOrganizationName?: SortOrder
    academicLoadCompleted?: SortOrder
    currentStatus?: SortOrder
    ceremonyDate?: SortOrder
    currentlyWorking?: SortOrder
    organizationName?: SortOrder
    positionHeld?: SortOrder
    _count?: ScholarCountOrderByAggregateInput
    _avg?: ScholarAvgOrderByAggregateInput
    _max?: ScholarMaxOrderByAggregateInput
    _min?: ScholarMinOrderByAggregateInput
    _sum?: ScholarSumOrderByAggregateInput
  }

  export type ScholarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ScholarScalarWhereWithAggregatesInput>
    OR?: Enumerable<ScholarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ScholarScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    region?: EnumRegionWithAggregatesFilter | Region
    scholarStatus?: EnumScholarStatusWithAggregatesFilter | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistWithAggregatesFilter | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistWithAggregatesFilter | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistWithAggregatesFilter | ScholarCanAssist
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    dni?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
    birthDate?: DateTimeWithAggregatesFilter | Date | string
    localPhoneNumber?: StringWithAggregatesFilter | string
    cellPhoneNumber?: StringWithAggregatesFilter | string
    whatsAppNumber?: StringNullableWithAggregatesFilter | string | null
    stateOfOrigin?: StringWithAggregatesFilter | string
    currentZone?: StringWithAggregatesFilter | string
    housingType?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    collage?: StringWithAggregatesFilter | string
    carrer?: StringWithAggregatesFilter | string
    currentAcademicPeriod?: StringWithAggregatesFilter | string
    academicYear?: IntWithAggregatesFilter | number
    classModality?: StringWithAggregatesFilter | string
    cvaLocacion?: StringWithAggregatesFilter | string
    englishLevel?: StringWithAggregatesFilter | string
    notStartedCvareason?: StringNullableWithAggregatesFilter | string | null
    avaaAdmissionYear?: IntNullableWithAggregatesFilter | number | null
    volunteeringOrganizationName?: StringNullableWithAggregatesFilter | string | null
    academicLoadCompleted?: BoolNullableWithAggregatesFilter | boolean | null
    currentStatus?: StringWithAggregatesFilter | string
    ceremonyDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    currentlyWorking?: BoolNullableWithAggregatesFilter | boolean | null
    organizationName?: StringNullableWithAggregatesFilter | string | null
    positionHeld?: StringNullableWithAggregatesFilter | string | null
  }

  export type WorkshopSpeakersWhereInput = {
    AND?: Enumerable<WorkshopSpeakersWhereInput>
    OR?: Enumerable<WorkshopSpeakersWhereInput>
    NOT?: Enumerable<WorkshopSpeakersWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    phoneNumber?: StringFilter | string
    workshops?: WorkshopListRelationFilter
  }

  export type WorkshopSpeakersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    workshops?: WorkshopOrderByRelationAggregateInput
  }

  export type WorkshopSpeakersWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type WorkshopSpeakersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    _count?: WorkshopSpeakersCountOrderByAggregateInput
    _max?: WorkshopSpeakersMaxOrderByAggregateInput
    _min?: WorkshopSpeakersMinOrderByAggregateInput
  }

  export type WorkshopSpeakersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkshopSpeakersScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkshopSpeakersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkshopSpeakersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
  }

  export type ChatSpeakersWhereInput = {
    AND?: Enumerable<ChatSpeakersWhereInput>
    OR?: Enumerable<ChatSpeakersWhereInput>
    NOT?: Enumerable<ChatSpeakersWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    chats?: ChatListRelationFilter
  }

  export type ChatSpeakersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    chats?: ChatOrderByRelationAggregateInput
  }

  export type ChatSpeakersWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type ChatSpeakersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    _count?: ChatSpeakersCountOrderByAggregateInput
    _max?: ChatSpeakersMaxOrderByAggregateInput
    _min?: ChatSpeakersMinOrderByAggregateInput
  }

  export type ChatSpeakersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatSpeakersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatSpeakersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatSpeakersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    role?: EnumRoleFilter | Role
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    scholar?: XOR<ScholarRelationFilter, ScholarWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    scholar?: ScholarOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WorkshopDatesCreateInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    workshop: WorkshopCreateNestedOneWithoutDatesInput
  }

  export type WorkshopDatesUncheckedCreateInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    workshopId: string
  }

  export type WorkshopDatesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    workshop?: WorkshopUpdateOneRequiredWithoutDatesNestedInput
  }

  export type WorkshopDatesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    workshopId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopDatesCreateManyInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    workshopId: string
  }

  export type WorkshopDatesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopDatesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    workshopId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatDatesCreateInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    chat: ChatCreateNestedOneWithoutDatesInput
  }

  export type ChatDatesUncheckedCreateInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    chatId: string
  }

  export type ChatDatesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutDatesNestedInput
  }

  export type ChatDatesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatDatesCreateManyInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
    chatId: string
  }

  export type ChatDatesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatDatesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopTempDataCreateInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
    workshop: WorkshopCreateNestedOneWithoutTempDataInput
  }

  export type WorkshopTempDataUncheckedCreateInput = {
    id?: string
    workshopId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type WorkshopTempDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
    workshop?: WorkshopUpdateOneRequiredWithoutTempDataNestedInput
  }

  export type WorkshopTempDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopTempDataCreateManyInput = {
    id?: string
    workshopId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type WorkshopTempDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopTempDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workshopId?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type ChatsTempDataCreateInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
    chat: ChatCreateNestedOneWithoutTempDataInput
  }

  export type ChatsTempDataUncheckedCreateInput = {
    id?: string
    chatId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type ChatsTempDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutTempDataNestedInput
  }

  export type ChatsTempDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type ChatsTempDataCreateManyInput = {
    id?: string
    chatId: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type ChatsTempDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type ChatsTempDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopCreateInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesCreateNestedManyWithoutWorkshopInput
    speaker?: WorkshopSpeakersCreateNestedManyWithoutWorkshopsInput
    tempData?: WorkshopTempDataCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesUncheckedCreateNestedManyWithoutWorkshopInput
    speaker?: WorkshopSpeakersUncheckedCreateNestedManyWithoutWorkshopsInput
    tempData?: WorkshopTempDataUncheckedCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUpdateManyWithoutWorkshopNestedInput
    speaker?: WorkshopSpeakersUpdateManyWithoutWorkshopsNestedInput
    tempData?: WorkshopTempDataUpdateOneWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUncheckedUpdateManyWithoutWorkshopNestedInput
    speaker?: WorkshopSpeakersUncheckedUpdateManyWithoutWorkshopsNestedInput
    tempData?: WorkshopTempDataUncheckedUpdateOneWithoutWorkshopNestedInput
  }

  export type WorkshopCreateManyInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
  }

  export type WorkshopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
  }

  export type WorkshopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
  }

  export type ChatCreateInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesCreateNestedManyWithoutChatInput
    speaker?: ChatSpeakersCreateNestedManyWithoutChatsInput
    tempData?: ChatsTempDataCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesUncheckedCreateNestedManyWithoutChatInput
    speaker?: ChatSpeakersUncheckedCreateNestedManyWithoutChatsInput
    tempData?: ChatsTempDataUncheckedCreateNestedOneWithoutChatInput
  }

  export type ChatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUpdateManyWithoutChatNestedInput
    speaker?: ChatSpeakersUpdateManyWithoutChatsNestedInput
    tempData?: ChatsTempDataUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUncheckedUpdateManyWithoutChatNestedInput
    speaker?: ChatSpeakersUncheckedUpdateManyWithoutChatsNestedInput
    tempData?: ChatsTempDataUncheckedUpdateOneWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
  }

  export type ChatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
  }

  export type ScholarCreateInput = {
    id?: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date | string
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber?: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason?: string | null
    avaaAdmissionYear?: number | null
    volunteeringOrganizationName?: string | null
    academicLoadCompleted?: boolean | null
    currentStatus: string
    ceremonyDate?: Date | string | null
    currentlyWorking?: boolean | null
    organizationName?: string | null
    positionHeld?: string | null
    user: UserCreateNestedOneWithoutScholarInput
  }

  export type ScholarUncheckedCreateInput = {
    id?: string
    userId: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date | string
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber?: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason?: string | null
    avaaAdmissionYear?: number | null
    volunteeringOrganizationName?: string | null
    academicLoadCompleted?: boolean | null
    currentStatus: string
    ceremonyDate?: Date | string | null
    currentlyWorking?: boolean | null
    organizationName?: string | null
    positionHeld?: string | null
  }

  export type ScholarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutScholarNestedInput
  }

  export type ScholarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScholarCreateManyInput = {
    id?: string
    userId: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date | string
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber?: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason?: string | null
    avaaAdmissionYear?: number | null
    volunteeringOrganizationName?: string | null
    academicLoadCompleted?: boolean | null
    currentStatus: string
    ceremonyDate?: Date | string | null
    currentlyWorking?: boolean | null
    organizationName?: string | null
    positionHeld?: string | null
  }

  export type ScholarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScholarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkshopSpeakersCreateInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    workshops?: WorkshopCreateNestedManyWithoutSpeakerInput
  }

  export type WorkshopSpeakersUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    workshops?: WorkshopUncheckedCreateNestedManyWithoutSpeakerInput
  }

  export type WorkshopSpeakersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    workshops?: WorkshopUpdateManyWithoutSpeakerNestedInput
  }

  export type WorkshopSpeakersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    workshops?: WorkshopUncheckedUpdateManyWithoutSpeakerNestedInput
  }

  export type WorkshopSpeakersCreateManyInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
  }

  export type WorkshopSpeakersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopSpeakersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type ChatSpeakersCreateInput = {
    id?: string
    name: string
    email: string
    chats?: ChatCreateNestedManyWithoutSpeakerInput
  }

  export type ChatSpeakersUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    chats?: ChatUncheckedCreateNestedManyWithoutSpeakerInput
  }

  export type ChatSpeakersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    chats?: ChatUpdateManyWithoutSpeakerNestedInput
  }

  export type ChatSpeakersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    chats?: ChatUncheckedUpdateManyWithoutSpeakerNestedInput
  }

  export type ChatSpeakersCreateManyInput = {
    id?: string
    name: string
    email: string
  }

  export type ChatSpeakersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ChatSpeakersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    scholar?: ScholarCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    scholar?: ScholarUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    scholar?: ScholarUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    scholar?: ScholarUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type WorkshopRelationFilter = {
    is?: WorkshopWhereInput
    isNot?: WorkshopWhereInput
  }

  export type WorkshopDatesCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    workshopId?: SortOrder
  }

  export type WorkshopDatesMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    workshopId?: SortOrder
  }

  export type WorkshopDatesMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    workshopId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type ChatDatesCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    chatId?: SortOrder
  }

  export type ChatDatesMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    chatId?: SortOrder
  }

  export type ChatDatesMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    chatId?: SortOrder
  }

  export type WorkshopTempDataCountOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type WorkshopTempDataMaxOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type WorkshopTempDataMinOrderByAggregateInput = {
    id?: SortOrder
    workshopId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type ChatsTempDataCountOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type ChatsTempDataMaxOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type ChatsTempDataMinOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    formLink?: SortOrder
    meetingLink?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    calendarID?: SortOrder
  }

  export type EnumPensumFilter = {
    equals?: Pensum
    in?: Enumerable<Pensum>
    notIn?: Enumerable<Pensum>
    not?: NestedEnumPensumFilter | Pensum
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumModalityFilter = {
    equals?: Modality
    in?: Enumerable<Modality>
    notIn?: Enumerable<Modality>
    not?: NestedEnumModalityFilter | Modality
  }

  export type EnumPlatformFilter = {
    equals?: Platform
    in?: Enumerable<Platform>
    notIn?: Enumerable<Platform>
    not?: NestedEnumPlatformFilter | Platform
  }

  export type EnumactivityStatusFilter = {
    equals?: activityStatus
    in?: Enumerable<activityStatus>
    notIn?: Enumerable<activityStatus>
    not?: NestedEnumactivityStatusFilter | activityStatus
  }

  export type WorkshopDatesListRelationFilter = {
    every?: WorkshopDatesWhereInput
    some?: WorkshopDatesWhereInput
    none?: WorkshopDatesWhereInput
  }

  export type WorkshopSpeakersListRelationFilter = {
    every?: WorkshopSpeakersWhereInput
    some?: WorkshopSpeakersWhereInput
    none?: WorkshopSpeakersWhereInput
  }

  export type WorkshopTempDataRelationFilter = {
    is?: WorkshopTempDataWhereInput | null
    isNot?: WorkshopTempDataWhereInput | null
  }

  export type WorkshopDatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkshopSpeakersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkshopCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    pensum?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    modality?: SortOrder
    platform?: SortOrder
    description?: SortOrder
    avaaYear?: SortOrder
    activityStatus?: SortOrder
  }

  export type WorkshopAvgOrderByAggregateInput = {
    spots?: SortOrder
    takenSpots?: SortOrder
  }

  export type WorkshopMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    pensum?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    modality?: SortOrder
    platform?: SortOrder
    description?: SortOrder
    avaaYear?: SortOrder
    activityStatus?: SortOrder
  }

  export type WorkshopMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    pensum?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    modality?: SortOrder
    platform?: SortOrder
    description?: SortOrder
    avaaYear?: SortOrder
    activityStatus?: SortOrder
  }

  export type WorkshopSumOrderByAggregateInput = {
    spots?: SortOrder
    takenSpots?: SortOrder
  }

  export type EnumPensumWithAggregatesFilter = {
    equals?: Pensum
    in?: Enumerable<Pensum>
    notIn?: Enumerable<Pensum>
    not?: NestedEnumPensumWithAggregatesFilter | Pensum
    _count?: NestedIntFilter
    _min?: NestedEnumPensumFilter
    _max?: NestedEnumPensumFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumModalityWithAggregatesFilter = {
    equals?: Modality
    in?: Enumerable<Modality>
    notIn?: Enumerable<Modality>
    not?: NestedEnumModalityWithAggregatesFilter | Modality
    _count?: NestedIntFilter
    _min?: NestedEnumModalityFilter
    _max?: NestedEnumModalityFilter
  }

  export type EnumPlatformWithAggregatesFilter = {
    equals?: Platform
    in?: Enumerable<Platform>
    notIn?: Enumerable<Platform>
    not?: NestedEnumPlatformWithAggregatesFilter | Platform
    _count?: NestedIntFilter
    _min?: NestedEnumPlatformFilter
    _max?: NestedEnumPlatformFilter
  }

  export type EnumactivityStatusWithAggregatesFilter = {
    equals?: activityStatus
    in?: Enumerable<activityStatus>
    notIn?: Enumerable<activityStatus>
    not?: NestedEnumactivityStatusWithAggregatesFilter | activityStatus
    _count?: NestedIntFilter
    _min?: NestedEnumactivityStatusFilter
    _max?: NestedEnumactivityStatusFilter
  }

  export type EnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type ChatDatesListRelationFilter = {
    every?: ChatDatesWhereInput
    some?: ChatDatesWhereInput
    none?: ChatDatesWhereInput
  }

  export type ChatSpeakersListRelationFilter = {
    every?: ChatSpeakersWhereInput
    some?: ChatSpeakersWhereInput
    none?: ChatSpeakersWhereInput
  }

  export type ChatsTempDataRelationFilter = {
    is?: ChatsTempDataWhereInput | null
    isNot?: ChatsTempDataWhereInput | null
  }

  export type ChatDatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSpeakersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    platform?: SortOrder
    modality?: SortOrder
    activityStatus?: SortOrder
    level?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    spots?: SortOrder
    takenSpots?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    platform?: SortOrder
    modality?: SortOrder
    activityStatus?: SortOrder
    level?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    spots?: SortOrder
    takenSpots?: SortOrder
    platform?: SortOrder
    modality?: SortOrder
    activityStatus?: SortOrder
    level?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    spots?: SortOrder
    takenSpots?: SortOrder
  }

  export type EnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type EnumRegionFilter = {
    equals?: Region
    in?: Enumerable<Region>
    notIn?: Enumerable<Region>
    not?: NestedEnumRegionFilter | Region
  }

  export type EnumScholarStatusFilter = {
    equals?: ScholarStatus
    in?: Enumerable<ScholarStatus>
    notIn?: Enumerable<ScholarStatus>
    not?: NestedEnumScholarStatusFilter | ScholarStatus
  }

  export type EnumScholarCanAssistFilter = {
    equals?: ScholarCanAssist
    in?: Enumerable<ScholarCanAssist>
    notIn?: Enumerable<ScholarCanAssist>
    not?: NestedEnumScholarCanAssistFilter | ScholarCanAssist
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ScholarCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    region?: SortOrder
    scholarStatus?: SortOrder
    canAssistToChats?: SortOrder
    canAssistToWorkshops?: SortOrder
    canAssistToVolunteers?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dni?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    localPhoneNumber?: SortOrder
    cellPhoneNumber?: SortOrder
    whatsAppNumber?: SortOrder
    stateOfOrigin?: SortOrder
    currentZone?: SortOrder
    housingType?: SortOrder
    email?: SortOrder
    collage?: SortOrder
    carrer?: SortOrder
    currentAcademicPeriod?: SortOrder
    academicYear?: SortOrder
    classModality?: SortOrder
    cvaLocacion?: SortOrder
    englishLevel?: SortOrder
    notStartedCvareason?: SortOrder
    avaaAdmissionYear?: SortOrder
    volunteeringOrganizationName?: SortOrder
    academicLoadCompleted?: SortOrder
    currentStatus?: SortOrder
    ceremonyDate?: SortOrder
    currentlyWorking?: SortOrder
    organizationName?: SortOrder
    positionHeld?: SortOrder
  }

  export type ScholarAvgOrderByAggregateInput = {
    academicYear?: SortOrder
    avaaAdmissionYear?: SortOrder
  }

  export type ScholarMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    region?: SortOrder
    scholarStatus?: SortOrder
    canAssistToChats?: SortOrder
    canAssistToWorkshops?: SortOrder
    canAssistToVolunteers?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dni?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    localPhoneNumber?: SortOrder
    cellPhoneNumber?: SortOrder
    whatsAppNumber?: SortOrder
    stateOfOrigin?: SortOrder
    currentZone?: SortOrder
    housingType?: SortOrder
    email?: SortOrder
    collage?: SortOrder
    carrer?: SortOrder
    currentAcademicPeriod?: SortOrder
    academicYear?: SortOrder
    classModality?: SortOrder
    cvaLocacion?: SortOrder
    englishLevel?: SortOrder
    notStartedCvareason?: SortOrder
    avaaAdmissionYear?: SortOrder
    volunteeringOrganizationName?: SortOrder
    academicLoadCompleted?: SortOrder
    currentStatus?: SortOrder
    ceremonyDate?: SortOrder
    currentlyWorking?: SortOrder
    organizationName?: SortOrder
    positionHeld?: SortOrder
  }

  export type ScholarMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    region?: SortOrder
    scholarStatus?: SortOrder
    canAssistToChats?: SortOrder
    canAssistToWorkshops?: SortOrder
    canAssistToVolunteers?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dni?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    localPhoneNumber?: SortOrder
    cellPhoneNumber?: SortOrder
    whatsAppNumber?: SortOrder
    stateOfOrigin?: SortOrder
    currentZone?: SortOrder
    housingType?: SortOrder
    email?: SortOrder
    collage?: SortOrder
    carrer?: SortOrder
    currentAcademicPeriod?: SortOrder
    academicYear?: SortOrder
    classModality?: SortOrder
    cvaLocacion?: SortOrder
    englishLevel?: SortOrder
    notStartedCvareason?: SortOrder
    avaaAdmissionYear?: SortOrder
    volunteeringOrganizationName?: SortOrder
    academicLoadCompleted?: SortOrder
    currentStatus?: SortOrder
    ceremonyDate?: SortOrder
    currentlyWorking?: SortOrder
    organizationName?: SortOrder
    positionHeld?: SortOrder
  }

  export type ScholarSumOrderByAggregateInput = {
    academicYear?: SortOrder
    avaaAdmissionYear?: SortOrder
  }

  export type EnumRegionWithAggregatesFilter = {
    equals?: Region
    in?: Enumerable<Region>
    notIn?: Enumerable<Region>
    not?: NestedEnumRegionWithAggregatesFilter | Region
    _count?: NestedIntFilter
    _min?: NestedEnumRegionFilter
    _max?: NestedEnumRegionFilter
  }

  export type EnumScholarStatusWithAggregatesFilter = {
    equals?: ScholarStatus
    in?: Enumerable<ScholarStatus>
    notIn?: Enumerable<ScholarStatus>
    not?: NestedEnumScholarStatusWithAggregatesFilter | ScholarStatus
    _count?: NestedIntFilter
    _min?: NestedEnumScholarStatusFilter
    _max?: NestedEnumScholarStatusFilter
  }

  export type EnumScholarCanAssistWithAggregatesFilter = {
    equals?: ScholarCanAssist
    in?: Enumerable<ScholarCanAssist>
    notIn?: Enumerable<ScholarCanAssist>
    not?: NestedEnumScholarCanAssistWithAggregatesFilter | ScholarCanAssist
    _count?: NestedIntFilter
    _min?: NestedEnumScholarCanAssistFilter
    _max?: NestedEnumScholarCanAssistFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type WorkshopListRelationFilter = {
    every?: WorkshopWhereInput
    some?: WorkshopWhereInput
    none?: WorkshopWhereInput
  }

  export type WorkshopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkshopSpeakersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
  }

  export type WorkshopSpeakersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
  }

  export type WorkshopSpeakersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSpeakersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type ChatSpeakersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type ChatSpeakersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ScholarRelationFilter = {
    is?: ScholarWhereInput | null
    isNot?: ScholarWhereInput | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type WorkshopCreateNestedOneWithoutDatesInput = {
    create?: XOR<WorkshopCreateWithoutDatesInput, WorkshopUncheckedCreateWithoutDatesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutDatesInput
    connect?: WorkshopWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WorkshopUpdateOneRequiredWithoutDatesNestedInput = {
    create?: XOR<WorkshopCreateWithoutDatesInput, WorkshopUncheckedCreateWithoutDatesInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutDatesInput
    upsert?: WorkshopUpsertWithoutDatesInput
    connect?: WorkshopWhereUniqueInput
    update?: XOR<WorkshopUpdateWithoutDatesInput, WorkshopUncheckedUpdateWithoutDatesInput>
  }

  export type ChatCreateNestedOneWithoutDatesInput = {
    create?: XOR<ChatCreateWithoutDatesInput, ChatUncheckedCreateWithoutDatesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutDatesInput
    connect?: ChatWhereUniqueInput
  }

  export type ChatUpdateOneRequiredWithoutDatesNestedInput = {
    create?: XOR<ChatCreateWithoutDatesInput, ChatUncheckedCreateWithoutDatesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutDatesInput
    upsert?: ChatUpsertWithoutDatesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutDatesInput, ChatUncheckedUpdateWithoutDatesInput>
  }

  export type WorkshopCreateNestedOneWithoutTempDataInput = {
    create?: XOR<WorkshopCreateWithoutTempDataInput, WorkshopUncheckedCreateWithoutTempDataInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutTempDataInput
    connect?: WorkshopWhereUniqueInput
  }

  export type WorkshopUpdateOneRequiredWithoutTempDataNestedInput = {
    create?: XOR<WorkshopCreateWithoutTempDataInput, WorkshopUncheckedCreateWithoutTempDataInput>
    connectOrCreate?: WorkshopCreateOrConnectWithoutTempDataInput
    upsert?: WorkshopUpsertWithoutTempDataInput
    connect?: WorkshopWhereUniqueInput
    update?: XOR<WorkshopUpdateWithoutTempDataInput, WorkshopUncheckedUpdateWithoutTempDataInput>
  }

  export type ChatCreateNestedOneWithoutTempDataInput = {
    create?: XOR<ChatCreateWithoutTempDataInput, ChatUncheckedCreateWithoutTempDataInput>
    connectOrCreate?: ChatCreateOrConnectWithoutTempDataInput
    connect?: ChatWhereUniqueInput
  }

  export type ChatUpdateOneRequiredWithoutTempDataNestedInput = {
    create?: XOR<ChatCreateWithoutTempDataInput, ChatUncheckedCreateWithoutTempDataInput>
    connectOrCreate?: ChatCreateOrConnectWithoutTempDataInput
    upsert?: ChatUpsertWithoutTempDataInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutTempDataInput, ChatUncheckedUpdateWithoutTempDataInput>
  }

  export type WorkshopDatesCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<Enumerable<WorkshopDatesCreateWithoutWorkshopInput>, Enumerable<WorkshopDatesUncheckedCreateWithoutWorkshopInput>>
    connectOrCreate?: Enumerable<WorkshopDatesCreateOrConnectWithoutWorkshopInput>
    createMany?: WorkshopDatesCreateManyWorkshopInputEnvelope
    connect?: Enumerable<WorkshopDatesWhereUniqueInput>
  }

  export type WorkshopSpeakersCreateNestedManyWithoutWorkshopsInput = {
    create?: XOR<Enumerable<WorkshopSpeakersCreateWithoutWorkshopsInput>, Enumerable<WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>>
    connectOrCreate?: Enumerable<WorkshopSpeakersCreateOrConnectWithoutWorkshopsInput>
    connect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
  }

  export type WorkshopTempDataCreateNestedOneWithoutWorkshopInput = {
    create?: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
    connectOrCreate?: WorkshopTempDataCreateOrConnectWithoutWorkshopInput
    connect?: WorkshopTempDataWhereUniqueInput
  }

  export type WorkshopDatesUncheckedCreateNestedManyWithoutWorkshopInput = {
    create?: XOR<Enumerable<WorkshopDatesCreateWithoutWorkshopInput>, Enumerable<WorkshopDatesUncheckedCreateWithoutWorkshopInput>>
    connectOrCreate?: Enumerable<WorkshopDatesCreateOrConnectWithoutWorkshopInput>
    createMany?: WorkshopDatesCreateManyWorkshopInputEnvelope
    connect?: Enumerable<WorkshopDatesWhereUniqueInput>
  }

  export type WorkshopSpeakersUncheckedCreateNestedManyWithoutWorkshopsInput = {
    create?: XOR<Enumerable<WorkshopSpeakersCreateWithoutWorkshopsInput>, Enumerable<WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>>
    connectOrCreate?: Enumerable<WorkshopSpeakersCreateOrConnectWithoutWorkshopsInput>
    connect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
  }

  export type WorkshopTempDataUncheckedCreateNestedOneWithoutWorkshopInput = {
    create?: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
    connectOrCreate?: WorkshopTempDataCreateOrConnectWithoutWorkshopInput
    connect?: WorkshopTempDataWhereUniqueInput
  }

  export type EnumPensumFieldUpdateOperationsInput = {
    set?: Pensum
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumModalityFieldUpdateOperationsInput = {
    set?: Modality
  }

  export type EnumPlatformFieldUpdateOperationsInput = {
    set?: Platform
  }

  export type EnumactivityStatusFieldUpdateOperationsInput = {
    set?: activityStatus
  }

  export type WorkshopDatesUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<Enumerable<WorkshopDatesCreateWithoutWorkshopInput>, Enumerable<WorkshopDatesUncheckedCreateWithoutWorkshopInput>>
    connectOrCreate?: Enumerable<WorkshopDatesCreateOrConnectWithoutWorkshopInput>
    upsert?: Enumerable<WorkshopDatesUpsertWithWhereUniqueWithoutWorkshopInput>
    createMany?: WorkshopDatesCreateManyWorkshopInputEnvelope
    set?: Enumerable<WorkshopDatesWhereUniqueInput>
    disconnect?: Enumerable<WorkshopDatesWhereUniqueInput>
    delete?: Enumerable<WorkshopDatesWhereUniqueInput>
    connect?: Enumerable<WorkshopDatesWhereUniqueInput>
    update?: Enumerable<WorkshopDatesUpdateWithWhereUniqueWithoutWorkshopInput>
    updateMany?: Enumerable<WorkshopDatesUpdateManyWithWhereWithoutWorkshopInput>
    deleteMany?: Enumerable<WorkshopDatesScalarWhereInput>
  }

  export type WorkshopSpeakersUpdateManyWithoutWorkshopsNestedInput = {
    create?: XOR<Enumerable<WorkshopSpeakersCreateWithoutWorkshopsInput>, Enumerable<WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>>
    connectOrCreate?: Enumerable<WorkshopSpeakersCreateOrConnectWithoutWorkshopsInput>
    upsert?: Enumerable<WorkshopSpeakersUpsertWithWhereUniqueWithoutWorkshopsInput>
    set?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    disconnect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    delete?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    connect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    update?: Enumerable<WorkshopSpeakersUpdateWithWhereUniqueWithoutWorkshopsInput>
    updateMany?: Enumerable<WorkshopSpeakersUpdateManyWithWhereWithoutWorkshopsInput>
    deleteMany?: Enumerable<WorkshopSpeakersScalarWhereInput>
  }

  export type WorkshopTempDataUpdateOneWithoutWorkshopNestedInput = {
    create?: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
    connectOrCreate?: WorkshopTempDataCreateOrConnectWithoutWorkshopInput
    upsert?: WorkshopTempDataUpsertWithoutWorkshopInput
    disconnect?: boolean
    delete?: boolean
    connect?: WorkshopTempDataWhereUniqueInput
    update?: XOR<WorkshopTempDataUpdateWithoutWorkshopInput, WorkshopTempDataUncheckedUpdateWithoutWorkshopInput>
  }

  export type WorkshopDatesUncheckedUpdateManyWithoutWorkshopNestedInput = {
    create?: XOR<Enumerable<WorkshopDatesCreateWithoutWorkshopInput>, Enumerable<WorkshopDatesUncheckedCreateWithoutWorkshopInput>>
    connectOrCreate?: Enumerable<WorkshopDatesCreateOrConnectWithoutWorkshopInput>
    upsert?: Enumerable<WorkshopDatesUpsertWithWhereUniqueWithoutWorkshopInput>
    createMany?: WorkshopDatesCreateManyWorkshopInputEnvelope
    set?: Enumerable<WorkshopDatesWhereUniqueInput>
    disconnect?: Enumerable<WorkshopDatesWhereUniqueInput>
    delete?: Enumerable<WorkshopDatesWhereUniqueInput>
    connect?: Enumerable<WorkshopDatesWhereUniqueInput>
    update?: Enumerable<WorkshopDatesUpdateWithWhereUniqueWithoutWorkshopInput>
    updateMany?: Enumerable<WorkshopDatesUpdateManyWithWhereWithoutWorkshopInput>
    deleteMany?: Enumerable<WorkshopDatesScalarWhereInput>
  }

  export type WorkshopSpeakersUncheckedUpdateManyWithoutWorkshopsNestedInput = {
    create?: XOR<Enumerable<WorkshopSpeakersCreateWithoutWorkshopsInput>, Enumerable<WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>>
    connectOrCreate?: Enumerable<WorkshopSpeakersCreateOrConnectWithoutWorkshopsInput>
    upsert?: Enumerable<WorkshopSpeakersUpsertWithWhereUniqueWithoutWorkshopsInput>
    set?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    disconnect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    delete?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    connect?: Enumerable<WorkshopSpeakersWhereUniqueInput>
    update?: Enumerable<WorkshopSpeakersUpdateWithWhereUniqueWithoutWorkshopsInput>
    updateMany?: Enumerable<WorkshopSpeakersUpdateManyWithWhereWithoutWorkshopsInput>
    deleteMany?: Enumerable<WorkshopSpeakersScalarWhereInput>
  }

  export type WorkshopTempDataUncheckedUpdateOneWithoutWorkshopNestedInput = {
    create?: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
    connectOrCreate?: WorkshopTempDataCreateOrConnectWithoutWorkshopInput
    upsert?: WorkshopTempDataUpsertWithoutWorkshopInput
    disconnect?: boolean
    delete?: boolean
    connect?: WorkshopTempDataWhereUniqueInput
    update?: XOR<WorkshopTempDataUpdateWithoutWorkshopInput, WorkshopTempDataUncheckedUpdateWithoutWorkshopInput>
  }

  export type ChatDatesCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<ChatDatesCreateWithoutChatInput>, Enumerable<ChatDatesUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatDatesCreateOrConnectWithoutChatInput>
    createMany?: ChatDatesCreateManyChatInputEnvelope
    connect?: Enumerable<ChatDatesWhereUniqueInput>
  }

  export type ChatSpeakersCreateNestedManyWithoutChatsInput = {
    create?: XOR<Enumerable<ChatSpeakersCreateWithoutChatsInput>, Enumerable<ChatSpeakersUncheckedCreateWithoutChatsInput>>
    connectOrCreate?: Enumerable<ChatSpeakersCreateOrConnectWithoutChatsInput>
    connect?: Enumerable<ChatSpeakersWhereUniqueInput>
  }

  export type ChatsTempDataCreateNestedOneWithoutChatInput = {
    create?: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
    connectOrCreate?: ChatsTempDataCreateOrConnectWithoutChatInput
    connect?: ChatsTempDataWhereUniqueInput
  }

  export type ChatDatesUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<ChatDatesCreateWithoutChatInput>, Enumerable<ChatDatesUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatDatesCreateOrConnectWithoutChatInput>
    createMany?: ChatDatesCreateManyChatInputEnvelope
    connect?: Enumerable<ChatDatesWhereUniqueInput>
  }

  export type ChatSpeakersUncheckedCreateNestedManyWithoutChatsInput = {
    create?: XOR<Enumerable<ChatSpeakersCreateWithoutChatsInput>, Enumerable<ChatSpeakersUncheckedCreateWithoutChatsInput>>
    connectOrCreate?: Enumerable<ChatSpeakersCreateOrConnectWithoutChatsInput>
    connect?: Enumerable<ChatSpeakersWhereUniqueInput>
  }

  export type ChatsTempDataUncheckedCreateNestedOneWithoutChatInput = {
    create?: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
    connectOrCreate?: ChatsTempDataCreateOrConnectWithoutChatInput
    connect?: ChatsTempDataWhereUniqueInput
  }

  export type EnumLevelFieldUpdateOperationsInput = {
    set?: Level
  }

  export type ChatDatesUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<ChatDatesCreateWithoutChatInput>, Enumerable<ChatDatesUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatDatesCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<ChatDatesUpsertWithWhereUniqueWithoutChatInput>
    createMany?: ChatDatesCreateManyChatInputEnvelope
    set?: Enumerable<ChatDatesWhereUniqueInput>
    disconnect?: Enumerable<ChatDatesWhereUniqueInput>
    delete?: Enumerable<ChatDatesWhereUniqueInput>
    connect?: Enumerable<ChatDatesWhereUniqueInput>
    update?: Enumerable<ChatDatesUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<ChatDatesUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<ChatDatesScalarWhereInput>
  }

  export type ChatSpeakersUpdateManyWithoutChatsNestedInput = {
    create?: XOR<Enumerable<ChatSpeakersCreateWithoutChatsInput>, Enumerable<ChatSpeakersUncheckedCreateWithoutChatsInput>>
    connectOrCreate?: Enumerable<ChatSpeakersCreateOrConnectWithoutChatsInput>
    upsert?: Enumerable<ChatSpeakersUpsertWithWhereUniqueWithoutChatsInput>
    set?: Enumerable<ChatSpeakersWhereUniqueInput>
    disconnect?: Enumerable<ChatSpeakersWhereUniqueInput>
    delete?: Enumerable<ChatSpeakersWhereUniqueInput>
    connect?: Enumerable<ChatSpeakersWhereUniqueInput>
    update?: Enumerable<ChatSpeakersUpdateWithWhereUniqueWithoutChatsInput>
    updateMany?: Enumerable<ChatSpeakersUpdateManyWithWhereWithoutChatsInput>
    deleteMany?: Enumerable<ChatSpeakersScalarWhereInput>
  }

  export type ChatsTempDataUpdateOneWithoutChatNestedInput = {
    create?: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
    connectOrCreate?: ChatsTempDataCreateOrConnectWithoutChatInput
    upsert?: ChatsTempDataUpsertWithoutChatInput
    disconnect?: boolean
    delete?: boolean
    connect?: ChatsTempDataWhereUniqueInput
    update?: XOR<ChatsTempDataUpdateWithoutChatInput, ChatsTempDataUncheckedUpdateWithoutChatInput>
  }

  export type ChatDatesUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<ChatDatesCreateWithoutChatInput>, Enumerable<ChatDatesUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<ChatDatesCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<ChatDatesUpsertWithWhereUniqueWithoutChatInput>
    createMany?: ChatDatesCreateManyChatInputEnvelope
    set?: Enumerable<ChatDatesWhereUniqueInput>
    disconnect?: Enumerable<ChatDatesWhereUniqueInput>
    delete?: Enumerable<ChatDatesWhereUniqueInput>
    connect?: Enumerable<ChatDatesWhereUniqueInput>
    update?: Enumerable<ChatDatesUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<ChatDatesUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<ChatDatesScalarWhereInput>
  }

  export type ChatSpeakersUncheckedUpdateManyWithoutChatsNestedInput = {
    create?: XOR<Enumerable<ChatSpeakersCreateWithoutChatsInput>, Enumerable<ChatSpeakersUncheckedCreateWithoutChatsInput>>
    connectOrCreate?: Enumerable<ChatSpeakersCreateOrConnectWithoutChatsInput>
    upsert?: Enumerable<ChatSpeakersUpsertWithWhereUniqueWithoutChatsInput>
    set?: Enumerable<ChatSpeakersWhereUniqueInput>
    disconnect?: Enumerable<ChatSpeakersWhereUniqueInput>
    delete?: Enumerable<ChatSpeakersWhereUniqueInput>
    connect?: Enumerable<ChatSpeakersWhereUniqueInput>
    update?: Enumerable<ChatSpeakersUpdateWithWhereUniqueWithoutChatsInput>
    updateMany?: Enumerable<ChatSpeakersUpdateManyWithWhereWithoutChatsInput>
    deleteMany?: Enumerable<ChatSpeakersScalarWhereInput>
  }

  export type ChatsTempDataUncheckedUpdateOneWithoutChatNestedInput = {
    create?: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
    connectOrCreate?: ChatsTempDataCreateOrConnectWithoutChatInput
    upsert?: ChatsTempDataUpsertWithoutChatInput
    disconnect?: boolean
    delete?: boolean
    connect?: ChatsTempDataWhereUniqueInput
    update?: XOR<ChatsTempDataUpdateWithoutChatInput, ChatsTempDataUncheckedUpdateWithoutChatInput>
  }

  export type UserCreateNestedOneWithoutScholarInput = {
    create?: XOR<UserCreateWithoutScholarInput, UserUncheckedCreateWithoutScholarInput>
    connectOrCreate?: UserCreateOrConnectWithoutScholarInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRegionFieldUpdateOperationsInput = {
    set?: Region
  }

  export type EnumScholarStatusFieldUpdateOperationsInput = {
    set?: ScholarStatus
  }

  export type EnumScholarCanAssistFieldUpdateOperationsInput = {
    set?: ScholarCanAssist
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutScholarNestedInput = {
    create?: XOR<UserCreateWithoutScholarInput, UserUncheckedCreateWithoutScholarInput>
    connectOrCreate?: UserCreateOrConnectWithoutScholarInput
    upsert?: UserUpsertWithoutScholarInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutScholarInput, UserUncheckedUpdateWithoutScholarInput>
  }

  export type WorkshopCreateNestedManyWithoutSpeakerInput = {
    create?: XOR<Enumerable<WorkshopCreateWithoutSpeakerInput>, Enumerable<WorkshopUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<WorkshopCreateOrConnectWithoutSpeakerInput>
    connect?: Enumerable<WorkshopWhereUniqueInput>
  }

  export type WorkshopUncheckedCreateNestedManyWithoutSpeakerInput = {
    create?: XOR<Enumerable<WorkshopCreateWithoutSpeakerInput>, Enumerable<WorkshopUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<WorkshopCreateOrConnectWithoutSpeakerInput>
    connect?: Enumerable<WorkshopWhereUniqueInput>
  }

  export type WorkshopUpdateManyWithoutSpeakerNestedInput = {
    create?: XOR<Enumerable<WorkshopCreateWithoutSpeakerInput>, Enumerable<WorkshopUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<WorkshopCreateOrConnectWithoutSpeakerInput>
    upsert?: Enumerable<WorkshopUpsertWithWhereUniqueWithoutSpeakerInput>
    set?: Enumerable<WorkshopWhereUniqueInput>
    disconnect?: Enumerable<WorkshopWhereUniqueInput>
    delete?: Enumerable<WorkshopWhereUniqueInput>
    connect?: Enumerable<WorkshopWhereUniqueInput>
    update?: Enumerable<WorkshopUpdateWithWhereUniqueWithoutSpeakerInput>
    updateMany?: Enumerable<WorkshopUpdateManyWithWhereWithoutSpeakerInput>
    deleteMany?: Enumerable<WorkshopScalarWhereInput>
  }

  export type WorkshopUncheckedUpdateManyWithoutSpeakerNestedInput = {
    create?: XOR<Enumerable<WorkshopCreateWithoutSpeakerInput>, Enumerable<WorkshopUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<WorkshopCreateOrConnectWithoutSpeakerInput>
    upsert?: Enumerable<WorkshopUpsertWithWhereUniqueWithoutSpeakerInput>
    set?: Enumerable<WorkshopWhereUniqueInput>
    disconnect?: Enumerable<WorkshopWhereUniqueInput>
    delete?: Enumerable<WorkshopWhereUniqueInput>
    connect?: Enumerable<WorkshopWhereUniqueInput>
    update?: Enumerable<WorkshopUpdateWithWhereUniqueWithoutSpeakerInput>
    updateMany?: Enumerable<WorkshopUpdateManyWithWhereWithoutSpeakerInput>
    deleteMany?: Enumerable<WorkshopScalarWhereInput>
  }

  export type ChatCreateNestedManyWithoutSpeakerInput = {
    create?: XOR<Enumerable<ChatCreateWithoutSpeakerInput>, Enumerable<ChatUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutSpeakerInput>
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type ChatUncheckedCreateNestedManyWithoutSpeakerInput = {
    create?: XOR<Enumerable<ChatCreateWithoutSpeakerInput>, Enumerable<ChatUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutSpeakerInput>
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type ChatUpdateManyWithoutSpeakerNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutSpeakerInput>, Enumerable<ChatUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutSpeakerInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutSpeakerInput>
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutSpeakerInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutSpeakerInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type ChatUncheckedUpdateManyWithoutSpeakerNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutSpeakerInput>, Enumerable<ChatUncheckedCreateWithoutSpeakerInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutSpeakerInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutSpeakerInput>
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutSpeakerInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutSpeakerInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ScholarCreateNestedOneWithoutUserInput = {
    create?: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
    connectOrCreate?: ScholarCreateOrConnectWithoutUserInput
    connect?: ScholarWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ScholarUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
    connectOrCreate?: ScholarCreateOrConnectWithoutUserInput
    connect?: ScholarWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ScholarUpdateOneWithoutUserNestedInput = {
    create?: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
    connectOrCreate?: ScholarCreateOrConnectWithoutUserInput
    upsert?: ScholarUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ScholarWhereUniqueInput
    update?: XOR<ScholarUpdateWithoutUserInput, ScholarUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ScholarUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
    connectOrCreate?: ScholarCreateOrConnectWithoutUserInput
    upsert?: ScholarUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ScholarWhereUniqueInput
    update?: XOR<ScholarUpdateWithoutUserInput, ScholarUncheckedUpdateWithoutUserInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumPensumFilter = {
    equals?: Pensum
    in?: Enumerable<Pensum>
    notIn?: Enumerable<Pensum>
    not?: NestedEnumPensumFilter | Pensum
  }

  export type NestedEnumModalityFilter = {
    equals?: Modality
    in?: Enumerable<Modality>
    notIn?: Enumerable<Modality>
    not?: NestedEnumModalityFilter | Modality
  }

  export type NestedEnumPlatformFilter = {
    equals?: Platform
    in?: Enumerable<Platform>
    notIn?: Enumerable<Platform>
    not?: NestedEnumPlatformFilter | Platform
  }

  export type NestedEnumactivityStatusFilter = {
    equals?: activityStatus
    in?: Enumerable<activityStatus>
    notIn?: Enumerable<activityStatus>
    not?: NestedEnumactivityStatusFilter | activityStatus
  }

  export type NestedEnumPensumWithAggregatesFilter = {
    equals?: Pensum
    in?: Enumerable<Pensum>
    notIn?: Enumerable<Pensum>
    not?: NestedEnumPensumWithAggregatesFilter | Pensum
    _count?: NestedIntFilter
    _min?: NestedEnumPensumFilter
    _max?: NestedEnumPensumFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumModalityWithAggregatesFilter = {
    equals?: Modality
    in?: Enumerable<Modality>
    notIn?: Enumerable<Modality>
    not?: NestedEnumModalityWithAggregatesFilter | Modality
    _count?: NestedIntFilter
    _min?: NestedEnumModalityFilter
    _max?: NestedEnumModalityFilter
  }

  export type NestedEnumPlatformWithAggregatesFilter = {
    equals?: Platform
    in?: Enumerable<Platform>
    notIn?: Enumerable<Platform>
    not?: NestedEnumPlatformWithAggregatesFilter | Platform
    _count?: NestedIntFilter
    _min?: NestedEnumPlatformFilter
    _max?: NestedEnumPlatformFilter
  }

  export type NestedEnumactivityStatusWithAggregatesFilter = {
    equals?: activityStatus
    in?: Enumerable<activityStatus>
    notIn?: Enumerable<activityStatus>
    not?: NestedEnumactivityStatusWithAggregatesFilter | activityStatus
    _count?: NestedIntFilter
    _min?: NestedEnumactivityStatusFilter
    _max?: NestedEnumactivityStatusFilter
  }

  export type NestedEnumLevelFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelFilter | Level
  }

  export type NestedEnumLevelWithAggregatesFilter = {
    equals?: Level
    in?: Enumerable<Level>
    notIn?: Enumerable<Level>
    not?: NestedEnumLevelWithAggregatesFilter | Level
    _count?: NestedIntFilter
    _min?: NestedEnumLevelFilter
    _max?: NestedEnumLevelFilter
  }

  export type NestedEnumRegionFilter = {
    equals?: Region
    in?: Enumerable<Region>
    notIn?: Enumerable<Region>
    not?: NestedEnumRegionFilter | Region
  }

  export type NestedEnumScholarStatusFilter = {
    equals?: ScholarStatus
    in?: Enumerable<ScholarStatus>
    notIn?: Enumerable<ScholarStatus>
    not?: NestedEnumScholarStatusFilter | ScholarStatus
  }

  export type NestedEnumScholarCanAssistFilter = {
    equals?: ScholarCanAssist
    in?: Enumerable<ScholarCanAssist>
    notIn?: Enumerable<ScholarCanAssist>
    not?: NestedEnumScholarCanAssistFilter | ScholarCanAssist
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedEnumRegionWithAggregatesFilter = {
    equals?: Region
    in?: Enumerable<Region>
    notIn?: Enumerable<Region>
    not?: NestedEnumRegionWithAggregatesFilter | Region
    _count?: NestedIntFilter
    _min?: NestedEnumRegionFilter
    _max?: NestedEnumRegionFilter
  }

  export type NestedEnumScholarStatusWithAggregatesFilter = {
    equals?: ScholarStatus
    in?: Enumerable<ScholarStatus>
    notIn?: Enumerable<ScholarStatus>
    not?: NestedEnumScholarStatusWithAggregatesFilter | ScholarStatus
    _count?: NestedIntFilter
    _min?: NestedEnumScholarStatusFilter
    _max?: NestedEnumScholarStatusFilter
  }

  export type NestedEnumScholarCanAssistWithAggregatesFilter = {
    equals?: ScholarCanAssist
    in?: Enumerable<ScholarCanAssist>
    notIn?: Enumerable<ScholarCanAssist>
    not?: NestedEnumScholarCanAssistWithAggregatesFilter | ScholarCanAssist
    _count?: NestedIntFilter
    _min?: NestedEnumScholarCanAssistFilter
    _max?: NestedEnumScholarCanAssistFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type WorkshopCreateWithoutDatesInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    speaker?: WorkshopSpeakersCreateNestedManyWithoutWorkshopsInput
    tempData?: WorkshopTempDataCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutDatesInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    speaker?: WorkshopSpeakersUncheckedCreateNestedManyWithoutWorkshopsInput
    tempData?: WorkshopTempDataUncheckedCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutDatesInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutDatesInput, WorkshopUncheckedCreateWithoutDatesInput>
  }

  export type WorkshopUpsertWithoutDatesInput = {
    update: XOR<WorkshopUpdateWithoutDatesInput, WorkshopUncheckedUpdateWithoutDatesInput>
    create: XOR<WorkshopCreateWithoutDatesInput, WorkshopUncheckedCreateWithoutDatesInput>
  }

  export type WorkshopUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    speaker?: WorkshopSpeakersUpdateManyWithoutWorkshopsNestedInput
    tempData?: WorkshopTempDataUpdateOneWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    speaker?: WorkshopSpeakersUncheckedUpdateManyWithoutWorkshopsNestedInput
    tempData?: WorkshopTempDataUncheckedUpdateOneWithoutWorkshopNestedInput
  }

  export type ChatCreateWithoutDatesInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    speaker?: ChatSpeakersCreateNestedManyWithoutChatsInput
    tempData?: ChatsTempDataCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutDatesInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    speaker?: ChatSpeakersUncheckedCreateNestedManyWithoutChatsInput
    tempData?: ChatsTempDataUncheckedCreateNestedOneWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutDatesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutDatesInput, ChatUncheckedCreateWithoutDatesInput>
  }

  export type ChatUpsertWithoutDatesInput = {
    update: XOR<ChatUpdateWithoutDatesInput, ChatUncheckedUpdateWithoutDatesInput>
    create: XOR<ChatCreateWithoutDatesInput, ChatUncheckedCreateWithoutDatesInput>
  }

  export type ChatUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    speaker?: ChatSpeakersUpdateManyWithoutChatsNestedInput
    tempData?: ChatsTempDataUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    speaker?: ChatSpeakersUncheckedUpdateManyWithoutChatsNestedInput
    tempData?: ChatsTempDataUncheckedUpdateOneWithoutChatNestedInput
  }

  export type WorkshopCreateWithoutTempDataInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesCreateNestedManyWithoutWorkshopInput
    speaker?: WorkshopSpeakersCreateNestedManyWithoutWorkshopsInput
  }

  export type WorkshopUncheckedCreateWithoutTempDataInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesUncheckedCreateNestedManyWithoutWorkshopInput
    speaker?: WorkshopSpeakersUncheckedCreateNestedManyWithoutWorkshopsInput
  }

  export type WorkshopCreateOrConnectWithoutTempDataInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutTempDataInput, WorkshopUncheckedCreateWithoutTempDataInput>
  }

  export type WorkshopUpsertWithoutTempDataInput = {
    update: XOR<WorkshopUpdateWithoutTempDataInput, WorkshopUncheckedUpdateWithoutTempDataInput>
    create: XOR<WorkshopCreateWithoutTempDataInput, WorkshopUncheckedCreateWithoutTempDataInput>
  }

  export type WorkshopUpdateWithoutTempDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUpdateManyWithoutWorkshopNestedInput
    speaker?: WorkshopSpeakersUpdateManyWithoutWorkshopsNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutTempDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUncheckedUpdateManyWithoutWorkshopNestedInput
    speaker?: WorkshopSpeakersUncheckedUpdateManyWithoutWorkshopsNestedInput
  }

  export type ChatCreateWithoutTempDataInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesCreateNestedManyWithoutChatInput
    speaker?: ChatSpeakersCreateNestedManyWithoutChatsInput
  }

  export type ChatUncheckedCreateWithoutTempDataInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesUncheckedCreateNestedManyWithoutChatInput
    speaker?: ChatSpeakersUncheckedCreateNestedManyWithoutChatsInput
  }

  export type ChatCreateOrConnectWithoutTempDataInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutTempDataInput, ChatUncheckedCreateWithoutTempDataInput>
  }

  export type ChatUpsertWithoutTempDataInput = {
    update: XOR<ChatUpdateWithoutTempDataInput, ChatUncheckedUpdateWithoutTempDataInput>
    create: XOR<ChatCreateWithoutTempDataInput, ChatUncheckedCreateWithoutTempDataInput>
  }

  export type ChatUpdateWithoutTempDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUpdateManyWithoutChatNestedInput
    speaker?: ChatSpeakersUpdateManyWithoutChatsNestedInput
  }

  export type ChatUncheckedUpdateWithoutTempDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUncheckedUpdateManyWithoutChatNestedInput
    speaker?: ChatSpeakersUncheckedUpdateManyWithoutChatsNestedInput
  }

  export type WorkshopDatesCreateWithoutWorkshopInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type WorkshopDatesUncheckedCreateWithoutWorkshopInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type WorkshopDatesCreateOrConnectWithoutWorkshopInput = {
    where: WorkshopDatesWhereUniqueInput
    create: XOR<WorkshopDatesCreateWithoutWorkshopInput, WorkshopDatesUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopDatesCreateManyWorkshopInputEnvelope = {
    data: Enumerable<WorkshopDatesCreateManyWorkshopInput>
    skipDuplicates?: boolean
  }

  export type WorkshopSpeakersCreateWithoutWorkshopsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
  }

  export type WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
  }

  export type WorkshopSpeakersCreateOrConnectWithoutWorkshopsInput = {
    where: WorkshopSpeakersWhereUniqueInput
    create: XOR<WorkshopSpeakersCreateWithoutWorkshopsInput, WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>
  }

  export type WorkshopTempDataCreateWithoutWorkshopInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type WorkshopTempDataUncheckedCreateWithoutWorkshopInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type WorkshopTempDataCreateOrConnectWithoutWorkshopInput = {
    where: WorkshopTempDataWhereUniqueInput
    create: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopDatesUpsertWithWhereUniqueWithoutWorkshopInput = {
    where: WorkshopDatesWhereUniqueInput
    update: XOR<WorkshopDatesUpdateWithoutWorkshopInput, WorkshopDatesUncheckedUpdateWithoutWorkshopInput>
    create: XOR<WorkshopDatesCreateWithoutWorkshopInput, WorkshopDatesUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopDatesUpdateWithWhereUniqueWithoutWorkshopInput = {
    where: WorkshopDatesWhereUniqueInput
    data: XOR<WorkshopDatesUpdateWithoutWorkshopInput, WorkshopDatesUncheckedUpdateWithoutWorkshopInput>
  }

  export type WorkshopDatesUpdateManyWithWhereWithoutWorkshopInput = {
    where: WorkshopDatesScalarWhereInput
    data: XOR<WorkshopDatesUpdateManyMutationInput, WorkshopDatesUncheckedUpdateManyWithoutDatesInput>
  }

  export type WorkshopDatesScalarWhereInput = {
    AND?: Enumerable<WorkshopDatesScalarWhereInput>
    OR?: Enumerable<WorkshopDatesScalarWhereInput>
    NOT?: Enumerable<WorkshopDatesScalarWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    workshopId?: StringFilter | string
  }

  export type WorkshopSpeakersUpsertWithWhereUniqueWithoutWorkshopsInput = {
    where: WorkshopSpeakersWhereUniqueInput
    update: XOR<WorkshopSpeakersUpdateWithoutWorkshopsInput, WorkshopSpeakersUncheckedUpdateWithoutWorkshopsInput>
    create: XOR<WorkshopSpeakersCreateWithoutWorkshopsInput, WorkshopSpeakersUncheckedCreateWithoutWorkshopsInput>
  }

  export type WorkshopSpeakersUpdateWithWhereUniqueWithoutWorkshopsInput = {
    where: WorkshopSpeakersWhereUniqueInput
    data: XOR<WorkshopSpeakersUpdateWithoutWorkshopsInput, WorkshopSpeakersUncheckedUpdateWithoutWorkshopsInput>
  }

  export type WorkshopSpeakersUpdateManyWithWhereWithoutWorkshopsInput = {
    where: WorkshopSpeakersScalarWhereInput
    data: XOR<WorkshopSpeakersUpdateManyMutationInput, WorkshopSpeakersUncheckedUpdateManyWithoutSpeakerInput>
  }

  export type WorkshopSpeakersScalarWhereInput = {
    AND?: Enumerable<WorkshopSpeakersScalarWhereInput>
    OR?: Enumerable<WorkshopSpeakersScalarWhereInput>
    NOT?: Enumerable<WorkshopSpeakersScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    phoneNumber?: StringFilter | string
  }

  export type WorkshopTempDataUpsertWithoutWorkshopInput = {
    update: XOR<WorkshopTempDataUpdateWithoutWorkshopInput, WorkshopTempDataUncheckedUpdateWithoutWorkshopInput>
    create: XOR<WorkshopTempDataCreateWithoutWorkshopInput, WorkshopTempDataUncheckedCreateWithoutWorkshopInput>
  }

  export type WorkshopTempDataUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopTempDataUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type ChatDatesCreateWithoutChatInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type ChatDatesUncheckedCreateWithoutChatInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type ChatDatesCreateOrConnectWithoutChatInput = {
    where: ChatDatesWhereUniqueInput
    create: XOR<ChatDatesCreateWithoutChatInput, ChatDatesUncheckedCreateWithoutChatInput>
  }

  export type ChatDatesCreateManyChatInputEnvelope = {
    data: Enumerable<ChatDatesCreateManyChatInput>
    skipDuplicates?: boolean
  }

  export type ChatSpeakersCreateWithoutChatsInput = {
    id?: string
    name: string
    email: string
  }

  export type ChatSpeakersUncheckedCreateWithoutChatsInput = {
    id?: string
    name: string
    email: string
  }

  export type ChatSpeakersCreateOrConnectWithoutChatsInput = {
    where: ChatSpeakersWhereUniqueInput
    create: XOR<ChatSpeakersCreateWithoutChatsInput, ChatSpeakersUncheckedCreateWithoutChatsInput>
  }

  export type ChatsTempDataCreateWithoutChatInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type ChatsTempDataUncheckedCreateWithoutChatInput = {
    id?: string
    formLink: string
    meetingLink: string
    meetingId: string
    meetingPassword: string
    calendarID: string
  }

  export type ChatsTempDataCreateOrConnectWithoutChatInput = {
    where: ChatsTempDataWhereUniqueInput
    create: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
  }

  export type ChatDatesUpsertWithWhereUniqueWithoutChatInput = {
    where: ChatDatesWhereUniqueInput
    update: XOR<ChatDatesUpdateWithoutChatInput, ChatDatesUncheckedUpdateWithoutChatInput>
    create: XOR<ChatDatesCreateWithoutChatInput, ChatDatesUncheckedCreateWithoutChatInput>
  }

  export type ChatDatesUpdateWithWhereUniqueWithoutChatInput = {
    where: ChatDatesWhereUniqueInput
    data: XOR<ChatDatesUpdateWithoutChatInput, ChatDatesUncheckedUpdateWithoutChatInput>
  }

  export type ChatDatesUpdateManyWithWhereWithoutChatInput = {
    where: ChatDatesScalarWhereInput
    data: XOR<ChatDatesUpdateManyMutationInput, ChatDatesUncheckedUpdateManyWithoutDatesInput>
  }

  export type ChatDatesScalarWhereInput = {
    AND?: Enumerable<ChatDatesScalarWhereInput>
    OR?: Enumerable<ChatDatesScalarWhereInput>
    NOT?: Enumerable<ChatDatesScalarWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    chatId?: StringFilter | string
  }

  export type ChatSpeakersUpsertWithWhereUniqueWithoutChatsInput = {
    where: ChatSpeakersWhereUniqueInput
    update: XOR<ChatSpeakersUpdateWithoutChatsInput, ChatSpeakersUncheckedUpdateWithoutChatsInput>
    create: XOR<ChatSpeakersCreateWithoutChatsInput, ChatSpeakersUncheckedCreateWithoutChatsInput>
  }

  export type ChatSpeakersUpdateWithWhereUniqueWithoutChatsInput = {
    where: ChatSpeakersWhereUniqueInput
    data: XOR<ChatSpeakersUpdateWithoutChatsInput, ChatSpeakersUncheckedUpdateWithoutChatsInput>
  }

  export type ChatSpeakersUpdateManyWithWhereWithoutChatsInput = {
    where: ChatSpeakersScalarWhereInput
    data: XOR<ChatSpeakersUpdateManyMutationInput, ChatSpeakersUncheckedUpdateManyWithoutSpeakerInput>
  }

  export type ChatSpeakersScalarWhereInput = {
    AND?: Enumerable<ChatSpeakersScalarWhereInput>
    OR?: Enumerable<ChatSpeakersScalarWhereInput>
    NOT?: Enumerable<ChatSpeakersScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
  }

  export type ChatsTempDataUpsertWithoutChatInput = {
    update: XOR<ChatsTempDataUpdateWithoutChatInput, ChatsTempDataUncheckedUpdateWithoutChatInput>
    create: XOR<ChatsTempDataCreateWithoutChatInput, ChatsTempDataUncheckedCreateWithoutChatInput>
  }

  export type ChatsTempDataUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type ChatsTempDataUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    formLink?: StringFieldUpdateOperationsInput | string
    meetingLink?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    meetingPassword?: StringFieldUpdateOperationsInput | string
    calendarID?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutScholarInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScholarInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScholarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScholarInput, UserUncheckedCreateWithoutScholarInput>
  }

  export type UserUpsertWithoutScholarInput = {
    update: XOR<UserUpdateWithoutScholarInput, UserUncheckedUpdateWithoutScholarInput>
    create: XOR<UserCreateWithoutScholarInput, UserUncheckedCreateWithoutScholarInput>
  }

  export type UserUpdateWithoutScholarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScholarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkshopCreateWithoutSpeakerInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesCreateNestedManyWithoutWorkshopInput
    tempData?: WorkshopTempDataCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopUncheckedCreateWithoutSpeakerInput = {
    id?: string
    title: string
    pensum: Pensum
    spots: number
    takenSpots: number
    modality: Modality
    platform: Platform
    description: string
    avaaYear: string
    activityStatus: activityStatus
    dates?: WorkshopDatesUncheckedCreateNestedManyWithoutWorkshopInput
    tempData?: WorkshopTempDataUncheckedCreateNestedOneWithoutWorkshopInput
  }

  export type WorkshopCreateOrConnectWithoutSpeakerInput = {
    where: WorkshopWhereUniqueInput
    create: XOR<WorkshopCreateWithoutSpeakerInput, WorkshopUncheckedCreateWithoutSpeakerInput>
  }

  export type WorkshopUpsertWithWhereUniqueWithoutSpeakerInput = {
    where: WorkshopWhereUniqueInput
    update: XOR<WorkshopUpdateWithoutSpeakerInput, WorkshopUncheckedUpdateWithoutSpeakerInput>
    create: XOR<WorkshopCreateWithoutSpeakerInput, WorkshopUncheckedCreateWithoutSpeakerInput>
  }

  export type WorkshopUpdateWithWhereUniqueWithoutSpeakerInput = {
    where: WorkshopWhereUniqueInput
    data: XOR<WorkshopUpdateWithoutSpeakerInput, WorkshopUncheckedUpdateWithoutSpeakerInput>
  }

  export type WorkshopUpdateManyWithWhereWithoutSpeakerInput = {
    where: WorkshopScalarWhereInput
    data: XOR<WorkshopUpdateManyMutationInput, WorkshopUncheckedUpdateManyWithoutWorkshopsInput>
  }

  export type WorkshopScalarWhereInput = {
    AND?: Enumerable<WorkshopScalarWhereInput>
    OR?: Enumerable<WorkshopScalarWhereInput>
    NOT?: Enumerable<WorkshopScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    pensum?: EnumPensumFilter | Pensum
    spots?: IntFilter | number
    takenSpots?: IntFilter | number
    modality?: EnumModalityFilter | Modality
    platform?: EnumPlatformFilter | Platform
    description?: StringFilter | string
    avaaYear?: StringFilter | string
    activityStatus?: EnumactivityStatusFilter | activityStatus
  }

  export type ChatCreateWithoutSpeakerInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesCreateNestedManyWithoutChatInput
    tempData?: ChatsTempDataCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutSpeakerInput = {
    id?: string
    title: string
    spots: number
    takenSpots: number
    platform: Platform
    modality: Modality
    activityStatus: activityStatus
    level: Level
    dates?: ChatDatesUncheckedCreateNestedManyWithoutChatInput
    tempData?: ChatsTempDataUncheckedCreateNestedOneWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutSpeakerInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutSpeakerInput, ChatUncheckedCreateWithoutSpeakerInput>
  }

  export type ChatUpsertWithWhereUniqueWithoutSpeakerInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutSpeakerInput, ChatUncheckedUpdateWithoutSpeakerInput>
    create: XOR<ChatCreateWithoutSpeakerInput, ChatUncheckedCreateWithoutSpeakerInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutSpeakerInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutSpeakerInput, ChatUncheckedUpdateWithoutSpeakerInput>
  }

  export type ChatUpdateManyWithWhereWithoutSpeakerInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutChatsInput>
  }

  export type ChatScalarWhereInput = {
    AND?: Enumerable<ChatScalarWhereInput>
    OR?: Enumerable<ChatScalarWhereInput>
    NOT?: Enumerable<ChatScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    spots?: IntFilter | number
    takenSpots?: IntFilter | number
    platform?: EnumPlatformFilter | Platform
    modality?: EnumModalityFilter | Modality
    activityStatus?: EnumactivityStatusFilter | activityStatus
    level?: EnumLevelFilter | Level
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    sessions?: SessionCreateNestedManyWithoutUserInput
    scholar?: ScholarCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    scholar?: ScholarUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    sessions?: SessionUpdateManyWithoutUserNestedInput
    scholar?: ScholarUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    scholar?: ScholarUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    scholar?: ScholarCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    scholar?: ScholarUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    scholar?: ScholarUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    scholar?: ScholarUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ScholarCreateWithoutUserInput = {
    id?: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date | string
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber?: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason?: string | null
    avaaAdmissionYear?: number | null
    volunteeringOrganizationName?: string | null
    academicLoadCompleted?: boolean | null
    currentStatus: string
    ceremonyDate?: Date | string | null
    currentlyWorking?: boolean | null
    organizationName?: string | null
    positionHeld?: string | null
  }

  export type ScholarUncheckedCreateWithoutUserInput = {
    id?: string
    region: Region
    scholarStatus: ScholarStatus
    canAssistToChats: ScholarCanAssist
    canAssistToWorkshops: ScholarCanAssist
    canAssistToVolunteers: ScholarCanAssist
    firstName: string
    lastName: string
    dni: string
    gender: string
    birthDate: Date | string
    localPhoneNumber: string
    cellPhoneNumber: string
    whatsAppNumber?: string | null
    stateOfOrigin: string
    currentZone: string
    housingType: string
    email: string
    collage: string
    carrer: string
    currentAcademicPeriod: string
    academicYear: number
    classModality: string
    cvaLocacion: string
    englishLevel: string
    notStartedCvareason?: string | null
    avaaAdmissionYear?: number | null
    volunteeringOrganizationName?: string | null
    academicLoadCompleted?: boolean | null
    currentStatus: string
    ceremonyDate?: Date | string | null
    currentlyWorking?: boolean | null
    organizationName?: string | null
    positionHeld?: string | null
  }

  export type ScholarCreateOrConnectWithoutUserInput = {
    where: ScholarWhereUniqueInput
    create: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type ScholarUpsertWithoutUserInput = {
    update: XOR<ScholarUpdateWithoutUserInput, ScholarUncheckedUpdateWithoutUserInput>
    create: XOR<ScholarCreateWithoutUserInput, ScholarUncheckedCreateWithoutUserInput>
  }

  export type ScholarUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScholarUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: EnumRegionFieldUpdateOperationsInput | Region
    scholarStatus?: EnumScholarStatusFieldUpdateOperationsInput | ScholarStatus
    canAssistToChats?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToWorkshops?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    canAssistToVolunteers?: EnumScholarCanAssistFieldUpdateOperationsInput | ScholarCanAssist
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    localPhoneNumber?: StringFieldUpdateOperationsInput | string
    cellPhoneNumber?: StringFieldUpdateOperationsInput | string
    whatsAppNumber?: NullableStringFieldUpdateOperationsInput | string | null
    stateOfOrigin?: StringFieldUpdateOperationsInput | string
    currentZone?: StringFieldUpdateOperationsInput | string
    housingType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    collage?: StringFieldUpdateOperationsInput | string
    carrer?: StringFieldUpdateOperationsInput | string
    currentAcademicPeriod?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    classModality?: StringFieldUpdateOperationsInput | string
    cvaLocacion?: StringFieldUpdateOperationsInput | string
    englishLevel?: StringFieldUpdateOperationsInput | string
    notStartedCvareason?: NullableStringFieldUpdateOperationsInput | string | null
    avaaAdmissionYear?: NullableIntFieldUpdateOperationsInput | number | null
    volunteeringOrganizationName?: NullableStringFieldUpdateOperationsInput | string | null
    academicLoadCompleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentStatus?: StringFieldUpdateOperationsInput | string
    ceremonyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    organizationName?: NullableStringFieldUpdateOperationsInput | string | null
    positionHeld?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkshopDatesCreateManyWorkshopInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type WorkshopDatesUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopDatesUncheckedUpdateWithoutWorkshopInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopDatesUncheckedUpdateManyWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkshopSpeakersUpdateWithoutWorkshopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopSpeakersUncheckedUpdateWithoutWorkshopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopSpeakersUncheckedUpdateManyWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type ChatDatesCreateManyChatInput = {
    id?: string
    date: Date | string
    start_time: Date | string
    end_time: Date | string
  }

  export type ChatDatesUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatDatesUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatDatesUncheckedUpdateManyWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSpeakersUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ChatSpeakersUncheckedUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ChatSpeakersUncheckedUpdateManyWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type WorkshopUpdateWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUpdateManyWithoutWorkshopNestedInput
    tempData?: WorkshopTempDataUpdateOneWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    dates?: WorkshopDatesUncheckedUpdateManyWithoutWorkshopNestedInput
    tempData?: WorkshopTempDataUncheckedUpdateOneWithoutWorkshopNestedInput
  }

  export type WorkshopUncheckedUpdateManyWithoutWorkshopsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pensum?: EnumPensumFieldUpdateOperationsInput | Pensum
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    description?: StringFieldUpdateOperationsInput | string
    avaaYear?: StringFieldUpdateOperationsInput | string
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
  }

  export type ChatUpdateWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUpdateManyWithoutChatNestedInput
    tempData?: ChatsTempDataUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutSpeakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
    dates?: ChatDatesUncheckedUpdateManyWithoutChatNestedInput
    tempData?: ChatsTempDataUncheckedUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    spots?: IntFieldUpdateOperationsInput | number
    takenSpots?: IntFieldUpdateOperationsInput | number
    platform?: EnumPlatformFieldUpdateOperationsInput | Platform
    modality?: EnumModalityFieldUpdateOperationsInput | Modality
    activityStatus?: EnumactivityStatusFieldUpdateOperationsInput | activityStatus
    level?: EnumLevelFieldUpdateOperationsInput | Level
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}