/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necesary data and information wee need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

import { WorkshopAttendance } from "..\..\activities\workshop\workshop"
import { ChatAttendance } from "..\..\activities\chat\chat"
import { Region, ScholarCanAssist, ScholarStatus } from "types-scholar"
import { ChatSpeaker } from "..\..\activities\chat\chat"
import { InternalProjects } from "..\project\project"
import { volunteerAttendance } from "..\..\activities\volunteer\volunteer"

model User {
    id                             String                @id @default(cuid())
    name                           String?
    email                          String?               @unique
    image                          String?
    accounts                       Account[]
    sessions                       Session[]
    emailVerified                  DateTime?
    region                         Region                @default(CARACAS)
    userId                         String?               @unique
    first_names                    String
    last_names                     String
    dni                            String?               @unique
    gender                         String?
    birthdate                      DateTime?
    local_phone_number             String?
    cell_phone_Number              String?
    whatsapp_number                String?
    state_of_origin                String?
    current_zone                   String?
    collage                        String?
    carrer                         String?
    study_area                     String?
    current_academic_period        String?
    grade                          String?
    grade_kind                     String?
    class_modality                 String?
    academic_period_type           String?
    is_in_cva                      Boolean?              @default(false)
    cva_location                   String?
    cva_modality                   String?
    english_level                  String?
    not_started_cva_reason         String?
    avaa_admission_year            String?
    volunteering_organization_name String?
    academic_load_completed        Boolean?
    current_status                 String?
    ceremony_date                  DateTime?
    is_currently_working           Boolean?
    organization_name              String?
    position_held                  String?
    work_modality                  String?
    weekly_hours                   Float?
    instagram_user                 String?
    twitter_user                   String?
    facebook_user                  String?
    linkedin_user                  String?
    attended_workshpos             WorkshopAttendance[]
    attended_chats                 ChatAttendance[]
    scholar_status                 ScholarStatus
    can_assist_to_chats            ScholarCanAssist      @default(YES)
    can_assist_to_workshops        ScholarCanAssist      @default(YES)
    can_assist_to_volunteers       ScholarCanAssist      @default(YES)
    volunteer_attendance           volunteerAttendance[]
    updated_at                     DateTime              @default(now())
    created_at                     DateTime              @default(now())
    is_chat_speaker                Boolean?              @default(false)
    chat_speaker                   ChatSpeaker[]
    Internal_rojects               InternalProjects?     @relation(fields: [internal_projects_id], references: [id])
    internal_projects_id           String?

    @@index([internal_projects_id])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
