//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// chat.prisma
//

/// Prisma schema model for `Chat` table in database.
/// Here we model all the necesary data and information wee need for the English Chat clubs, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Chat {
  id                 String           @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  calendar_id        String?
  start_dates        DateTime[]
  end_dates          DateTime[]
  rating             Float?
  modality           Modality
  level              Level
  speaker            ChatSpeaker[]
  activity_status    ActivityStatus
  temp_data          ChatsTempData?
  scholar_attendance ChatAttendance[]

  @@index([title, modality, activity_status, level])
}

model ChatAttendance {
  id            String            @id @default(nanoid())
  scholar       Scholar           @relation(fields: [scholar_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholar_id    String
  chat          Chat              @relation(fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat_id       String
  attendance    ScholarAttendance
  justification String?

  @@index([scholar_id])
  @@index([chat_id])
}

model ChatsTempData {
  id               String  @id @default(nanoid())
  chat             Chat    @relation(fields: [chat_id], references: [id])
  chat_id          String  @unique
  form_link        String?
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
  whatsapp_link    String?
}

model ChatSpeaker {
  id             String    @id @default(nanoid())
  first_names    String
  last_names     String
  email          String?   @unique
  birthdate      DateTime?
  image          String?
  description    String?
  instagram_user String?
  twitter_user   String?
  linkedin_user  String?
  facebook_user  String?
  phone_number   String?
  chat           Chat[]
  is_scholar     Boolean   @default(false)
  scholar        Scholar?  @relation(fields: [scholar_id], references: [id])
  scholar_id     String?

  @@index([scholar_id])
}

//
// types-chat.prisma
//

// Base types prisma file for chat models. Types that are only used for chat related models. 
/// @author Kevin Bravo (kevinbravo.me)

enum Level {
  BASICO
  INTERMEDIO
  AVANZADO
}

//
// type-activities.prisma
//

// Base types prisma file for activities models. Types that are only used for actiities related models.
/// @author Kevin Bravo (kevinbravo.me)

enum Modality {
  IN_PERSON
  VIRTUAL
  HYBRID
}

enum ActivityStatus {
  SCHEDULED
  IN_PROGRESS
  DONE
  SUSPENDED
}

enum ScholarAttendance {
  ATTENDED
  NOT_ATTENDED
  JUSTIFY
}

//
// types-volunteer.prisma
//

// Base types prisma file for Volunteer model. Types that are only used for  volunteer related models. 
/// @author Kevin Bravo (kevinbravo.me)

//
// volunteer.prisma
//

/// Prisma schema model for `Volunteer` table in database.
/// Here we model all the necesary data and information wee need for the Volunteer activities, and related tables (tempData, attendance)
/// @author Kevin Bravo (kevinbravo.me)

model Volunteer {
  id                 String                @id @default(nanoid(22))
  Projects           InternalProjects?     @relation(fields: [InternalProjectId], references: [id])
  InternalProjectId  String?
  title              String
  description        String
  hours              Float
  ExternalProjects   ExternalProjects?     @relation(fields: [externalProjectsId], references: [id])
  externalProjectsId String?
  raiting            Float?
  photoAlbum         String?
  CalendarId         String?
  VolunteerAtt       volunteerAttendance[]

  @@index([InternalProjectId])
  @@index([externalProjectsId])
}

model volunteerAttendance {
  id            String            @id @default(nanoid(22))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  volunteerId   String
  volnuteer     Volunteer         @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([volunteerId])
  @@index([scholarId])
}

//
// types-workshop.prisma
//

// Base types prisma file for Workshop model.
/// @author Kevin Bravo (kevinbravo.me)

enum Skill {
  CITIZEN_EXERCISE
  LEADERSHIP
  SELF_MANAGEMENT
  ICT
  ENTREPRENEURSHIP
}

enum WorkshopYear {
  I
  II
  III
  IV
  V
}

//
// workshop.prisma
//

/// Prisma schema model for `Workshop` table in database.
/// Here we model all the necesary data and information wee need for the Workshop activities, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Workshop {
  id                 String               @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  calendar_id        String?
  start_dates        DateTime[]
  end_dates          DateTime[]
  year               WorkshopYear[]
  modality           Modality
  skill              Skill
  speaker            WorkshopSpeaker[]
  temp_data          WorkshopTempData?
  activity_status    ActivityStatus
  scholar_attendance WorkshopAttendance[]
  rating             Float?

  @@index([title, modality, activity_status, skill])
}

model WorkshopTempData {
  id               String   @id @default(nanoid())
  workshop         Workshop @relation(fields: [workshop_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshop_id      String   @unique
  form_link        String
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
}

model WorkshopSpeaker {
  id             String     @id @default(nanoid())
  first_names    String
  last_names     String
  email          String?    @unique
  birthdate      DateTime?
  years_of_exp   Int?
  job_title      String?
  job_company    String?
  actual_city    String?
  actual_country String?
  image          String?
  description    String?
  instagram_user String?
  twitter_user   String?
  linkedin_user  String?
  facebook_user  String?
  phone_number   String?
  curriculum     String?
  workshops      Workshop[]
}

model WorkshopAttendance {
  id            String            @id @default(nanoid())
  scholar       Scholar           @relation(fields: [scholar_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholar_id    String
  workshop_id   String            @unique
  workshop      Workshop          @relation(fields: [workshop_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([scholar_id])
  @@index([workshop_id])
}

//
// base.prisma
//

// Base prisma file, Here we specified each of the configuration for make prisma work correctly
///@see 
/// @author Kevin Bravo (kevinbravo.me)

///@see https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// ignore this error
///@see https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//
// types.prisma
//

// Base  type prisma file, in this file we define the base types for all the prisma schema
/// @author Kevin Bravo (kevinbravo.me)

enum AvaaYear {
  I
  II
  III
  IV
  V
  V0
  TODOS
}

//
// auth.prisma
//

//  Prisma schema for the next -auth related config.
//@see https://next-auth.js.org/v3/adapters/prisma#setup for more information
// Here we model all the necesary data and information for the next-auth to work
/// @author Kevin Bravo (kevinbravo.me)

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(SCHOLAR)
  scholar       Scholar?
  emailVerified DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// project.prisma
//

/// Prisma schema model for all the projects related table in database.
/// Here we model all the necesary data and information we need for the different kind of projects we have to make volunteer activities. 
/// @author Kevin Bravo (kevinbravo.me)

model ExternalProjects {
  id             String  @id @default(nanoid(22))
  name           String
  username       String
  description    String?
  image          String?
  instagramUser  String?
  location       String?
  website        String?
  phoneNumer     String?
  email          String?
  personInCharge String?
  goal           String?

  volunteerActivities Volunteer[]
  createdAt           DateTime
}

model InternalProjects {
  id                  String      @id @default(nanoid(22))
  name                String
  username            String
  description         String?
  image               String?
  instagramUser       String?
  ScholarLeaders      Scholar[]
  KPI                 Json
  volunteerActivities Volunteer[]
  createdAt           DateTime
  goal                String?
  ods                 String?
  bagdes              String[]
}

//
// scholar.prisma
//

/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necesary data and information wee need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

model Scholar {
  id                             String                @id @default(nanoid(12))
  user                           User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  region                         Region                @default(CARACAS)
  userId                         String?               @unique
  first_names                    String
  last_names                     String
  dni                            String?               @unique
  gender                         String?
  birthdate                      DateTime?
  local_phone_number             String?
  cell_phone_Number              String?
  whatsapp_number                String?
  state_of_origin                String?
  current_zone                   String?
  email                          String?               @unique
  collage                        String?
  carrer                         String?
  study_area                     String?
  current_academic_period        String?
  grade                          String?
  grade_kind                     String?
  class_modality                 String?
  academic_period_type           String?
  is_in_cva                      Boolean?              @default(false)
  cva_location                   String?
  cva_modality                   String?
  english_level                  String?
  not_started_cva_reason         String?
  avaa_admission_year            String?
  volunteering_organization_name String?
  academic_load_completed        Boolean?
  current_status                 String?
  ceremony_date                  DateTime?
  is_currently_working           Boolean?
  organization_name              String?
  position_held                  String?
  work_modality                  String?
  weekly_hours                   Float?
  instagram_user                 String?
  twitter_user                   String?
  facebook_user                  String?
  linkedin_user                  String?
  attended_workshpos             WorkshopAttendance[]
  attended_chats                 ChatAttendance[]
  scholar_status                 ScholarStatus
  can_assist_to_chats            ScholarCanAssist      @default(YES)
  can_assist_to_workshops        ScholarCanAssist      @default(YES)
  can_assist_to_volunteers       ScholarCanAssist      @default(YES)
  volunteer_attendance           volunteerAttendance[]
  updated_at                     DateTime              @default(now())
  created_at                     DateTime              @default(now())
  is_chat_speaker                Boolean?              @default(false)
  chat_speaker                   ChatSpeaker[]
  Internal_rojects               InternalProjects?     @relation(fields: [internal_projects_id], references: [id])
  internal_projects_id           String?

  @@index([internal_projects_id])
}

//
// types-scholar.prisma
//

// Base types prisma file for scholar types. Types that are only used for scholars.
/// @author Kevin Bravo (kevinbravo.me)

enum Region {
  ZULIA
  CARABOBO
  CARACAS
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  CURRENT
  ALUMNI
}

enum ScholarCanAssist {
  YES
  NO
}

//
// types-users.prisma
//

// Base types prisma file for general user types. Types that are share between users. 
/// @author Kevin Bravo (kevinbravo.me)

// The roles that a user can have.
enum Role {
  ADMIN
  COMITEE
  PROYECT
  CHAT
  SCHOLAR
}
