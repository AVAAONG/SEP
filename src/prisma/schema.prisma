//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// chat.prisma
//

model Chat {
  id             String           @id @default(nanoid(8))
  title          String
  dates          Json
  speaker        ChatSpeaker[]
  spots          Int
  platform       String
  calendarID     String?
  modality       Modality
  activityStatus ActivityStatus
  level          Level
  tempData       ChatsTempData?
  attendance     ChatAttendance[]

  @@index([title, modality, activityStatus, level])
}

model ChatAttendance {
  id            String            @id @default(nanoid(8))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  workshop      Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId        String
  attendance    ScholarAttendance
  justification String?

  @@index([scholarId])
  @@index([chatId])
}

model ChatsTempData {
  id              String  @id @default(nanoid(8))
  chat            Chat    @relation(fields: [chatId], references: [id])
  chatId          String  @unique
  formLink        String?
  meetingLink     String?
  meetingId       String?
  meetingPassword String?
  whatsappLink    String?
}

model ChatSpeaker {
  id        String  @id @default(nanoid(8))
  scholar   Scholar @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId String
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    String
  raiting   Int?

  @@index([chatId])
  @@index([scholarId])
}

//
// types-chat.prisma
//

enum Level {
  BASICO
  INTERMEDIO
  AVANZADO
}

//
// type-activities.prisma
//

enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
  ASINCRONO
}

enum ActivityStatus {
  AGENDADO
  EN_PROCESO
  REALIZADO
  SUSPENDIDO
}

enum ScholarAttendance {
  ATTENDED
  CANCELED
  NOT_ATTENDED
  JUSTIFY
}

//
// types-volunteer.prisma
//

//
// volunteer.prisma
//

model Volunteer {
  id                 String            @id @default(nanoid(8))
  Projects           InternalProjects? @relation(fields: [InternalProjectId], references: [id])
  InternalProjectId  String?
  title              String
  description        String
  hours              Float
  ExternalProjects   ExternalProjects? @relation(fields: [externalProjectsId], references: [id])
  externalProjectsId String?
  raiting            Float?
  photoAlbum         String?

  @@index([InternalProjectId])
  @@index([externalProjectsId])
}

//
// types-workshop.prisma
//

enum Pensum {
  EJERCICIO_CIUDADANO
  LIDERAZGO
  GERENCIA_EN_SI_MISMO
  TIC
  EMPRENDIMIENTO
  TRABAJO_EN_EQUIPO
}

//
// workshop.prisma
//

model Workshop {
  id                String               @id @default(nanoid(8))
  title             String
  spots             Int
  platform          String
  description       String
  calendarID        String
  workshopYear      AvaaYear[]
  modality          Modality
  pensum            Pensum
  dates             Json
  speaker           WorkshopSpeaker[]
  tempData          WorkshopTempData?
  activityStatus    ActivityStatus       @default(AGENDADO)
  scholarAttendance WorkshopAttendance[]

  @@index([title, modality, activityStatus, pensum])
}

model WorkshopTempData {
  id              String   @id @default(nanoid(8))
  workshop        Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId      String   @unique
  formLink        String
  meetingLink     String?
  meetingId       String?
  meetingPassword String?
}

model WorkshopSpeaker {
  id            String     @id @default(nanoid(8))
  name          String     @unique
  email         String     @unique
  birthdate     DateTime?
  yearsOfExp    Int?
  yearsInAvaa   Int?
  jobTitle      String?
  jobCompany    String?
  actualCity    String?
  actualCountry String?
  image         String?
  description   String?
  instagramUser String?
  twitterUser   String?
  linkedinUser  String?
  facebookUser  String?
  phoneNumber   String?
  raiting       Float?
  workshops     Workshop[]
}

model WorkshopAttendance {
  id            String            @id @default(nanoid(8))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  workshopId    String
  workshop      Workshop          @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([workshopId])
  @@index([scholarId])
}

//
// base.prisma
//

// Base file for the prisma schema modelation of the database
/// @author Kevin Bravo (kevinbravo.me)

generator client {
  provider = "prisma-client-js"
}

// ignore this error
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//
// types.prisma
//

enum AvaaYear {
  I
  II
  III
  IV
  V
  V0
  TODOS
}

//
// auth.prisma
//

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]
  role     Role      @default(SCHOLAR)
  scholar  Scholar?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// project.prisma
//

model ExternalProjects {
  id             String  @id @default(nanoid(8))
  name           String
  username       String
  description    String?
  image          String?
  instagramUser  String?
  location       String?
  website        String?
  phoneNumer     String?
  email          String?
  personInCharge String?
  goal           String?

  volunteerActivities Volunteer[]
  createdAt           DateTime
}

model InternalProjects {
  id                  String      @id @default(nanoid(8))
  name                String
  username            String
  description         String?
  image               String?
  instagramUser       String?
  ScholarLeaders      Scholar[]
  KPI                 Json
  volunteerActivities Volunteer[]
  createdAt           DateTime
  goal                String?
  ods                 String?
  bagdes              String[]
}

//
// scholar.prisma
//

model Scholar {
  id                           String               @id @default(nanoid(12))
  user                         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  region                       Region               @default(CARACAS)
  userId                       String               @unique
  firstNames                   String
  lastNames                    String
  dni                          String?              @unique
  gender                       String?
  birthDate                    DateTime?
  localPhoneNumber             String?
  cellPhoneNumber              String?
  whatsAppNumber               String?
  stateOfOrigin                String?
  currentZone                  String?
  email                        String?              @unique
  collage                      String?
  carrer                       String?
  studyArea                    String?
  currentAcademicPeriod        String?
  academicYear                 String?
  classModality                String?
  cvaLocation                  String?
  englishLevel                 String?
  notStartedCvaRreason         String?
  avaaAdmissionYear            String?
  volunteeringOrganizationName String?
  academicLoadCompleted        Boolean?
  currentStatus                String?
  ceremonyDate                 DateTime?
  isCurrentlyWorking           Boolean?
  organizationName             String?
  positionHeld                 String?
  workModality                 String?
  instagramUser                String?
  twitterUser                  String?
  facebookUser                 String?
  linkedinUser                 String?
  attendedWorkshpos            WorkshopAttendance[]
  attendedChats                ChatAttendance[]
  scholarStatus                ScholarStatus        @default(CURRENT)
  canAssistToChats             ScholarCanAssist     @default(YES)
  canAssistToWorkshops         ScholarCanAssist     @default(YES)
  canAssistToVolunteers        ScholarCanAssist     @default(YES)
  ChatSpeaker                  ChatSpeaker[]
  InternalProjects             InternalProjects?    @relation(fields: [internalProjectsId], references: [id])
  internalProjectsId           String?

  @@index([internalProjectsId])
}

//
// types-scholar.prisma
//

enum Region {
  ZULIA
  CARABOBO
  CARACAS
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  CURRENT
  ALUMNI
}

enum ScholarCanAssist {
  YES
  NO
}

//
// types-users.prisma
//

enum Role {
  ADMIN
  COMITEE
  PROYECTS
  CHAT
  SCHOLAR
}
