//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// chat.prisma
//

/// Prisma schema model for `Chat` table in database.
/// Here we model all the necesary data and information wee need for the English Chat clubs, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Chat {
  id             String           @id @default(nanoid(22))
  title          String
  dates          Json
  speaker        ChatSpeaker[]
  spots          Int
  platform       String
  calendarID     String?
  modality       Modality
  activityStatus ActivityStatus
  level          Level
  tempData       ChatsTempData?
  attendance     ChatAttendance[]

  @@index([title, modality, activityStatus, level])
}

model ChatAttendance {
  id            String            @id @default(nanoid(22))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  chat          Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId        String
  attendance    ScholarAttendance
  justification String?

  @@index([scholarId])
  @@index([chatId])
}

model ChatsTempData {
  id              String  @id @default(nanoid(22))
  chat            Chat    @relation(fields: [chatId], references: [id])
  chatId          String  @unique
  formLink        String?
  meetingLink     String?
  meetingId       String?
  meetingPassword String?
  whatsappLink    String?
}

model ChatSpeaker {
  id            String    @id @default(nanoid(22))
  name          String
  email         String?   @unique
  birthDate     DateTime?
  yearsOfExp    Int?
  yearsInAvaa   Int?
  jobTitle      String?
  jobCompany    String?
  actualCity    String?
  actualCountry String?
  image         String?
  description   String?
  instagramUser String?
  twitterUser   String?
  linkedinUser  String?
  facebookUser  String?
  phoneNumber   String?
  raiting       Int?
  Chat          Chat[]
}

//
// types-chat.prisma
//

// Base types prisma file for chat models. Types that are only used for chat related models. 
/// @author Kevin Bravo (kevinbravo.me)

enum Level {
  BASICO
  INTERMEDIO
  AVANZADO
}

//
// type-activities.prisma
//

// Base types prisma file for activities models. Types that are only used for actiities related models.
/// @author Kevin Bravo (kevinbravo.me)

enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
  ASINCRONO
}

enum ActivityStatus {
  AGENDADO
  EN_PROCESO
  REALIZADO
  SUSPENDIDO
}

enum ScholarAttendance {
  ATTENDED
  CANCELED
  NOT_ATTENDED
  JUSTIFY
}

//
// types-volunteer.prisma
//

// Base types prisma file for Volunteer model. Types that are only used for  volunteer related models. 
/// @author Kevin Bravo (kevinbravo.me)

//
// volunteer.prisma
//

/// Prisma schema model for `Volunteer` table in database.
/// Here we model all the necesary data and information wee need for the Volunteer activities, and related tables (tempData, attendance)
/// @author Kevin Bravo (kevinbravo.me)

model Volunteer {
  id                 String                @id @default(nanoid(22))
  Projects           InternalProjects?     @relation(fields: [InternalProjectId], references: [id])
  InternalProjectId  String?
  title              String
  description        String
  hours              Float
  ExternalProjects   ExternalProjects?     @relation(fields: [externalProjectsId], references: [id])
  externalProjectsId String?
  raiting            Float?
  photoAlbum         String?
  CalendarId         String?
  VolunteerAtt       volunteerAttendance[]

  @@index([InternalProjectId])
  @@index([externalProjectsId])
}

model volunteerAttendance {
  id            String            @id @default(nanoid(22))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  volunteerId   String
  volnuteer     Volunteer         @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([volunteerId])
  @@index([scholarId])
}

//
// types-workshop.prisma
//

// Base types prisma file for Workshop model.
/// @author Kevin Bravo (kevinbravo.me)

enum Pensum {
  EJERCICIO_CIUDADANO
  LIDERAZGO
  GERENCIA_DE_SI_MISMO
  TIC
  EMPRENDIMIENTO
  TRABAJO_EN_EQUIPO
}

//
// workshop.prisma
//

/// Prisma schema model for `Workshop` table in database.
/// Here we model all the necesary data and information wee need for the Workshop activities, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Workshop {
  id                String               @id @default(nanoid(22))
  title             String
  spots             Int
  platform          String
  description       String
  calendarID        String?
  year              String
  workshopYear      AvaaYear[]
  modality          Modality
  pensum            Pensum
  dates             Json
  speaker           WorkshopSpeaker[]
  tempData          WorkshopTempData?
  activityStatus    ActivityStatus       @default(AGENDADO)
  scholarAttendance WorkshopAttendance[]

  @@index([title, modality, activityStatus, pensum])
}

model WorkshopTempData {
  id              String   @id @default(nanoid(22))
  workshop        Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId      String   @unique
  formLink        String
  meetingLink     String?
  meetingId       String?
  meetingPassword String?
}

model WorkshopSpeaker {
  id            String     @id @default(nanoid(22))
  name          String
  email         String?    @unique
  birthdate     DateTime?
  yearsOfExp    Int?
  yearsInAvaa   Int?
  jobTitle      String?
  jobCompany    String?
  actualCity    String?
  actualCountry String?
  image         String?
  description   String?
  instagramUser String?
  twitterUser   String?
  linkedinUser  String?
  facebookUser  String?
  phoneNumber   String?
  raiting       Float?
  workshops     Workshop[]
}

model WorkshopAttendance {
  id            String            @id @default(nanoid(22))
  scholar       Scholar           @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  workshopId    String
  workshop      Workshop          @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([workshopId])
  @@index([scholarId])
}

//
// base.prisma
//

// Base prisma file, Here we specified each of the configuration for make prisma work correctly
///@see 
/// @author Kevin Bravo (kevinbravo.me)

///@see https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// ignore this error
///@see https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//
// types.prisma
//

// Base  type prisma file, in this file we define the base types for all the prisma schema
/// @author Kevin Bravo (kevinbravo.me)

enum AvaaYear {
  I
  II
  III
  IV
  V
  V0
  TODOS
}

//
// auth.prisma
//

//  Prisma schema for the next -auth related config.
//@see https://next-auth.js.org/v3/adapters/prisma#setup for more information
// Here we model all the necesary data and information for the next-auth to work
/// @author Kevin Bravo (kevinbravo.me)

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(SCHOLAR)
  scholar       Scholar?
  emailVerified Boolean?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// project.prisma
//

/// Prisma schema model for all the projects related table in database.
/// Here we model all the necesary data and information we need for the different kind of projects we have to make volunteer activities. 
/// @author Kevin Bravo (kevinbravo.me)

model ExternalProjects {
  id             String  @id @default(nanoid(22))
  name           String
  username       String
  description    String?
  image          String?
  instagramUser  String?
  location       String?
  website        String?
  phoneNumer     String?
  email          String?
  personInCharge String?
  goal           String?

  volunteerActivities Volunteer[]
  createdAt           DateTime
}

model InternalProjects {
  id                  String      @id @default(nanoid(22))
  name                String
  username            String
  description         String?
  image               String?
  instagramUser       String?
  ScholarLeaders      Scholar[]
  KPI                 Json
  volunteerActivities Volunteer[]
  createdAt           DateTime
  goal                String?
  ods                 String?
  bagdes              String[]
}

//
// scholar.prisma
//

/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necesary data and information wee need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

model Scholar {
  id                           String                @id @default(nanoid(12))
  user                         User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  region                       Region                @default(CARACAS)
  userId                       String?               @unique
  firstNames                   String
  lastNames                    String
  dni                          String?               @unique
  gender                       String?
  birthDate                    DateTime?
  localPhoneNumber             String?
  cellPhoneNumber              String?
  whatsAppNumber               String?
  stateOfOrigin                String?
  currentZone                  String?
  email                        String?               @unique
  collage                      String?
  carrer                       String?
  studyArea                    String?
  currentAcademicPeriod        String?
  academicYear                 String?
  classModality                String?
  cvaLocation                  String?
  englishLevel                 String?
  notStartedCvaRreason         String?
  avaaAdmissionYear            String?
  volunteeringOrganizationName String?
  academicLoadCompleted        Boolean?
  currentStatus                String?
  ceremonyDate                 DateTime?
  isCurrentlyWorking           Boolean?
  organizationName             String?
  positionHeld                 String?
  workModality                 String?
  instagramUser                String?
  twitterUser                  String?
  facebookUser                 String?
  linkedinUser                 String?
  attendedWorkshpos            WorkshopAttendance[]
  attendedChats                ChatAttendance[]
  scholarStatus                ScholarStatus
  canAssistToChats             ScholarCanAssist      @default(YES)
  canAssistToWorkshops         ScholarCanAssist      @default(YES)
  canAssistToVolunteers        ScholarCanAssist      @default(YES)
  InternalProjects             InternalProjects?     @relation(fields: [internalProjectsId], references: [id])
  internalProjectsId           String?
  volunteerAttendance          volunteerAttendance[]

  @@index([internalProjectsId])
}

//
// types-scholar.prisma
//

// Base types prisma file for scholar types. Types that are only used for scholars.
/// @author Kevin Bravo (kevinbravo.me)

enum Region {
  ZULIA
  CARABOBO
  CARACAS
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  CURRENT
  ALUMNI
}

enum ScholarCanAssist {
  YES
  NO
}

//
// types-users.prisma
//

// Base types prisma file for general user types. Types that are share between users. 
/// @author Kevin Bravo (kevinbravo.me)

// The roles that a user can have.
enum Role {
  ADMIN
  COMITEE
  PROYECT
  CHAT
  SCHOLAR
}
