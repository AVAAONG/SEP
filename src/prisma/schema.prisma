// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// take all this prisma code and cover to prisma formating cpde
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ====================================== Admin related shchema  ======================================
enum Role {
  ADMIN
  COMITEE
  PROYECTS
  CHAT
  SCHOLAR
}

// ====================================== Actvities related shchema  ======================================
enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
  ASINCRONO
}

enum Platform {
  zoom
  google_meet
  otra
  padlet
  oficinas_de_avaa
  teams
  discord
  jitsi
}

enum activityStatus {
  AGENDADO
  EN_PROCESO
  REALIZADO
  SUSPENDIDO
  CANCELADO
}

enum Pensum {
  EJERCICIO_CIUDADANO
  LIDERAZGO
  GERENCIA_EN_SI_MISMO
  TIC
  EMPRENDIMIENTO
  TRABAJO_EN_EQUIPO
}

enum Level {
  Basico
  Intermedio
  Avanzado
}

enum AsociatedProject {
  UMAA
  OAL
  ALV
  UVPLV
  oficinas_de_avaa
  Externos
}

model WorkshopDates {
  id         String   @id @default(nanoid(8))
  start_date DateTime
  end_date   DateTime
  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId String

  @@index([workshopId])
}

model ChatDates {
  id         String   @id @default(nanoid(8))
  start_date DateTime
  end_date   DateTime
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String

  @@index([chatId])
}

model VolunteerDates {
  id          String    @id @default(nanoid(8))
  start_date  DateTime
  end_date    DateTime
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId String

  @@index([volunteerId])
}

model Volunteer {
  id             String           @id @default(nanoid(8))
  title          String
  dates          VolunteerDates[]
  spots          Int
  takenSpots     Int
  modality       Modality
  platform       Platform
  description    String
  avaaYear       String
  activityStatus activityStatus
  scholars       Scholar[]        @relation("ScholarVolunteer")
  attendance     Attendance[]
}

model WorkshopTempData {
  id              String   @id @default(nanoid(8))
  workshop        Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workshopId      String   @unique
  formLink        String
  meetingLink     String
  meetingId       String
  meetingPassword String
  calendarID      String
}

model ChatsTempData {
  id              String @id @default(nanoid(8))
  chat            Chat   @relation(fields: [chatId], references: [id])
  chatId          String @unique
  formLink        String
  meetingLink     String
  meetingId       String
  meetingPassword String
  calendarID      String
}

model Workshop {
  id                 String               @id @default(nanoid(8))
  title              String
  pensum             Pensum
  dates              WorkshopDates[]
  speaker            WorkshopSpeaker[]
  spots              Int
  takenSpots         Int                  @default(0)
  modality           Modality
  platform           String
  description        String               @db.LongText
  avaaYear           String
  activityStatus     activityStatus       @default(AGENDADO)
  scholars           Scholar[]            @relation("ScholarWorkshop")
  tempData           WorkshopTempData?
  WorkshopAttendance WorkshopAttendance[]

  @@index([title, modality, activityStatus, pensum])
}

model Chat {
  id             String         @id @default(nanoid(8))
  title          String
  dates          ChatDates[]
  speaker        ChatSpeakers[]
  spots          Int
  takenSpots     Int
  platform       Platform
  modality       Modality
  activityStatus activityStatus
  level          Level
  tempData       ChatsTempData?
  attendance     Attendance[]
  Scholar        Scholar        @relation("ScholarChat", fields: [scholarId], references: [id])
  scholarId      String

  @@index([title, modality, activityStatus, level])
}

// ====================================== Users related shchema  ======================================

enum Region {
  Zulia
  Caracas
  Carabobo
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  CURRENT
  ALUMNI
}

enum ScholarCanAssist {
  Yes
  No
}

// This model is for storing all related Scholar information
model Scholar {
  // this handle relation 1 - 1 in prisma
  id String @id @default(nanoid(12))
  // user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId String @unique

  // this is for store scholar privilege and location
  region                Region           @default(Caracas)
  scholarStatus         ScholarStatus    @default(CURRENT)
  canAssistToChats      ScholarCanAssist @default(Yes)
  canAssistToWorkshops  ScholarCanAssist @default(Yes)
  canAssistToVolunteers ScholarCanAssist @default(Yes)

  //this is for store scholar information
  firstNames                   String
  lastNames                    String
  dni                          String?              @unique
  gender                       String?
  birthDate                    DateTime?
  //we can obtai the age in the frontend
  localPhoneNumber             String?
  cellPhoneNumber              String?
  //if whatsapp number is present then we can sset have whatsapp to true
  whatsAppNumber               String?
  stateOfOrigin                String?
  currentZone                  String?
  email                        String?              @unique
  collage                      String?
  carrer                       String?
  studyArea                    String?
  currentAcademicPeriod        String?
  academicYear                 String?
  classModality                String?
  cvaLocation                  String?
  englishLevel                 String?
  notStartedCvaRreason         String?
  avaaAdmissionYear            String?
  // el ano de avaa lo colocamos nosotros en el frontend
  // si hace voluntariado permanente o no lo podemos colocar en el frontend
  volunteeringOrganizationName String?
  academicLoadCompleted        Boolean?
  currentStatus                String?
  ceremonyDate                 DateTime?
  currentlyWorking             Boolean?
  organizationName             String?
  positionHeld                 String?
  workshopModality             String?
  chats                        Chat[]               @relation("ScholarChat")
  Workshop                     Workshop[]           @relation("ScholarWorkshop")
  Volunteer                    Volunteer[]          @relation("ScholarVolunteer")
  Attendance                   Attendance[]
  workshopId                   String?
  volunteerId                  String?
  WorkshopAttendance           WorkshopAttendance[]
}

//el almuni lo ponemos dentor del modelo de scholar para que sea mas facil de manejar
model alumni {
  id String @id @default(nanoid(8))
}

// ====================================== Users related shchema  ======================================

model WorkshopSpeaker {
  id            String     @id @default(nanoid(8))
  name          String     @unique
  email         String?    @unique
  age           Int?
  image         String?
  description   String?
  instagramUser String?
  twitterUser   String?
  linkedinUser  String?
  phoneNumber   String?
  workshops     Workshop[]
}

model ChatSpeakers {
  id    String @id @default(nanoid(8))
  name  String
  email String
  chats Chat[]

  @@unique([email])
  @@index([email])
}

// ============================================================== Auth related shchema  ==============================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]
  role     Role      @default(SCHOLAR)
  // scholar  Scholar?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attendance {
  id          String     @id @default(nanoid(8))
  scholar     Scholar?   @relation(fields: [scholarId], references: [id])
  scholarId   String?
  chat        Chat?      @relation(fields: [chatId], references: [id])
  chatId      String?
  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  volunteerId String?
  attend      Boolean
}

model WorkshopAttendance {
  id         String            @id @default(nanoid(8))
  scholar    Scholar?          @relation(fields: [scholarId], references: [id])
  scholarId  String?
  workshop   Workshop?         @relation(fields: [workshopId], references: [id])
  workshopId String?
  attend     ScholarAttendance
}

enum ScholarAttendance {
  ATTENDED
  CANCELED
  NOT_ATTENDED
}
