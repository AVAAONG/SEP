import { AdminProfile } from "users\admin"
import { Scholar } from "users\scholar\scholar"

enum KinOfUser {
    ADMIN
    SCHOLAR
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime      @default(now())
  last_login    DateTime?     @default(now())
  kind_of_user  KinOfUser
  admin         AdminProfile? @relation(fields: [adminId], references: [id])
  adminId       String?       @unique
  scholar       Scholar?      @relation(fields: [scholarId], references: [id])
  scholarId     String?       @unique
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
