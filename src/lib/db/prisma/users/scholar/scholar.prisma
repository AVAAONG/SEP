/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necessary data and information we need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

import { WorkshopAttendance } from "..\..\activities\workshop\workshop"
import { ChatAttendance } from "..\..\activities\chat\chat"
import { Region, ScholarCanAssist, ScholarStatus } from "types-scholar"
import { Chapter } from "..\..\organization\chapter"
import { ScholarCanAssist } from "types-scholar"
import { Gender } from "..\..\activities\type-activities"
import { ScholarCollageInformation } from "collage"
import { ScholarCVAInformation } from "cva"
import { ScholarCondition, ScholarStatus, ScholarStatus } from "types-scholar"
import { User } from "..\..\base-next-auth"
import { Chat, Chat, Chat } from "..\..\activities\chat\chat"
import { VolunteerAttendance } from "..\..\activities\volunteer\volunteer"

model Scholar {
    id                     String                     @id @default(nanoid())
    allowedEmail           String?                    @unique
    first_names            String
    last_names             String
    dni                    String                     @unique
    gender                 Gender
    birthdate              DateTime
    is_working             Boolean                    @default(false)
    job_title              String?
    job_company            String?
    local_phone_number     String?
    cell_phone_Number      String?
    whatsapp_number        String?
    state_of_origin        String?
    address                String?
    instagram_user         String?
    twitter_user           String?
    facebook_user          String?
    linkedin_user          String?
    program_information    ScholarProgramInformation? @relation(fields: [program_information_id], references: [id])
    collage_information    ScholarCollageInformation? @relation(fields: [collage_information_id], references: [id])
    cva_information        ScholarCVAInformation?     @relation(fields: [cva_information_id], references: [id])
    program_information_id String?
    collage_information_id String?
    cva_information_id     String?
    is_chat_speaker        Boolean                    @default(false)
    chat_speaker_id        String?
    user                   User?

    @@unique([program_information_id, collage_information_id, cva_information_id])
    @@index([program_information_id])
    @@index([collage_information_id])
    @@index([cva_information_id])
}

model ScholarProgramInformation {
    id                       String                @id @default(nanoid())
    avaa_admission_year      DateTime
    scholar_status           ScholarStatus         @default(NORMAL)
    scholar_condition        ScholarCondition?
    can_assist_to_chats      ScholarCanAssist      @default(YES)
    can_assist_to_workshops  ScholarCanAssist      @default(YES)
    can_assist_to_volunteers ScholarCanAssist      @default(YES)
    chapter                  Chapter?              @relation(fields: [chapter_id], references: [id])
    chapter_id               String?
    attended_workshops       WorkshopAttendance[]
    attended_chats           ChatAttendance[]
    Scholar                  Scholar[]
    probation                Probation[]
    VolunteerAttendance      VolunteerAttendance[]

    @@unique([chapter_id])
    @@index([chapter_id])
}

model Probation {
    id                 String                    @id @default(nanoid())
    kind_of_probation  ScholarStatus
    starting_date      DateTime
    ending_date        DateTime
    done_at_the_moment Json
    probation_reason   String
    agreement          Json
    meetings           DateTime[]
    next_meeting       DateTime
    scholar            ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
    scholar_id         String

    @@index([scholar_id])
}
