//  Prisma schema for the admin users
//@see https://next-auth.js.org/v3/adapters/prisma#setup for more information
// Here we model all the necesary data and information for the next-auth to work
/// @author Kevin Bravo (kevinbravo.me)

import { AdminRoles } from "roles-users"
import { Region } from "scholar\types-scholar"
import { ScholarCanAssist, ScholarCanAssist, ScholarStatus } from "scholar\types-scholar"
import { Chapter } from "..\schema"

model AdminAccount {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AdminSession {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AdminUser {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       AdminAccount[]
  sessions       AdminSession[]
  lastLogin      DateTime?      @default(now())
  role           AdminRoles
  responsibility String
  Chapter        Chapter?       @relation(fields: [chapterId], references: [id])
  chapterId      String?

  @@index([chapterId])
}

model AdminVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
