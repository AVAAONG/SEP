//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// chat.prisma
//

/// Prisma schema model for `Chat` table in database.
/// Here we model all the necesary data and information wee need for the English Chat clubs, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Chat {
  id                 String           @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  calendar_id        String?
  start_dates        DateTime[]
  end_dates          DateTime[]
  rating             Float?
  modality           Modality
  level              Level
  activity_status    ActivityStatus
  temp_data          ChatsTempData?
  scholar_attendance ChatAttendance[]
  speaker            Speaker[]

  @@index([title, modality, activity_status, level])
}

model ChatAttendance {
  id                       String                    @id @default(nanoid())
  scholar                  ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
  scholar_id               String
  chat_id                  String
  chat                     Chat                      @relation(fields: [chat_id], references: [id])
  attendance               ScholarAttendance
  justification            String?
  satisfaction_form_filled Boolean?
}

model ChatsTempData {
  id               String  @id @default(nanoid())
  chat             Chat    @relation(fields: [chat_id], references: [id])
  chat_id          String  @unique
  form_link        String?
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
  whatsapp_link    String?
}

//
// types-chat.prisma
//

// Base types prisma file for chat models. Types that are only used for chat related models. 
/// @author Kevin Bravo (kevinbravo.me)

enum Level {
  BASICO
  INTERMEDIO
  AVANZADO
}

//
// speaker.prisma
//

enum KindOfSpeaker {
  CHATS
  WORKSHOPS
  CHATS_AND_WORKSHOPS
}

// This model is used to store the data of the speaker of the workshop
model Speaker {
  id             String        @id @default(nanoid())
  first_names    String
  last_names     String
  email          String?
  birthdate      DateTime?
  years_of_exp   Int?
  job_title      String?
  job_company    String?
  actual_city    String?
  actual_country String?
  image          String?
  description    String?
  instagram_user String?
  twitter_user   String?
  linkedin_user  String?
  facebook_user  String?
  phone_number   String?
  curriculum     String?
  gender         Gender?
  speaker_kind   KindOfSpeaker
  workshops      Workshop[]
  chats          Chat[]
}

//
// type-activities.prisma
//

// Base types prisma file for activities models. Types that are only used for actiities related models.
/// @author Kevin Bravo (kevinbravo.me)

enum Modality {
  IN_PERSON
  ONLINE
  HYBRID
}

// SCHEDULED - When the activity is scheduled but hasent been sended.
// SEND - When the activity has been sended to the scholars.
// IN_PROGRESS - When the activity is in progress.
// DONE - When the activity is done.
// ATTENDANCE_CHECKED - (The last state of a sucsessfully done activity)  When the attendance has been checked.
// SUSPENDED - When the activity is suspended.
enum ActivityStatus {
  SCHEDULED
  SENT
  IN_PROGRESS
  DONE
  ATTENDANCE_CHECKED
  SUSPENDED
}

enum ScholarAttendance {
  ENROLLED
  WAITING_LIST
  ATTENDED
  NOT_ATTENDED
  JUSTIFY
}

enum Gender {
  M
  F
  O
}

//
// types-volunteer.prisma
//

// Base types prisma file for Volunteer model. Types that are only used for  volunteer related models. 
/// @author Kevin Bravo (kevinbravo.me)

//
// volunteer.prisma
//

// /// Prisma schema model for `Volunteer` table in database.
// /// Here we model all the necesary data and information wee need for the Volunteer activities, and related tables (tempData, attendance)
// /// @author Kevin Bravo (kevinbravo.me)

enum KindOfVolunteer {
  EXTERNO
  INTERNO
}

model Volunteer {
  id                   String                @id @default(nanoid())
  title                String
  spots                Int
  description          String
  hours                Float
  raiting              Float?
  place                String
  photoAlbum           String?
  kind_of_volunteer    String
  constancia           String?
  status               String
  volunteer_attendance VolunteerAttendance[]
}

// model Project {
//     id           String      @id @default(nanoid())
//     organizacion beneficiada

//     beneficiary String
// }

model VolunteerAttendance {
  id            String                    @id @default(nanoid(22))
  scholar       ScholarProgramInformation @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  volunteerId   String
  volnuteer     Volunteer                 @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([volunteerId])
  @@index([scholarId])
}

//
// types-workshop.prisma
//

// Base types prisma file for Workshop model.
/// @author Kevin Bravo (kevinbravo.me)

enum Skill {
  CITIZEN_EXERCISE
  LEADERSHIP
  SELF_MANAGEMENT
  ICT
  ENTREPRENEURSHIP
}

enum WorkshopYear {
  I
  II
  III
  IV
  V
}

//
// workshop.prisma
//

/// Prisma schema model for `Workshop` table in database.
/// Here we model all the necesary data and information wee need for the Workshop activities, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

// This model is used to store the data of the workshop
model Workshop {
  id                 String               @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  calendar_id        String?
  start_dates        DateTime[]
  end_dates          DateTime[]
  hours              Float
  year               WorkshopYear[]
  modality           Modality
  asociated_skill    Skill
  temp_data          WorkshopTempData?
  activity_status    ActivityStatus
  scholar_attendance WorkshopAttendance[]
  speaker            Speaker[]

  @@index([title, modality, activity_status, asociated_skill])
}

// This model is used to store the data that is not necesary to be stored in the database, but is necesary to be stored temporaly in the server
model WorkshopTempData {
  id               String   @id @default(nanoid())
  workshop         Workshop @relation(fields: [workshop_id], references: [id])
  workshop_id      String   @unique
  form_link        String
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
}

//  Intermediate table to store the attendance of the scholars to the workshops
model WorkshopAttendance {
  id                       String                    @id @default(nanoid())
  scholar                  ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
  scholar_id               String
  workshop_id              String
  workshop                 Workshop                  @relation(fields: [workshop_id], references: [id])
  attendance               ScholarAttendance
  justification            String?
  satisfaction_form_filled Boolean?
  raiting                  Float?

  @@index([scholar_id])
  @@index([workshop_id])
}

//
// base-next-auth.prisma
//

enum KinOfUser {
  ADMIN
  SCHOLAR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime      @default(now())
  last_login    DateTime?     @default(now())
  kind_of_user  KinOfUser
  admin         AdminProfile? @relation(fields: [adminId], references: [id])
  adminId       String?       @unique
  scholar       Scholar?      @relation(fields: [scholarId], references: [id])
  scholarId     String?       @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// base.prisma
//

///  Base prisma file, Here we specified each of the configuration for make prisma work correctly
/// @author Kevin Bravo (kevinbravo.me)

///@see https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

/// This determines how Prisma connects your database.
///@see https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
/// Ignore the warning, this is a bug from prisma-import
datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("PRISMA_DIRECT_DATABASE_URL")
}

/// This is the configuration for the prisma-erd-generator
/// @see https://github.com/keonik/prisma-erd-generator
/// This allow to create an ERD from the prisma schema on generation
/// @example:
///       $ pnpm prisma:generate
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.svg"
// }

//
// chapter.prisma
//

model Chapter {
  id                 String                      @id @default(nanoid())
  name               String
  asociated_scholars ScholarProgramInformation[]
  asociated_admins   AdminProfile[]
}

//
// types.prisma
//

// Base  type prisma file, in this file we define the base types for all the prisma schema
/// @author Kevin Bravo (kevinbravo.me)

enum AvaaYear {
  I
  II
  III
  IV
  V
  V0
  TODOS
}

//
// admin.prisma
//

//  Prisma schema for the admin users
//@see https://next-auth.js.org/v3/adapters/prisma#setup for more information
// Here we model all the necesary data and information for the next-auth to work
/// @author Kevin Bravo (kevinbravo.me)

model AdminProfile {
  id                String     @id @default(nanoid())
  profileName       String
  profilePic        String
  allowedEmail      String     @unique
  gender            Gender
  updated_at        DateTime   @updatedAt
  responsibility    String
  chapter           Chapter?   @relation(fields: [chapter_id], references: [id])
  chapter_id        String?
  user              User?
  allowedActions    Controller @relation(fields: [allowedActions_id], references: [id])
  allowedActions_id String     @unique

  @@index([chapter_id])
}

model Controller {
  id             String        @id @default(nanoid())
  name           String        @unique
  admin          AdminProfile?
  allowedActions Json[]
}

//
// project.prisma
//

// /// Prisma schema model for all the projects related table in database.
// /// Here we model all the necesary data and information we need for the different kind of projects we have to make volunteer activities. 
// /// @author Kevin Bravo (kevinbravo.me)

// import { Volunteer } from "..\..\activities\volunteer\volunteer"
// import { Scholar } from "..\scholar\scholar"

// model ExternalProjects {
//     id             String  @id @default(nanoid(22))
//     name           String
//     username       String
//     description    String?
//     image          String?
//     instagramUser  String?
//     location       String?
//     website        String?
//     phoneNumer     String?
//     email          String?
//     personInCharge String?
//     goal           String?

//     volunteerActivities Volunteer[]
//     createdAt           DateTime
// }

// model InternalProjects {
//     id                  String      @id @default(nanoid(22))
//     name                String
//     username            String
//     description         String?
//     image               String?
//     instagramUser       String?
//     ScholarLeaders      User[]
//     KPI                 Json
//     volunteerActivities Volunteer[]
//     createdAt           DateTime
//     goal                String?
//     ods                 String?
//     bagdes              String[]
// }

//
// roles-users.prisma
//

// Base types prisma file for general user types. Types that are share between users. 
/// @author Kevin Bravo (kevinbravo.me)

// The roles that a user can have.

// STAFF_PROEXCELENCIA - Staff of the proexcelencia program. Have access to all the features of the app.
// STAFF_COMMUNICATIONS - Staff of the communications department. Have access only to the database of the scholars
// STAFF_ADMON - Staff of the administration department. Have access only to the 'nomina' and the database of scholars.
// STAFF_MENTORSHIP - Staff of the mentorship department. Have access only to the database of scholars and the mentorship activities that the scholars have done. Allow them to create matches between scholars and mentors.
// STAFF_RECRUITMENT - Staff of the recruitment department. Have access to the database of scholars, its allowd to create new scholars. Manage all the recruitment process of the program.
// COMITEE - Comitee of scholars. Have access to the database of scholars with all the activities that they have done, and allow to create volunteers
// PROYECT - Proyects of the proexcelencia program. Have access to the database of scholars, only volunteer activities that the scholars have done and allow to create volunteers
// CHAT - Chats of the proexcelencia program. Have access to the database of scholars, only chat club activities that the scholars have done and allow to create volunteers and chats.
enum AdminRoles {
  STAFF_PROEXCELENCIA
  STAFF_COMMUNICATIONS
  STAFF_ADMON
  STAFF_MENTORSHIP
  STAFF_RECRUITMENT
  COMITEE
  PROYECT
  CHAT
}

//
// collage.prisma
//

enum EvaluationScale {
  CERO_TO_TEN
  CERO_TO_FIVE
  CERO_TO_TWENTY
}

enum StudyRegime {
  SEMESTER
  QUARTER
  ANNUAL
}

enum StudyArea {
  ARCHITECTURE_URBANISM //Arquitectura y Urbanismo
  HEALTH_SCIENCES // Ciencias de la Salud
  JURIDICAL_POLITICAL_SCIENCES //Jurídico-Políticas
  SOCIAL_SCIENCES //Ciencias Sociales
  HUMANITIES_EDUCATION //Humanidades y Educación
  STEM //STEM (Ciencias, Tecnología,Ingenierías, Matemáticas)=
  OTHER
}

enum Collages {
  ENAHP
  UCSAR
  UNIMET
  IUPSM
  UCV
  UCAB
  USB
  UNE
  UNEXPO
  UNESR
  UMA
  UNEARTE
  UJMV
  UMC
  UPEL
  CUR
  UNEFA
  USM
  UNEXCA
  UAH
  UBV
}

model ScholarCollageInformation {
  id                      String                 @id @default(nanoid())
  academic_load_completed Boolean?
  collage                 Collages?
  career                  String
  study_area              StudyArea?
  evaluation_scale        EvaluationScale
  study_regime            StudyRegime
  collage_period          ScholarCollagePeriod[]
  Scholar                 Scholar[]
}

model ScholarCollagePeriod {
  id                            String                     @id @default(nanoid())
  current_academic_period       Int
  grade                         Float
  class_modality                Modality
  record                        String?
  scholar_collage_information   ScholarCollageInformation? @relation(fields: [scholar_collage_nformation_id], references: [id])
  scholar_collage_nformation_id String?

  @@index([scholar_collage_nformation_id])
}

//
// cva.prisma
//

model ScholarCVAInformation {
  id                     String             @id @default(nanoid())
  is_in_cva              Boolean            @default(false)
  not_started_cva_reason String?            @db.Text
  cva_location           String?
  cva_modality           String?
  certificate            String?
  modules                ScholarCvaModule[]
  scholar                Scholar[]
}

model ScholarCvaModule {
  id                         String                 @id @default(nanoid())
  module                     Int
  qualification              Float
  record                     String?
  scholar_cva_information    ScholarCVAInformation? @relation(fields: [scholar_cva_information_id], references: [id])
  scholar_cva_information_id String?

  @@unique([scholar_cva_information_id, module])
}

//
// scholar.prisma
//

/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necessary data and information we need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

model Scholar {
  id                     String                     @id @default(nanoid())
  allowedEmail           String?                    @unique
  first_names            String
  last_names             String
  dni                    String                     @unique
  gender                 Gender
  birthdate              DateTime
  is_working             Boolean                    @default(false)
  job_title              String?
  job_company            String?
  local_phone_number     String?
  cell_phone_Number      String?
  whatsapp_number        String?
  state_of_origin        String?
  address                String?
  instagram_user         String?
  twitter_user           String?
  facebook_user          String?
  linkedin_user          String?
  program_information    ScholarProgramInformation? @relation(fields: [program_information_id], references: [id])
  collage_information    ScholarCollageInformation? @relation(fields: [collage_information_id], references: [id])
  cva_information        ScholarCVAInformation?     @relation(fields: [cva_information_id], references: [id])
  program_information_id String?
  collage_information_id String?
  cva_information_id     String?
  is_chat_speaker        Boolean                    @default(false)
  chat_speaker_id        String?
  user                   User?

  @@unique([program_information_id, collage_information_id, cva_information_id])
  @@index([program_information_id])
  @@index([collage_information_id])
  @@index([cva_information_id])
}

model ScholarProgramInformation {
  id                       String                @id @default(nanoid())
  avaa_admission_year      DateTime
  scholar_status           ScholarStatus         @default(NORMAL)
  scholar_condition        ScholarCondition?
  can_assist_to_chats      ScholarCanAssist      @default(YES)
  can_assist_to_workshops  ScholarCanAssist      @default(YES)
  can_assist_to_volunteers ScholarCanAssist      @default(YES)
  chapter                  Chapter?              @relation(fields: [chapter_id], references: [id])
  chapter_id               String?
  attended_workshops       WorkshopAttendance[]
  attended_chats           ChatAttendance[]
  Scholar                  Scholar[]
  probation                Probation[]
  VolunteerAttendance      VolunteerAttendance[]

  @@index([chapter_id])
}

model Probation {
  id                 String                    @id @default(nanoid())
  kind_of_probation  ScholarStatus
  starting_date      DateTime
  ending_date        DateTime
  done_at_the_moment Json
  probation_reason   String
  agreement          Json
  meetings           DateTime[]
  next_meeting       DateTime
  scholar            ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
  scholar_id         String

  @@index([scholar_id])
}

//
// types-scholar.prisma
//

// Base types prisma file for scholar types. Types that are only used for scholars.
/// @author Kevin Bravo (kevinbravo.me)

enum Region {
  ZULIA
  CARABOBO
  CARACAS
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  NORMAL
}

enum ScholarCanAssist {
  YES
  NO
}

enum ScholarCondition {
  ACTIVE
  RESIGNATION
  WITHDRAWAL
  ALUMNI
}
