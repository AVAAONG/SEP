//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// chat.prisma
//

/// Prisma schema model for `Chat` table in database.
/// Here we model all the necesary data and information wee need for the English Chat clubs, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

model Chat {
  id                 String           @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  calendar_ids       String[]
  start_dates        DateTime[]
  end_dates          DateTime[]
  modality           Modality
  level              Level
  activity_status    ActivityStatus
  temp_data          ChatsTempData?
  scholar_attendance ChatAttendance[]
  speaker            Speaker[]
  slides             String?

  @@index([title, modality, activity_status, level])
}

model ChatAttendance {
  id                             String                    @id @default(nanoid())
  scholar                        ScholarProgramInformation @relation(fields: [program_information_scholar_id], references: [id])
  program_information_scholar_id String
  chat_id                        String
  chat                           Chat                      @relation(fields: [chat_id], references: [id])
  attendance                     ScholarAttendance
  raiting                        Float?
  justification                  String?
  satisfaction_form_filled       Boolean?
  ChatSafisfactionForm           ChatSafisfactionForm?
}

model ChatsTempData {
  id               String  @id @default(nanoid())
  chat             Chat    @relation(fields: [chat_id], references: [id])
  chat_id          String  @unique
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
  whatsapp_link    String?
}

model ChatSafisfactionForm {
  id                              String         @id @default(nanoid())
  suggestions                     String //Escribe algunas sugerencias que permitan mejorar el desarrollo de las actividades de formación.
  speaker_satisfaction            Float //Consideras que el desempeño del facilitador, en general, fue:
  speaker_strategies_satisfaction Float // Consideras que las estrategias aplicadas por el especialista facilitaron tu aprendizaje y el desarrollo de la competencia prevista.
  meeting_software_satisfaction   Float //El uso de la plataforma para videoconferencias utilizada fue:
  activity_satisfaction           Float //¿Cuál es tu nivel de satisfacción con el desarrollo de la actividad?
  activity_pourpose_satisfaction  Float //La actividad evidenció un propósito formativo de utilidad para tu desempeño personal y profesional.
  activity_duration               Float // 2. El tiempo programado para el desarrollo de la actividad de formación fue:
  activity_schedule               Float //El horario propuesto para la actividad fue:
  acivity_anticipation_time       Float // Recibiste la convocatoria para la actividad con suficiente anticipación:
  chat_attendance                 ChatAttendance @relation(fields: [chat_attendance_id], references: [id])
  chat_attendance_id              String         @unique
}

//
// types-chat.prisma
//

// Base types prisma file for chat models. Types that are only used for chat related models. 
/// @author Kevin Bravo (kevinbravo.me)

enum Level {
  BASIC
  INTERMEDIATE
  ADVANCED
  STAFF_ONLY // Para los chats que vayan dirigidos al staff. En estos chats no se puede inscribir ningun becario.
}

//
// speaker.prisma
//

enum KindOfSpeaker {
  CHATS
  WORKSHOPS
  CHATS_AND_WORKSHOPS
}

// This model is used to store the data of the speaker of the workshop
model Speaker {
  id             String        @id @default(nanoid())
  first_names    String
  last_names     String
  email          String?
  birthdate      DateTime?
  years_of_exp   Int?
  job_title      String?
  job_company    String?
  actual_city    String?
  actual_country String?
  image          String?
  description    String?
  instagram_user String?
  twitter_user   String?
  linkedin_user  String?
  facebook_user  String?
  phone_number   String?
  curriculum     String?
  gender         Gender?
  speaker_kind   KindOfSpeaker
  workshops      Workshop[]
  chats          Chat[]
}

//
// type-activities.prisma
//

// Base types prisma file for activities models. Types that are only used for actiities related models.
/// @author Kevin Bravo (kevinbravo.me)

enum Modality {
  IN_PERSON
  ONLINE
  HYBRID
}

// SCHEDULED - When the activity is scheduled but hasent been sended.
// SEND - When the activity has been sended to the scholars.
// IN_PROGRESS - When the activity is in progress.
// DONE - When the activity is done.
// ATTENDANCE_CHECKED - (The last state of a sucsessfully done activity)  When the attendance has been checked.
// SUSPENDED - When the activity is suspended.
enum ActivityStatus {
  SCHEDULED
  SENT
  IN_PROGRESS
  DONE
  ATTENDANCE_CHECKED
  SUSPENDED
}

enum ScholarAttendance {
  ENROLLED
  WAITING_LIST
  ATTENDED
  NOT_ATTENDED
  JUSTIFY
}

enum Gender {
  M
  F
  O
}

//
// types-volunteer.prisma
//

// Base types prisma file for Volunteer model. Types that are only used for  volunteer related models. 
/// @author Kevin Bravo (kevinbravo.me)

//
// volunteer.prisma
//

// /// Prisma schema model for `Volunteer` table in database.
// /// Here we model all the necesary data and information wee need for the Volunteer activities, and related tables (tempData, attendance)
// /// @author Kevin Bravo (kevinbravo.me)

enum KindOfVolunteer {
  EXTERNO
  INTERNO
}

model Volunteer {
  id                   String                @id @default(nanoid())
  title                String
  spots                Int
  description          String
  start_dates          DateTime[]
  end_dates            DateTime[]
  raiting              Float?
  place                String
  photoAlbum           String?
  kind_of_volunteer    String
  constancia           String?
  status               String
  volunteer_attendance VolunteerAttendance[]
}

// model Project {
//     id           String      @id @default(nanoid())
//     organizacion beneficiada

//     beneficiary String
// }

model VolunteerAttendance {
  id            String                    @id @default(nanoid(22))
  scholar       ScholarProgramInformation @relation(fields: [scholarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scholarId     String
  volunteerId   String
  hours         Float
  volnuteer     Volunteer                 @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendance    ScholarAttendance
  justification String?

  @@index([volunteerId])
  @@index([scholarId])
}

//
// types-workshop.prisma
//

// Base types prisma file for Workshop model.
/// @author Kevin Bravo (kevinbravo.me)

enum Skill {
  CITIZEN_EXERCISE
  LEADERSHIP
  SELF_MANAGEMENT
  ICT
  ENTREPRENEURSHIP
}

enum WorkshopYear {
  I
  II
  III
  IV
  V
}

//
// workshop.prisma
//

/// Prisma schema model for `Workshop` table in database.
/// Here we model all the necesary data and information wee need for the Workshop activities, and related tables (tempData, attendance, speaker)
/// @author Kevin Bravo (kevinbravo.me)

// This model is used to store the data of the workshop
model Workshop {
  id                 String               @id @default(nanoid())
  title              String
  avalible_spots     Int
  platform           String
  description        String
  kindOfWorkshop     String // Aun no esta completamente definido cuales seran los tipos de actividad formativa que se van a realizar, por lo cual se dejo como string para que se pueda cambiar facilmente
  calendar_ids       String[]
  start_dates        DateTime[]
  end_dates          DateTime[]
  year               WorkshopYear[]
  modality           Modality
  asociated_skill    Skill
  temp_data          WorkshopTempData?
  activity_status    ActivityStatus
  scholar_attendance WorkshopAttendance[]
  speaker            Speaker[]
  slides             String?

  @@index([title, modality, activity_status, asociated_skill])
}

// This model is used to store the data that is not necesary to be stored in the database, but is necesary to be stored temporaly in the server
model WorkshopTempData {
  id               String   @id @default(nanoid())
  workshop         Workshop @relation(fields: [workshop_id], references: [id])
  workshop_id      String   @unique
  meeting_link     String?
  meeting_id       String?
  meeting_password String?
}

//  Intermediate table to store the attendance of the scholars to the workshops
model WorkshopAttendance {
  id                             String                    @id @default(nanoid())
  scholar                        ScholarProgramInformation @relation(fields: [program_information_scholar_id], references: [id])
  program_information_scholar_id String
  workshop_id                    String
  workshop                       Workshop                  @relation(fields: [workshop_id], references: [id])
  attendance                     ScholarAttendance
  justification                  String?
  satisfaction_form_filled       Boolean?
  satisfaction_form              WorkshopSafisfactionForm?

  @@index([program_information_scholar_id])
  @@index([workshop_id])
}

model WorkshopSafisfactionForm {
  id                              String             @id @default(nanoid())
  suggestions                     String //Escribe algunas sugerencias que permitan mejorar el desarrollo de las actividades de formación.
  speaker_satisfaction            Float //Consideras que el desempeño del facilitador, en general, fue:
  speaker_strategies_satisfaction Float // Consideras que las estrategias aplicadas por el especialista facilitaron tu aprendizaje y el desarrollo de la competencia prevista.
  meeting_software_satisfaction   Float //El uso de la plataforma para videoconferencias utilizada fue:
  activity_satisfaction           Float //¿Cuál es tu nivel de satisfacción con el desarrollo de la actividad?
  activity_pourpose_satisfaction  Float //La actividad evidenció un propósito formativo de utilidad para tu desempeño personal y profesional.
  activity_duration               Float // 2. El tiempo programado para el desarrollo de la actividad de formación fue:
  activity_schedule               Float //El horario propuesto para la actividad fue:
  acivity_anticipation_time       Float // Recibiste la convocatoria para la actividad con suficiente anticipación:
  workshop_attendance             WorkshopAttendance @relation(fields: [workshop_attendance_id], references: [id])
  workshop_attendance_id          String             @unique
}

//
// base-next-auth.prisma
//

enum KinOfUser {
  ADMIN
  SCHOLAR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime      @default(now())
  last_login    DateTime?     @default(now())
  kind_of_user  KinOfUser
  admin         AdminProfile? @relation(fields: [adminId], references: [id])
  adminId       String?       @unique
  scholar       Scholar?      @relation(fields: [scholarId], references: [id])
  scholarId     String?       @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// base.prisma
//

///  Base prisma file, Here we specified each of the configuration for make prisma work correctly
/// @author Kevin Bravo (kevinbravo.me)

///@see https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

/// This determines how Prisma connects your database.
///@see https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
/// Ignore the warning, this is a bug from prisma-import
datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("PRISMA_DIRECT_DATABASE_URL")
}

/// This is the configuration for the prisma-erd-generator
/// @see https://github.com/keonik/prisma-erd-generator
/// This allow to create an ERD from the prisma schema on generation
/// @example:
///       $ pnpm prisma:generate
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.svg"
// }

//
// mentors.prisma
//

enum MentorProgramStatus {
  PENDING
  ACCEPTED
  NOT_ACCEPTED
}

model Mentor {
  id                String              @id @default(nanoid())
  first_name        String
  last_name         String
  email             String              @unique
  dni               String              @unique
  cell_phone        String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  birthdate         DateTime?
  city_of_residence String?
  profession        String?
  gender            Gender?
  company           String?
  company_position  String?
  other_activities  String?
  image             String?
  hobbies           String?
  instagram_profile String?
  linkedin_profile  String?
  facebook_profile  String?
  twitter_profile   String?
  tiktok_profile    String?
  areas_of_interest String?
  how_know_avaa     String?
  motivation        String?
  curriculum        String?
  status            MentorProgramStatus
  mentor_mentee     Mentor_mentee[]
}

model Mentee_mentor_activities {
  id              String        @id @default(nanoid())
  mentee_mentor   Mentor_mentee @relation(fields: [mentor_menteeId], references: [id])
  mentor_menteeId String
}

enum MentorMenteeStatus {
  ACTIVE
  INACTIVE
}

model Mentor_mentee {
  id                       String                     @id @default(nanoid())
  mentor_mentee_activities Mentee_mentor_activities[]
  Mentor                   Mentor?                    @relation(fields: [mentorId], references: [id])
  startDate                DateTime                   @default(now())
  endDate                  DateTime
  mentorId                 String?
  status                   MentorMenteeStatus
}

//
// chapter.prisma
//

model Chapter {
  id                 String                      @id @default(nanoid())
  name               String
  asociated_scholars ScholarProgramInformation[]
  asociated_admins   AdminProfile[]
}

//
// types.prisma
//

// Base  type prisma file, in this file we define the base types for all the prisma schema
/// @author Kevin Bravo (kevinbravo.me)

enum AvaaYear {
  I
  II
  III
  IV
  V
  V0
  TODOS
}

//
// admin.prisma
//

//  Prisma schema for the admin users
//@see https://next-auth.js.org/v3/adapters/prisma#setup for more information
// Here we model all the necesary data and information for the next-auth to work
/// @author Kevin Bravo (kevinbravo.me)

model AdminProfile {
  id                String      @id @default(nanoid())
  profileName       String
  profilePic        String
  allowedEmail      String      @unique
  gender            Gender
  updated_at        DateTime    @updatedAt
  responsibility    String
  chapter           Chapter?    @relation(fields: [chapter_id], references: [id])
  chapter_id        String?
  user              User?
  allowedActions    Controller? @relation(fields: [allowedActions_id], references: [id])
  allowedActions_id String

  @@index([chapter_id, allowedActions_id])
}

model Controller {
  id             String         @id @default(nanoid())
  name           String         @unique
  admin          AdminProfile[]
  allowedActions Json[]
}

//
// project.prisma
//

// /// Prisma schema model for all the projects related table in database.
// /// Here we model all the necesary data and information we need for the different kind of projects we have to make volunteer activities. 
// /// @author Kevin Bravo (kevinbravo.me)

// import { Volunteer } from "..\..\activities\volunteer\volunteer"
// import { Scholar } from "..\scholar\scholar"

// model ExternalProjects {
//     id             String  @id @default(nanoid(22))
//     name           String
//     username       String
//     description    String?
//     image          String?
//     instagramUser  String?
//     location       String?
//     website        String?
//     phoneNumer     String?
//     email          String?
//     personInCharge String?
//     goal           String?

//     volunteerActivities Volunteer[]
//     createdAt           DateTime
// }

// model InternalProjects {
//     id                  String      @id @default(nanoid(22))
//     name                String
//     username            String
//     description         String?
//     image               String?
//     instagramUser       String?
//     ScholarLeaders      User[]
//     KPI                 Json
//     volunteerActivities Volunteer[]
//     createdAt           DateTime
//     goal                String?
//     ods                 String?
//     bagdes              String[]
// }

//
// roles-users.prisma
//

// Base types prisma file for general user types. Types that are share between users. 
/// @author Kevin Bravo (kevinbravo.me)

// The roles that a user can have.

// STAFF_PROEXCELENCIA - Staff of the proexcelencia program. Have access to all the features of the app.
// STAFF_COMMUNICATIONS - Staff of the communications department. Have access only to the database of the scholars
// STAFF_ADMON - Staff of the administration department. Have access only to the 'nomina' and the database of scholars.
// STAFF_MENTORSHIP - Staff of the mentorship department. Have access only to the database of scholars and the mentorship activities that the scholars have done. Allow them to create matches between scholars and mentors.
// STAFF_RECRUITMENT - Staff of the recruitment department. Have access to the database of scholars, its allowd to create new scholars. Manage all the recruitment process of the program.
// COMITEE - Comitee of scholars. Have access to the database of scholars with all the activities that they have done, and allow to create volunteers
// PROYECT - Proyects of the proexcelencia program. Have access to the database of scholars, only volunteer activities that the scholars have done and allow to create volunteers
// CHAT - Chats of the proexcelencia program. Have access to the database of scholars, only chat club activities that the scholars have done and allow to create volunteers and chats.
enum AdminRoles {
  STAFF_PROEXCELENCIA
  STAFF_COMMUNICATIONS
  STAFF_ADMON
  STAFF_MENTORSHIP
  STAFF_RECRUITMENT
  COMITEE
  PROYECT
  CHAT
}

//
// collage.prisma
//

enum EvaluationScale {
  CERO_TO_TEN
  CERO_TO_FIVE
  CERO_TO_TWENTY
}

enum StudyRegime {
  SEMESTER
  QUARTER
  QUARTIER
  ANNUAL
}

enum StudyArea {
  ARCHITECTURE_URBANISM //Arquitectura y Urbanismo
  HEALTH_SCIENCES // Ciencias de la Salud
  JURIDICAL_POLITICAL_SCIENCES //Jurídico-Políticas
  SOCIAL_SCIENCES //Ciencias Sociales
  HUMANITIES_EDUCATION //Humanidades y Educación
  STEM //STEM (Ciencias, Tecnología,Ingenierías, Matemáticas)=
  OTHER
}

enum Collages {
  ENAHP
  UCSAR
  UNIMET
  IUPSM
  UCV
  UCAB
  USB
  UNE
  UNEXPO
  UNESR
  UMA
  UNEARTE
  UJMV
  UMC
  UPEL
  CUR
  UNEFA
  USM
  UNEXCA
  UAH
  UBV
  //zulia
  UNICA
  URBE
  UJGH
  URU
  LUZ
  PSM
}

enum KindOfCollage {
  PUBLIC
  PRIVATE
}

model ScholarCollageInformation {
  id                            String                 @id @default(nanoid())
  academic_load_completed       Boolean?
  have_schooolarship            Boolean                @default(false)
  scholarship_percentage        Int?
  collage_start_date            DateTime?
  collage_end_date              DateTime?
  grade_special_mention         String?
  collage_opinion_study_quality String?
  inscription_comprobant        String?
  career_schedule               String?
  kind_of_collage               KindOfCollage
  collage                       Collages?
  career                        String
  mention                       String?
  study_area                    StudyArea?
  evaluation_scale              EvaluationScale?
  study_regime                  StudyRegime
  collage_period                ScholarCollagePeriod[]
  collage_acceptance_scan       String?
  collage_study_proof           String?
  collage_proffessor_card1      String?
  collage_proffessor_card2      String?
  scholar                       Scholar?               @relation(fields: [scholar_id], references: [id])
  scholar_id                    String?                @unique

  @@index([scholar_id])
}

model ScholarCollagePeriod {
  id                            String                     @id @default(nanoid())
  current_academic_period       Int
  inscription_proof             String?
  collage_schedule              String?
  grade                         Float
  class_modality                Modality
  record                        String?
  scholar_collage_information   ScholarCollageInformation? @relation(fields: [scholar_collage_nformation_id], references: [id])
  scholar_collage_nformation_id String?

  @@index([scholar_collage_nformation_id])
}

//
// cva.prisma
//

enum CvaLocation {
  MERCEDES
  CENTRO
}

model ScholarCVAInformation {
  id                     String             @id @default(nanoid())
  is_in_cva              Boolean            @default(false)
  not_started_cva_reason String?            @db.Text
  cva_location           CvaLocation?
  certificate            String?
  modules                ScholarCvaModule[]
  scholar                Scholar            @relation(fields: [scholarId], references: [id])
  scholarId              String             @unique
}

model ScholarCvaModule {
  id                         String                 @id @default(nanoid())
  module                     Int
  cva_modality               String?
  qualification              Float
  record                     String?
  scholar_cva_information    ScholarCVAInformation? @relation(fields: [scholar_cva_information_id], references: [id])
  scholar_cva_information_id String?

  @@unique([scholar_cva_information_id, module])
}

//
// scholar.prisma
//

/// Prisma schema model for `Scholar` table in database.
/// Here we model all the necessary data and information we need for the scholars.
/// @author Kevin Bravo (kevinbravo.me)

enum JobSector {
  PRIVATE
  PUBLIC
}

model Scholar {
  id                         String                      @id @default(nanoid())
  photo                      String?
  first_names                String
  last_names                 String
  dni                        String                      @unique
  gender                     Gender
  birthdate                  DateTime?
  local_phone_number         String?
  cell_phone_Number          String?
  whatsapp_number            String?
  email                      String?                     @unique
  country                    String?
  state                      String?
  city                       String?
  address                    String?
  instagram_user             String?
  twitter_user               String?
  facebook_user              String?
  linkedin_user              String?
  tiktok_user                String?
  youtube_user               String?
  user                       User?
  program_information        ScholarProgramInformation?
  collage_information        ScholarCollageInformation[]
  cva_information            ScholarCVAInformation?
  job_information            JobInformation[]
  recruitment_information    RecruitmentInformation?
  entrepenourshipInformation EntrepenourshipInformation?
}

model ScholarProgramInformation {
  id                       String                @id @default(nanoid())
  program_admission_date   DateTime
  program_end_date         DateTime?
  is_chat_speaker          Boolean               @default(false)
  scholar_status           ScholarStatus         @default(NORMAL)
  scholar_condition        ScholarCondition?     @default(ACTIVE)
  quitted_chats_count      Int                   @default(0)
  quitted_volunteers_count Int                   @default(0)
  quitted_workshops_count  Int                   @default(0)
  probation                Probation[]
  volunteerAttendance      VolunteerAttendance[]
  attended_workshops       WorkshopAttendance[]
  attended_chats           ChatAttendance[]
  scholar                  Scholar               @relation(fields: [scholarId], references: [id])
  chapter                  Chapter?              @relation(fields: [chapter_id], references: [id])
  chapter_id               String?
  scholarId                String                @unique
  chat_speaker_id          String?               @unique

  @@index([chapter_id])
}

model Probation {
  id                 String                    @id @default(nanoid())
  kind_of_probation  ScholarStatus
  starting_date      DateTime
  ending_date        DateTime
  done_at_the_moment Json
  probation_reason   String
  agreement          Json
  meetings           DateTime[]
  next_meeting       DateTime
  scholar            ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
  scholar_id         String

  @@index([scholar_id])
}

model RecruitmentInformation {
  id                            String            @id @default(nanoid())
  infomation_fill               DateTime
  information_update            DateTime
  recruitmentStatus             RecruitmentStatus
  contribute_to_family_income   Boolean           @default(false)
  average_family_income         String?
  whit_who_do_you_live          String?
  kind_of_house                 String?
  family_members                String?
  father_job                    String?
  fathers_company_name          String?
  fathers_yearsof_experience    String?
  mother_job                    String?
  mothers_company_name          String?
  mothers_yearsof_experience    String?
  parent_phone_number           String?
  parent_name                   String?
  high_school_name              String?
  high_school_address           String?
  high_school_title             String?
  high_school_director_name     String?
  high_school_average_grade     String?
  high_school_grade_proof       String?
  extracurricular_activities    String?
  social_labour_place           String?
  social_labour_learning        String?
  speaked_other_languages       Boolean?
  speaked_languages             String?
  how_knows_program             String?
  internet_connection           Boolean           @default(false)
  internet_connection_stability String?
  why_wants_to_be_scholar       String?
  dni_scan                      String?
  rif_scan                      String?
  cnu_opsu_scan                 String?
  esay                          String?
  last_tax_declaration          String?
  receipt_of_payment            String?
  speaked_languages_level       Level?
  referred_by                   String?
  scholar_id                    String            @unique
  scholar                       Scholar           @relation(fields: [scholar_id], references: [id])

  @@index([scholar_id])
}

model AlumniSatisfactionForm {
  id                                      String    @id @default(nanoid())
  do_interships                           Boolean   @default(true)
  company                                 String?
  company_sector                          JobSector
  intership_start_date                    DateTime
  intership_end_date                      DateTime
  stipend_satisfaction                    Float
  intership_comments                      String
  intership_specialty                     String
  english_chats                           Float
  workshops                               Float
  Volunteer                               Float
  Mentorship                              Float
  intership__and_job_placement            Float
  comments_about_program_component        String
  skills_developed_during_the_program     String
  values_developed_during_the_program     String
  program_suggestions                     String
  program_support                         String
  how_would_like_to_participate_as_alumni String
  future_activities                       String
}

model JobInformation {
  id                                  String     @id @default(nanoid())
  is_working                          Boolean    @default(false)
  job_title                           String?
  job_company                         String?
  job_modality                        Modality?
  job_schedule                        JobHours?
  kind_of_job                         KindOfJob?
  job_sector                          JobSector?
  aspects_that_influenced_getting_job String?
  job_start_date                      DateTime?
  job_end_date                        DateTime?
  laboral_conditions                  String?
  actions_to_get_job                  String?
  why_dint_get_job                    String?
  scholar                             Scholar    @relation(fields: [scholarId], references: [id])
  scholarId                           String     @unique
}

model EntrepenourshipInformation {
  id                            String    @id @default(nanoid())
  have_entrepreneurship         Boolean   @default(false)
  entrepreneurship_name         String?
  entrepreneurship_kind         String?
  entrepreneurship_services     String?
  entrepreneurship_social_media String?
  motivations_to_be_entrepeneur String?
  proexcelencia_motivates_it    String?
  entrepreneurship_start_date   DateTime?

  scholar   Scholar @relation(fields: [scholarId], references: [id])
  scholarId String  @unique
}

//
// types-scholar.prisma
//

// Base types prisma file for scholar types. Types that are only used for scholars.
/// @author Kevin Bravo (kevinbravo.me)

enum Region {
  ZULIA
  CARABOBO
  CARACAS
}

enum ScholarStatus {
  PROBATORIO_1
  PROBATORIO_2
  NORMAL
}

enum JobHours {
  PART_TIME
  FULL_TIME
  WEEKENDS
}

enum KindOfJob {
  FREELANCE
  FORMAL
  INFORMAL
}

enum ScholarCondition {
  ACTIVE
  RESIGNATION
  WITHDRAWAL
  ALUMNI
}

enum RecruitmentStatus {
  PHASE_1_PENDING
  PHASE_1_APPROVED
  PHASE_1_REJECTED
  PHASE_2_PENDING
  PHASE_2_APPROVED
  PHASE_2_REJECTED
  PHASE_3_PENDING
  PHASE_3_APPROVED
  PHASE_3_REJECTED
  PHASE_4_PENDING
  PHASE_4_APPROVED
  PHASE_4_REJECTED
}
