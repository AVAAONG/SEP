import { ScholarProgramInformation,  } from "users\scholar\scholar"
import { Gender } from "activities\type-activities"
import { Level } from "schema"

enum MetorRecruitmentStatus {
    ACCEPTED
    PENDING
    NOT_ACCEPTED
}

// AVAILABLE: The mentor is available and ready to take on new mentees.
// UNAVAILABLE: The mentor is currently unavailable to take on new mentees, possibly due to personal reasons or other commitments.
// ASSIGNED:  The mentor is currently assigned to one or more mentees and may not be available for additional mentees.
// RETIRED: The mentor has retired from the mentoring program and is no longer active.
enum MentorStatus {
    AVAILABLE
    UNAVAILABLE
    ASSIGNED
    RETIRED
}

// ACTIVE: The mentor-mentee relationship is currently active and ongoing. Both parties are engaged and participating in the mentoring process.
// COMPLETED: The mentor-mentee relationship has been successfully completed. Both parties have achieved the goals set out at the beginning of the relationship.
// INTERRUPTED:  The mentor-mentee relationship has been terminated. This could be due to a variety of reasons such as incompatibility, lack of progress, or mutual agreement to end the relationship.

// enum MentorMenteeStatus {
//     ACTIVE
//     COMPLETED
//     INTERRUPTED
// }

model MentorMentee {
    id         String                    @id @default(nanoid())
    start_date DateTime                  @default(now())
    end_date   DateTime?
    // status     MentorMenteeStatus
    obsevation String?
    // mentor     Mentor                    @relation(fields: [mentor_id], references: [id])
    // mentor_id  String
    scholar    ScholarProgramInformation @relation(fields: [scholar_id], references: [id])
    scholar_id String

    @@map("mentor_mentees")
}

model Mentor {
    id                      String                 @id @default(nanoid())
    photo                   String?
    first_name              String
    last_name               String
    id_number               String                 @unique
    birth_date              DateTime
    residence               String
    phone                   String
    email                   String                 @unique
    profession              String
    employed                Boolean
    company                 String?
    position                String?
    work_experience         String
    related_experience      String?
    chapter                 String
    other_activities        String?
    cv                      String
    speaks_other_lang       Boolean
    other_lang              String?
    lang_level              Level?
    interests               String
    hobbies                 String
    mentor_reason           String
    prev_mentor_exp         Boolean
    prev_mentor_desc        String?
    skills_strengths        String
    trust_techniques        String
    mentee_support          String
    time_commitment         String
    ideal_mentee            String
    group_activities        Boolean
    instagram               String?
    linkedin                String?
    referral_source         String
    iesa_cert               Boolean?
    iesa_cert_date          DateTime?
    created_at              DateTime               @default(now())
    updated_at              DateTime               @updatedAt
    recruitment_status      MetorRecruitmentStatus @default(PENDING)
    recruitment_observation String?
    status                  MentorStatus           @default(AVAILABLE)
    // MentorMentee            MentorMentee[]

    @@map("mentors")
}
